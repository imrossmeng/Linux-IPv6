<!DOCTYPE book  PUBLIC "-//OASIS//DTD DocBook V4.2//EN"
 [ 
<!ENTITY % output.print.png "IGNORE">
<!ENTITY % output.print.pdf "IGNORE">
<!ENTITY % output.print.eps "IGNORE">
<!ENTITY % output.print.bmp "IGNORE">
 ]>

<!-- SGML file was created by LyX 2.3.4.2
  See http://www.lyx.org/ for more information -->
<book lang="en">
<bookinfo>
<title>Linux IPv6 HOWTO (en)</title>
<author><firstname>Peter</firstname><surname>Bieringer</surname><affiliation><address>pb at bieringer dot de</address></affiliation></author>
<revhistory> 
<revision> <revnumber>0.67wip</revnumber> <date>2020-04-04</date> <authorinitials>PB</authorinitials></revision>
<revision> <revnumber>0.66</revnumber> <date>2014-05-15</date> <authorinitials>PB</authorinitials></revision>
<revision> <revnumber>0.65</revnumber> <date>2009-12-13</date> <authorinitials>PB</authorinitials></revision>
<revision> <revnumber>0.64</revnumber> <date>2009-06-11</date> <authorinitials>PB</authorinitials></revision>
<revision> <revnumber>0.60</revnumber> <date>2007-05-31</date> <authorinitials>PB</authorinitials></revision>
<revision> <revnumber>0.51</revnumber> <date>2006-11-08</date> <authorinitials>PB</authorinitials></revision>
</revhistory> <abstract>
<para>The goal of the Linux IPv6 HOWTO is to answer both basic and advanced questions about IPv6 on the Linux operating system. This HOWTO will provide the reader with enough information to install, configure, and use IPv6 applications on Linux machines. Intermediate releases of this HOWTO are available at <ulink url="http://mirrors.bieringer.de/Linux+IPv6-HOWTO/">mirrors.bieringer.de</ulink> or <ulink url="http://mirrors.deepspace6.net/Linux+IPv6-HOWTO/">mirrors.deepspace6.net</ulink>. See also <link linkend="revision-history">revision history</link> for changes.</para>
</abstract></bookinfo><chapter id='chapter-general' >
<title><!-- anchor id="chapter-general" -->General</title>
<para>Information about available translations you will find in section <link linkend="general-translations">Translations</link>.</para><sect1 id='general-copright' >
<title><!-- anchor id="general-copright" -->Copyright, license and others</title>
<sect2>
<title>Copyright</title>
<para>Written and Copyright (C) 2001-2020 by Peter Bieringer</para></sect2><sect2>
<title>License</title>
<para>This Linux IPv6 HOWTO is published under GNU GPL version 2:
</para>
<para>The Linux IPv6 HOWTO, a guide how to configure and use IPv6 on Linux systems. 
</para>
<para>Copyright © 2001-2020 Peter Bieringer 
</para>
<para>This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. </para>
<para>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. </para>
<para>You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110, USA.</para></sect2><sect2>
<title>About the author</title>
<sect3>
<title>Internet/IPv6 history of the author</title>
<itemizedlist>
<listitem><para>1993: I got in contact with the Internet using console based e-mail and news client (e.g. look for &rdquo;e91abier&rdquo; on <ulink url="http://groups.google.com/">groups.google.com</ulink>, that's me).</para></listitem><listitem><para>1996: I got a request for designing a course on IPv6, including a workshop with the Linux operating system.</para></listitem><listitem><para>1997: Started writing a guide on how to install, configure and use IPv6 on Linux systems, called <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux - HowTo</ulink> (see <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-0.html#history">IPv6 &amp; Linux - HowTo/History</ulink> for more information).</para></listitem><listitem><para>2001: Started writing this new Linux IPv6 HOWTO. </para></listitem></itemizedlist></sect3><sect3>
<title>Contact</title>
<para>The author can be contacted via e-mail at &lt;pb at bieringer dot de&gt; and also via his <ulink url="http://www.bieringer.de/pb/">homepage</ulink>.</para>
<para>He's currently living in Munich / Bavaria / Germany / Europe / Earth.</para></sect3></sect2></sect1><sect1 id='general-category' >
<title><!-- anchor id="general-category" -->Category</title>
<para>This HOWTO should be listed in category &rdquo;<emphasis>Networking</emphasis>/<emphasis>Protocols</emphasis>&rdquo;.</para></sect1><sect1>
<title>Version, History and To-Do</title>
<sect2>
<title>Version</title>
<para>The current version is shown at the beginning of the document.</para>
<para>For other available versions/translations see also <ulink url="http://www.bieringer.de/linux/IPv6/">http://www.bieringer.de/linux/IPv6/</ulink>.</para></sect2><sect2>
<title>History</title>
<sect3>
<title>Major history</title>
<para>2001-11-30: Starting to design new HOWTO.</para>
<para>2002-01-02: A lot of content completed, first public release of chapter 1 (version 0.10).</para>
<para>2002-01-14: More completed, some reviews, public release of the whole document (version 0.14).</para>
<para>2002-08-16: Polish translation is in progress</para>
<para>2002-10-31: Chinese translation is available (see <link linkend="general-translations">Translations</link> for more)</para>
<para>2002-11-10: German translation is in progress</para>
<para>2003-02-10: German translation is available</para>
<para>2003-04-09: French translation is in progress</para>
<para>2003-05-09: French translation is available</para>
<para>2003-10-16: Italian translation is in progress</para>
<para>2004-03-12: Italian translation is available</para>
<para>2004-06-18: Greek translation is in progress</para>
<para>2005-07-25: Turkish translation is availble</para>
<para>2007-03-28: Portuguese-Brazil translation is in progress</para>
<para>2008-07-30: Spanish translation is available (lost, URL no longer valid)</para>
<para>2011-05-09: Portuguese-Brazil translation is again in progress</para></sect3><sect3>
<title>Full history</title>
<para>See <link linkend="revision-history">revision history</link> at the end of this document.</para></sect3></sect2><sect2>
<title>To-Do</title>
<itemizedlist>
<listitem><para>Fill in missing content</para></listitem><listitem><para>Finishing grammar checking</para></listitem></itemizedlist></sect2></sect1><sect1 id='general-translations' >
<title><!-- anchor id="general-translations" -->Translations</title>
<para>Translations always have to contain the URL, version number and copyright of the original document (but yours, too). Pls. don't translate the original changelog, this is not very useful - also do not translate the full section about available translations, can be run out-of-date, add an URL to this section here in the English howto.</para>
<para>Looks like the document's change frequency is mostly less than once per month. Since version 0.27 it looks like that most of the content contributed by me has been written. Translations always have to use the English version as source.</para><sect2>
<title>To language</title>
<para>Note: an overview with URLs can be found at <ulink url="http://www.bieringer.de/linux/IPv6/">http://www.bieringer.de/linux/IPv6/</ulink>.</para><sect3>
<title>Chinese</title>
<para>A Chinese translation by Burma Chen &lt;expns at yahoo dot com&gt; (announced to me at 2002-10-31) can be found on the TLDP: <ulink url="http://www.ibiblio.org/pub/Linux/docs/HOWTO/translations/zh/Linux-IPv6-HOWTO.txt.gz">http://www.ibiblio.org/pub/Linux/docs/HOWTO/translations/zh/Linux-IPv6-HOWTO.txt.gz (g'zipped txt)</ulink>. It's a snapshot translation, don't know whether kept up-to-date.</para></sect3><sect3>
<title>Polish</title>
<para>Since 2002-08-16 a Polish translation was started and is still in progress by Lukasz Jokiel &lt;Lukasz dot Jokiel at klonex dot com dot pl&gt;. Taken source: CVS-version 1.29 of LyX file, which was source for howto version 0.27. Status is still work-in-progress (2004-08-30).</para></sect3><sect3>
<title>German</title>
<para>With 2002-11-10 a German translation was started by Georg Käfer &lt;gkaefer at gmx dot at&gt; and the first public version was published 2003-02-10. It's originally available on Deep Space 6 at <ulink url="http://mirrors.deepspace6.net/Linux+IPv6-HOWTO-de/">http://mirrors.deepspace6.net/Linux+IPv6-HOWTO-de/</ulink> (mirrored e.g. on <ulink url="http://mirrors.bieringer.de/Linux+IPv6-HOWTO-de/">http://mirrors.bieringer.de/Linux+IPv6-HOWTO-de/</ulink>). This version will stay up-to-date as much as possible.</para></sect3><sect3>
<title>French</title>
<para>With 2003-04-09 a French translation was started by Michel Boucey &lt;mboucey at free dot fr&gt; and the first public version was published 2003-05-09. It's originally available on Deep Space 6 at <ulink url="http://mirrors.deepspace6.net/Linux+IPv6-HOWTO-fr/">http://mirrors.deepspace6.net/Linux+IPv6-HOWTO-fr/</ulink> (mirrored e.g. on <ulink url="http://mirrors.bieringer.de/Linux+IPv6-HOWTO-fr/">http://mirrors.bieringer.de/Linux+IPv6-HOWTO-fr/</ulink>).</para></sect3><sect3>
<title>Spanish</title>
<para>A member of the MontevideoLibre, a project in Uruguay (South America) started the translation into Spanish in wiki format some time ago, but the URL is no longer available.</para></sect3><sect3>
<title>Italian</title>
<para>With 2003-10-16 a Italian translation was started by Michele Ferritto &lt;m dot ferritto at virgilio dot it&gt; for the <ulink url="http://ildp.pluto.linux.it/">ILDP</ulink> (Italian Linux Documentation Project) and the first public version was published 2004-03-12. It's originally available on the ILDP at <ulink url="http://www.pluto.it/ildp/howto/ipv6.html">http://www.pluto.it/ildp/howto/ipv6.html</ulink>.</para></sect3><sect3>
<title>Japanese</title>
<para>On 2003-05-14 Shino Taketani &lt;shino_1305 at hotmail dot com&gt; send me a note that he planned to translate the HowTo into Japanese.</para></sect3><sect3>
<title>Greek</title>
<para>On 2004-06-18 Nikolaos Tsarmpopoulos &lt;ntsarb at uth dot gr&gt; send me a note that he planned to translate the HowTo into Greek.</para></sect3><sect3>
<title>Turkish</title>
<para>On 2005-07-18 Necdet Yucel &lt;nyucel at comu dot edu dot tr&gt; send me a note that a Turkish translation is available. It's a snapshot translation (currently of 0.61) and can be found at <ulink url="http://docs.comu.edu.tr/howto/ipv6-howto.html">http://docs.comu.edu.tr/howto/ipv6-howto.html</ulink>.</para></sect3><sect3>
<title>Portuguese-Brazil</title>
<para>On 2011-05-06 Gustavo Mendes de Carvalho &lt;gmcarvalho at gmail dot com&gt; start to translate the HowTo in Portuguese-Brazil. The first try in 2007 by Claudemir da Luz &lt;claudemir dot daluz at virtuallink dot com dot br&gt; was never finished.</para></sect3></sect2></sect1><sect1>
<title>Technical</title>
<sect2 id='general-original-source' >
<title><!-- anchor id="general-original-source" -->Original source of this HOWTO</title>
<para>This HOWTO is currently written with LyX version 2.2.2 on a Fedora 25 Linux system with template SGML/XML (DocBook book). It's available on <ulink url="https://github.com/tLDP/Linux-IPv6/">github / tLDP / Linux-IPv6</ulink> for contribution.</para><sect3>
<title>Code line wrapping</title>
<para>Code line wrapping is done using selfmade utility &rdquo;lyxcodelinewrapper.pl&rdquo;, you can get it from GitHub for your own usage: <ulink url="https://github.com/tLDP/Linux-IPv6/">github / tLDP / Linux-IPv6</ulink></para></sect3><sect3>
<title>SGML generation</title>
<para>SGML/XML is generated using export function in LyX.</para></sect3></sect2><sect2>
<title>On-line references to the HTML version of this HOWTO (linking/anchors)</title>
<sect3>
<title>Master index page</title>
<para>Generally, a reference to the master index page is recommended. </para></sect3><sect3>
<title>Dedicated pages</title>
<para>Because the HTML pages are generated out of the SGML file, the HTML filenames turn out to be quite random. However, some pages are tagged in LyX, resulting in static names. These tags are useful for references and shouldn't be changed in the future.</para>
<para>If you think that I have forgotten a tag, please let me know, and I will add it.</para></sect3></sect2></sect1><sect1>
<title>Preface</title>
<para>Some things first:</para><sect2>
<title>How many versions of a Linux &amp; IPv6 related HOWTO are floating around?</title>
<para>Including this, there are three (3) HOWTO documents available. Apologies, if that is too many ;-)</para><sect3>
<title>Linux IPv6 FAQ/HOWTO (outdated)</title>
<para>The first IPv6 related document was written by <emphasis>Eric Osborne</emphasis> and called <ulink url="http://www.linuxhq.com/IPv6/">Linux IPv6 FAQ/HOWTO</ulink> (please use it only for historical issues). Latest version was 3.2.1 released July, 14 1997.</para>
<para>Please help: if someone knows the date of birth of this HOWTO, please send me an e-mail (information will be needed in &rdquo;history&rdquo;).</para></sect3><sect3>
<title>IPv6 &amp; Linux - HowTo (maintained)</title>
<para>There exists a second version called <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux - HowTo</ulink> written by me (<emphasis>Peter Bieringer</emphasis>) in pure HTML. It was born April 1997 and the first English version was published in June 1997. I will continue to maintain it, but it will slowly fade (but not full) in favour of the Linux IPv6 HOWTO you are currently reading.</para></sect3><sect3>
<title>Linux IPv6 HOWTO (this document)</title>
<para>Because the <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux - HowTo</ulink> is written in pure HTML it's not really compatible with the <ulink url="http://www.tldp.org/">The Linux Documentation Project (TLDP)</ulink>. I (<emphasis>Peter Bieringer</emphasis>) got a request in late November 2001 to rewrite the <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux - HowTo</ulink> in SGML. However, because of the discontinuation of that HOWTO (<ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-0.html#history">Future of IPv6 &amp; Linux - HowTo</ulink>), and as IPv6 is becoming more and more standard, I decided to write a new  document covering basic and advanced issues which will remain important over the next few years. More dynamic and some advanced content will be still found further on in the second HOWTO (<ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux - HowTo</ulink>).</para></sect3></sect2></sect1><sect1>
<title>Used terms, glossary and shortcuts</title>
<sect2>
<title>Network related</title>
<variablelist>
<varlistentry><term>Base&nbsp;10</term><listitem><para>Well known decimal number system, represent any value with digit 0-9.</para></listitem></varlistentry><varlistentry><term>Base&nbsp;16</term><listitem><para>Usually used in lower and higher programming languages, known also as hexadecimal number system, represent any value with digit 0-9 and char A-F (case insensitive).</para></listitem></varlistentry><varlistentry><term>Base&nbsp;85</term><listitem><para>Representation of a value with 85 different digits/chars, this can lead to shorter strings but never seen in the wild.</para></listitem></varlistentry><varlistentry><term>Bit</term><listitem><para>Smallest storage unit, on/true (1) or off/false (0)</para></listitem></varlistentry><varlistentry><term>Byte</term><listitem><para>Mostly a collection of 8 (but not really a must - see older computer systems) bits</para></listitem></varlistentry><varlistentry><term>Device</term><listitem><para>Here, hardware of network connection, see also NIC</para></listitem></varlistentry><varlistentry><term>Dual&nbsp;homed&nbsp;host</term><listitem><para>A dual homed host is a node with two network (physical or virtual) interfaces on two different links, but does not forward any packets between the interfaces.</para></listitem></varlistentry><varlistentry><term>Host</term><listitem><para>Generally a single homed host on a link. Normally it has only one active network interface, e.g. Ethernet or (not and) PPP.</para></listitem></varlistentry><varlistentry><term>Interface</term><listitem><para>Mostly same as &rdquo;device&rdquo;, see also NIC</para></listitem></varlistentry><varlistentry><term>IP&nbsp;Header</term><listitem><para>Header of an IP packet (each network packet has a header, kind of is depending on network layer)</para></listitem></varlistentry><varlistentry><term>Link</term><listitem><para>A link is a layer 2 network packet transport medium, examples are Ethernet, Token Ring, PPP, SLIP, ATM, ISDN, Frame Relay,...</para></listitem></varlistentry><varlistentry><term>Node</term><listitem><para>A node is a host or a router.</para></listitem></varlistentry><varlistentry><term>Octet</term><listitem><para>A collection of 8 real bits, today also similar to &rdquo;byte&rdquo;.</para></listitem></varlistentry><varlistentry><term>Port</term><listitem><para>Information for the TCP/UDP dispatcher (layer 4) to transport information to upper layers</para></listitem></varlistentry><varlistentry><term>Protocol</term><listitem><para>Each network layer contains mostly a protocol field to make life easier on dispatching transported information to upper layer, seen in layer 2 (MAC) and 3 (IP)</para></listitem></varlistentry><varlistentry><term>Router</term><listitem><para>A router is a node with two or more network (physical or virtual) interfaces, capable of forwarding packets between the interfaces.</para></listitem></varlistentry><varlistentry><term>Socket</term><listitem><para>An IP socket is defined by source and destination IP addresses and Ports and (binding) </para></listitem></varlistentry><varlistentry><term>Stack</term><listitem><para>Network related a collection of layers</para></listitem></varlistentry><varlistentry><term>Subnetmask</term><listitem><para>IP networks uses bit masks to separate local networks from remote ones</para></listitem></varlistentry><varlistentry><term>Tunnel</term><listitem><para>A tunnel is typically a point-to-point connection over which packets are exchanged which carry the data of another protocol, e.g. an IPv6-in-IPv4 tunnel.</para></listitem></varlistentry></variablelist><sect3 id='Glossar' >
<title><!-- anchor id="Glossar" -->Shortcuts</title>
<variablelist>
<varlistentry><term>ACL</term><listitem><para>Access Control List</para></listitem></varlistentry><varlistentry><term>API</term><listitem><para>Application Programming Interface</para></listitem></varlistentry><varlistentry><term>ASIC</term><listitem><para>Application Specified Integrated Circuit</para></listitem></varlistentry><varlistentry><term>BSD</term><listitem><para>Berkeley Software Distribution</para></listitem></varlistentry><varlistentry><term>CAN-Bus</term><listitem><para>Controller Area Network Bus (physical bus system)</para></listitem></varlistentry><varlistentry><term>ISP</term><listitem><para>Internet Service Provider</para></listitem></varlistentry><varlistentry><term>KAME</term><listitem><para>Project - a joint effort of six companies in Japan to provide a free IPv6 and IPsec (for both IPv4 and IPv6) stack for BSD variants to the world <ulink url="http://www.kame.net/">www.kame.net</ulink></para></listitem></varlistentry><varlistentry><term>LIR</term><listitem><para>Local Internet Registry</para></listitem></varlistentry><varlistentry><term>NIC</term><listitem><para>Network Interface Card</para></listitem></varlistentry><varlistentry><term>RFC</term><listitem><para>Request For Comments - set of technical and organizational notes about the Internet</para></listitem></varlistentry><varlistentry><term>USAGI</term><listitem><para>UniverSAl playGround for Ipv6 Project - works to deliver the production quality IPv6 protocol stack for the Linux system.</para></listitem></varlistentry></variablelist></sect3></sect2><sect2>
<title>Document related</title>
<sect3>
<title>Long code line wrapping signal char</title>
<para>The special character &rdquo;¬&rdquo; is used for signaling that this code line is wrapped for better viewing in PDF and PS files.</para></sect3><sect3>
<title>Placeholders</title>
<para>In generic examples you will sometimes find the following:</para><screen>
<![CDATA[<myipaddress>
]]></screen><para>For real use on your system command line or in scripts this has to be replaced with relevant content (removing the &lt; and &gt; of course), the result would be e.g.</para><screen>
<![CDATA[1.2.3.4
]]></screen></sect3><sect3>
<title>Commands in the shell</title>
<para>Commands executable as non-root user begin with $, e.g.</para><screen>
<![CDATA[$ whoami
]]></screen><para>Commands executable as root user begin with #, e.g.</para><screen>
<![CDATA[# whoami
]]></screen></sect3></sect2></sect1><sect1>
<title>Requirements for using this HOWTO</title>
<sect2>
<title>Personal prerequisites</title>
<sect3>
<title>Experience with Unix tools</title>
<para>You should be familiar with the major Unix tools e.g. <emphasis>grep</emphasis>, <emphasis>awk</emphasis>, <emphasis>find</emphasis>, ... , and know about their most commonly used command-line options.</para></sect3><sect3>
<title>Experience with networking theory</title>
<para>You should know about layers, protocols, addresses, cables, plugs, etc. If you are new to this field, here is one good starting point for you: <ulink url=" https://web.archive.org/web/20121018222845/http://www.rigacci.org/docs/biblio/online/intro_to_networking/book1.htm"> https://web.archive.org/web/20121018222845/http://www.rigacci.org/docs/biblio/online/intro_to_networking/book1.htm</ulink></para></sect3><sect3>
<title>Experience with IPv4 configuration</title>
<para>You should definitely have some experience in IPv4 configuration, otherwise it will be hard for you to understand what is really going on.</para></sect3><sect3>
<title>Experience with the Domain Name System (DNS)</title>
<para>Also you should understand what the Domain Name System (DNS) is, what it provides and how to use it.</para></sect3><sect3>
<title>Experience with network debugging strategies</title>
<para>You should at least understand how to use <emphasis>tcpdump</emphasis> and what<emphasis> </emphasis>it can show you. Otherwise, network debugging will very difficult for you.</para></sect3></sect2><sect2>
<title>Linux operating system compatible hardware</title>
<para>Surely you wish to experiment with real hardware, and not only read this HOWTO to fall asleep here and there. ;-7)</para></sect2></sect1></chapter><chapter id='chapter-basics' >
<title><!-- anchor id="chapter-basics" -->Basics</title>
<sect1>
<title>What is IPv6?</title>
<para>IPv6 is a new layer 3 protocol which will supersede IPv4 (also known as IP). IPv4 was designed a long time ago (<ulink url="http://www.faqs.org/rfcs/rfc760.html">RFC 760 / Internet Protocol</ulink> from January 1980) and since its inception, there have been many requests for more addresses and enhanced capabilities. Latest RFC is <ulink url="http://www.faqs.org/rfcs/rfc2460.html">RFC 2460 / Internet Protocol Version 6 Specification</ulink>. Major changes in IPv6 are the redesign of the header, including the increase of address size from 32 bits to 128 bits. Because layer 3 is responsible for end-to-end packet transport using packet routing based on addresses, it must include the new IPv6 addresses (source and destination), like IPv4.</para>
<para>For more information about the IPv6 history take a look at older IPv6 related RFCs listed e.g. at <ulink url="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6 Pilot / References</ulink>.</para></sect1><sect1 id='basic-history-IPv6-Linux' >
<title><!-- anchor id="basic-history-IPv6-Linux" -->History of IPv6 in Linux</title>
<para>The years 1992, 1993 and 1994 of the IPv6 History (in general) are covered by the following document: <ulink url="http://www.laynetworks.com/IPv6.htm#CH3">IPv6 or IPng (IP next generation)</ulink>.</para>
<para>To-do: better time-line, more content...</para><sect2>
<title>Beginning</title>
<para>The first IPv6 related network code was added to the Linux kernel 2.1.8 in November 1996 by Pedro Roque. It was based on the BSD API:</para><screen>
<![CDATA[diff -u --recursive --new-file v2.1.7/linux/include/linux/in6.h
¬ linux/include/linux/in6.h 
--- v2.1.7/linux/include/linux/in6.h Thu Jan 1 02:00:00 1970 
+++ linux/include/linux/in6.h Sun Nov 3 11:04:42 1996 
@@ -0,0 +1,99 @@ 
+/* 
+ * Types and definitions for AF_INET6 
+ * Linux INET6 implementation 
+ * + * Authors: 
+ * Pedro Roque <******> 
+ * 
+ * Source: 
+ * IPv6 Program Interfaces for BSD Systems 
+ * <draft-ietf-ipngwg-bsd-api-05.txt>
]]></screen><para>The shown lines were copied from patch-2.1.8 (e-mail address was blanked on copy&amp;paste).</para></sect2><sect2>
<title>In between</title>
<para>Because of lack of manpower, the IPv6 implementation in the kernel was unable to follow the discussed drafts or newly released RFCs. In October 2000, a project was started in Japan, called <ulink url="http://www.linux-ipv6.org/">USAGI</ulink>, whose aim was to implement all missing, or outdated IPv6 support in Linux. It tracks the current IPv6 implementation in FreeBSD made by the <ulink url="http://www.kame.net/">KAME project</ulink>. From time to time they create snapshots against current vanilla Linux kernel sources.</para>
<para>Until kernel development series 2.5.x was started, the <ulink url="http://www.linux-ipv6.org/">USAGI</ulink> patch was so big, that Linux networking maintainers were unable to include it completly in the production source of the Linux kernel 2.4.x series.</para>
<para>During kernel development series 2.5.x, <ulink url="http://www.linux-ipv6.org/">USAGI</ulink> tried to insert all of their current extensions into this.</para></sect2><sect2>
<title>Current</title>
<para>Many of the long-term developed IPv6 related patches by <ulink url="http://www.linux-ipv6.org/">USAGI</ulink> and others are integrated into vanilla kernel series 2.6.x.</para></sect2><sect2>
<title>Future</title>
<para><ulink url="http://www.linux-ipv6.org/">USAGI</ulink> and others are still working on implementation of newer features like mobililty and others. From time to time, new extension patches are released and also integration into vanilla kernel series is made.</para></sect2></sect1><sect1>
<title>What do IPv6 addresses look like?</title>
<para>As previously mentioned, IPv6 addresses are 128 bits long. This number of bits generates very high decimal numbers with up to 39 digits: </para><screen>
<![CDATA[2^128-1: 340282366920938463463374607431768211455
]]></screen><para>Such numbers are not really addresses that can be memorized. Also the IPv6 address schema is bitwise oriented (just like IPv4, but that's not often recognized). Therefore a better notation of such big numbers is hexadecimal. In hexadecimal, 4 bits (also known as &rdquo;nibble&rdquo;) are represented by a digit or character from 0-9 and a-f (10-15). This format reduces the length of the IPv6 address to 32 characters.</para><screen>
<![CDATA[2^128-1: 0xffffffffffffffffffffffffffffffff
]]></screen><para>This representation is still not very convenient (possible mix-up or loss of single hexadecimal digits), so the designers of IPv6 chose a hexadecimal format with a colon as separator after each block of 16 bits. In addition, the leading "0x" (a signifier for hexadecimal values used in programming languages) is removed:</para><screen>
<![CDATA[2^128-1: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
]]></screen><para>A usable address (see address types later) is e.g.: </para><screen>
<![CDATA[2001:0db8:0100:f101:0210:a4ff:fee3:9566
]]></screen><para>For simplifications, leading zeros of each 16 bit block can be omitted: </para><screen>
<![CDATA[2001:0db8:0100:f101:0210:a4ff:fee3:9566  -> 
¬ 2001:db8:100:f101:210:a4ff:fee3:9566
]]></screen><para>One sequence of 16 bit blocks containing only zeroes can be replaced with &ldquo;::&ldquo;. But not more than one at a time, otherwise it is no longer a unique representation. </para><screen>
<![CDATA[2001:0db8:100:f101:0:0:0:1  ->  2001:db8:100:f101::1
]]></screen><para>The biggest reduction is seen by the IPv6 localhost address: </para><screen>
<![CDATA[0000:0000:0000:0000:0000:0000:0000:0001  ->  ::1
]]></screen><para>There is also a so-called <emphasis>compact</emphasis> (base85 coded) representation defined in <ulink url="http://www.faqs.org/rfcs/rfc1924.html">RFC 1924 / A Compact Representation of IPv6 Addresses</ulink> (published on 1. April 1996), never seen in the wild, probably an April fool's joke, but here is an example: </para><screen>
<![CDATA[# ipv6calc --addr_to_base85 2001:0db8:0100:f101:0210:a4ff:fee3:9566 
9R}vSQZ1W=9A_Q74Lz&R
]]></screen><blockquote>
<para>Info: <emphasis>ipv6calc</emphasis> is an IPv6 address format calculator and converter program and can be found here: <ulink url="http://www.deepspace6.net/projects/ipv6calc.html">ipv6calc homepage</ulink> (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/projects/ipv6calc.html">Mirror</ulink>)</para>
</blockquote></sect1><sect1>
<title>FAQ (Basics)</title>
<sect2>
<title>Why is the name IPv6 and not IPv5 as successor for IPv4?</title>
<para>On any IP header, the first 4 bits are reserved for protocol version. So theoretically a protocol number between 0 and 15 is possible:</para><itemizedlist>
<listitem><para>4: is already used for IPv4</para></listitem><listitem><para>5: is reserved for the Stream Protocol (STP, <ulink url="http://www.faqs.org/rfcs/rfc1819.html">RFC 1819 / Internet Stream Protocol Version 2</ulink>) (which never really made it to the public)</para></listitem></itemizedlist><para>The next free number was 6. Hence IPv6 was born!</para></sect2><sect2>
<title>IPv6 addresses: why such a high number of bits?</title>
<para>During the design of IPv4, people thought that 32 bits were enough for the world. Looking back into the past, 32 bits were enough until now and will perhaps be enough for another few years. However, 32 bits are not enough to provide each network device with a global address in the future. Think about mobile phones, cars (including electronic devices on its CAN-bus), toasters, refrigerators, light switches, and so on...</para>
<para>So designers have chosen 128 bits, 4 times more in length than in IPv4 today.</para>
<para>The usable size is smaller than it may appear however. This is because in the currently defined address schema, 64 bits are used for interface identifiers. The other 64 bits are used for routing. Assuming the current strict levels of aggregation (/48, /32, ...), it is still possible to &rdquo;run out&rdquo; of space, but hopefully not in the near future.</para>
<para>See also for more information <ulink url="http://www.faqs.org/rfcs/rfc1715.html">RFC 1715 / The H Ratio for Address Assignment Efficiency</ulink> and <ulink url="http://www.faqs.org/rfcs/rfc3194.html">RFC 3194 / The Host-Density Ratio for Address Assignment Efficiency</ulink>.</para></sect2><sect2>
<title>IPv6 addresses: why so small a number of bits on a new design?</title>
<para>While, there are (possibly) some people (only know about Jim Fleming...) on the Internet who are thinking about IPv8 and IPv16, their design is far away from acceptance and implementation. In the meantime 128 bits was the best choice regarding header overhead and data transport. Consider the minimum Maximum Transfer Unit (MTU) in IPv4 (576 octets) and in IPv6 (1280 octets), the header length in IPv4 is 20 octets (minimum, can increase to 60 octets with IPv4 options) and in IPv6 is 40 octets (fixed). This is 3.4 % of minimum MTU in IPv4 and 3.1 % of minimum MTU in IPv6. This means the header overhead is almost equal. More bits for addresses would require bigger headers and therefore more overhead. Also, consider the maximum MTU on normal links (like Ethernet today): it's 1500 octets (in special cases: 9k octets using Jumbo frames). Ultimately, it wouldn't be a proper design if 10 % or 20 % of transported data in a Layer-3 packet were used for addresses and not for payload.</para></sect2></sect1></chapter><chapter id='chapter-addresstypes' >
<title><!-- anchor id="chapter-addresstypes" -->Address types</title>
<para>Like IPv4, IPv6 addresses can be split into network and host parts using subnet masks.</para>
<para>IPv4 has shown that sometimes it would be nice, if more than one IP address can be assigned to an interface, each for a different purpose (aliases, multi-cast). To remain extensible in the future, IPv6 is going further and allows more than one IPv6 address to be assigned to an interface. There is currently no limit defined by an RFC, only in the implementation of the IPv6 stack (to prevent DoS attacks).</para>
<para>Using this large number of bits for addresses, IPv6 defines address types based on some leading bits, which are hopefully never going to be broken in the future (unlike IPv4 today and the history of class A, B, and C).
</para>
<para>Also the number of bits are separated into a network part (upper 64 bits) and a host part (lower 64 bits), to facilitate auto-configuration.</para><sect1>
<title>Addresses without a special prefix</title>
<sect2>
<title>Localhost address</title>
<para>This is a special address for the loopback interface, similiar to IPv4 with its &rdquo;127.0.0.1&rdquo;. With IPv6, the localhost address is:</para><screen>
<![CDATA[0000:0000:0000:0000:0000:0000:0000:0001 
]]></screen><para>or compressed:</para><screen>
<![CDATA[::1
]]></screen><para>Packets with this address as source or destination should never leave the sending host.</para></sect2><sect2>
<title>Unspecified address</title>
<para>This is a special address like &rdquo;any&rdquo; or &rdquo;0.0.0.0&rdquo; in IPv4 . For IPv6 it's:</para><screen>
<![CDATA[0000:0000:0000:0000:0000:0000:0000:0000 
]]></screen><para>or:</para><screen>
<![CDATA[::
]]></screen><para>These addresses are mostly used/seen in socket binding (to any IPv6 address) or routing tables.</para>
<para>Note: the unspecified address cannot be used as destination address.</para></sect2><sect2>
<title>IPv6 address with embedded IPv4 address</title>
<para>There are two addresses which contain an IPv4 address.</para><sect3>
<title>IPv4-mapped IPv6 address</title>
<para>IPv4-only IPv6-compatible addresses are sometimes used/shown for sockets created by an IPv6-enabled daemon, but only binding to an IPv4 address.</para>
<para>These addresses are defined with a special prefix of length 96 (a.b.c.d is the IPv4 address):</para><screen>
<![CDATA[0:0:0:0:0:ffff:a.b.c.d/96
]]></screen><para>or in compressed format</para><screen>
<![CDATA[::ffff:a.b.c.d/96
]]></screen><para>For example, the IPv4 address 1.2.3.4 looks like this:</para><screen>
<![CDATA[::ffff:1.2.3.4
]]></screen></sect3><sect3>
<title>IPv4-compatible IPv6 address</title>
<para>IPv4-compatible IPv6 addresses are used for automatic tunneling (<ulink url="http://www.faqs.org/rfcs/rfc2893.html">RFC 2893 / Transition Mechanisms for IPv6 Hosts and Routers</ulink>), which is being replaced by <link linkend="tunneling-6to4.">6to4 tunneling</link>.</para><screen>
<![CDATA[0:0:0:0:0:0:a.b.c.d/96
]]></screen><para>or in compressed format</para><screen>
<![CDATA[::a.b.c.d/96
]]></screen></sect3></sect2></sect1><sect1>
<title>Network part, also known as prefix</title>
<para>Designers defined some address types and left a lot of scope for future definitions as currently unknown requirements arise. <ulink url="http://www.faqs.org/rfcs/rfc4291.html">RFC 4291 / IP Version 6 Addressing Architecture</ulink> defines the current addressing scheme.
</para>
<para>Now lets take a look at the different types of prefixes (and therefore address types):</para><sect2>
<title>Link local address type</title>
<para>These are special addresses which will only be valid on a link of an interface. Using this address as destination the packet would never pass through a router. It's used for link communications such as:</para><itemizedlist>
<listitem><para>anyone else here on this link?</para></listitem><listitem><para>anyone here with a special address (e.g. looking for a router)?</para></listitem></itemizedlist><para>They begin with ( where <emphasis>&rdquo;x&rdquo;</emphasis> is any hex character, normally <emphasis>&rdquo;0</emphasis>&rdquo;)</para><screen>
<![CDATA[fe8x:  <- currently the only one in use
fe9x:
feax:
febx:
]]></screen><para>An address with this prefix is found on each IPv6-enabled interface after stateless auto-configuration (which is normally always the case).</para></sect2><sect2>
<title>Site local address type</title>
<para>These are addresses similar to the <ulink url="http://www.faqs.org/rfcs/rfc1918.html">RFC 1918 / Address Allocation for Private Internets</ulink> in IPv4 today, with the added advantage that everyone who use this address type has the capability to use the given 16 bits for a maximum number of 65536 subnets. Comparable with the 10.0.0.0/8 in IPv4 today.</para>
<para>Another advantage: because it's possible to assign more than one address to an interface with IPv6, you can also assign such a site local address in addition to a global one.</para>
<para>It begins with: </para><screen>
<![CDATA[fecx:  <- most commonly used
fedx:
feex:
fefx:

]]></screen><para>(where<emphasis> &rdquo;x&rdquo;</emphasis> is any hex character, normally <emphasis>&rdquo;0</emphasis>&rdquo;) </para>
<para>This address type is now deprecated <ulink url="http://www.faqs.org/rfcs/rfc3879.html">RFC 3879 / Deprecating Site Local Addresses</ulink>, but for a test in a lab, such addresses are still a good choice in my humble opinion.</para></sect2><sect2>
<title>Unique Local IPv6 Unicast Addresses</title>
<para>Because the original defined site local addresses are not unique, this can lead to major problems, if two former independend networks would be connected later (overlapping of subnets). This and other issues lead to a new address type named <ulink url="http://www.faqs.org/rfcs/rfc4193.html">RFC 4193 / Unique Local IPv6 Unicast Addresses</ulink>. 
</para>
<para>It begins with: </para><screen>
<![CDATA[fcxx:
fdxx:  <- currently the only one in use
]]></screen><para>A part of the prefix (40 bits) are generated using a pseudo-random algorithm and it's improbable, that two generated ones are equal.</para>
<para>Example for a prefix (generated using a web-based tool: <ulink url="http://www.goebel-consult.de/ipv6/createLULA">Goebel Consult / createLULA</ulink>):</para><screen>
<![CDATA[fd0f:8b72:ac90::/48
]]></screen></sect2><sect2>
<title>Global address type "(Aggregatable) global unicast"</title>
<para>Today, there is one global address type defined (the first design, called "provider based," was thrown away some years ago <ulink url="http://www.faqs.org/rfcs/rfc1884.html">RFC 1884 / IP Version 6 Addressing Architecture [obsolete]</ulink>, you will find some remains in older Linux kernel sources).</para>
<para>It begins with (<emphasis>x</emphasis> are hex characters)</para><screen>
<![CDATA[2xxx: 
3xxx:
]]></screen><para>Note: the prefix &rdquo;aggregatable&rdquo; is thrown away in current drafts.
There are some further subtypes defined, see below:</para><sect3>
<title>6bone test addresses</title>
<para>These were the first global addresses which were defined and in use. They all start with </para><screen>
<![CDATA[3ffe:
]]></screen><para>Example:</para><screen>
<![CDATA[3ffe:ffff:100:f102::1
]]></screen><para>A special 6bone test address which will never be globally unique begins with </para><screen>
<![CDATA[3ffe:ffff: 
]]></screen><para>and is mostly shown in older examples. The reason for this is, if real addresses are are shown, it's possible for someone to do a copy &amp; paste to their configuration files, thus inadvertently causing duplicates on a globally unique address. This would cause serious problems for the original host (e.g. getting answer packets for request that were never sent).
Because IPv6 is now in production, this prefix is no longer be delegated and is removed from routing after 6.6.2006 (see <ulink url="http://www.faqs.org/rfcs/rfc3701.html">RFC 3701 / 6bone Phaseout</ulink> for more).</para></sect3><sect3>
<title>6to4 addresses</title>
<para>These addresses, designed for a special tunneling mechanism [<ulink url="http://www.faqs.org/rfcs/rfc3056.html">RFC 3056 / Connection of IPv6 Domains via IPv4 Clouds</ulink> and <ulink url="http://www.faqs.org/rfcs/rfc2893.html">RFC 2893 / Transition Mechanisms for IPv6 Hosts and Routers</ulink>], encode a given IPv4 address and a possible subnet and begin with </para><screen>
<![CDATA[2002:
]]></screen><para>For example, representing 192.168.1.1/5:</para><screen>
<![CDATA[2002:c0a8:0101:5::1
]]></screen><para>A small shell command line can help you generating such address out of a given IPv4 one:</para><screen>
<![CDATA[ipv4="1.2.3.4"; sla="5"; printf "2002:%02x%02x:%02x%02x:%04x::1" `echo $ipv4
¬ | tr "." " "` $sla
]]></screen><para>See also <link linkend="tunneling-6to4.">tunneling using 6to4</link> and <link linkend="information-joinipv6-6to4-tunneling">information about 6to4 relay routers</link>.</para></sect3><sect3>
<title>Assigned by provider for hierarchical routing</title>
<para>These addresses are delegated to Internet service providers (ISP) and begin currently with</para><screen>
<![CDATA[2001:
]]></screen><para>Prefixes to major (backbone owning) ISPs (also known as LIRs) are delegated by <link linkend="information-majorregionregistries">local registries</link> and currently have a prefix with length 32 assigned.</para>
<para>Any ISP customer can get a prefix with length 48.</para></sect3><sect3>
<title>Addresses reserved for examples and documentation</title>
<para>Currently, two address ranges are reserved for examples and documentation <ulink url="http://www.faqs.org/rfcs/rfc3849.html">RFC 3849 / IPv6 Address Prefix Reserved for Documentation</ulink>:</para><screen>
<![CDATA[3fff:ffff::/32
2001:0DB8::/32   EXAMPLENET-WF
]]></screen><para>These address ranges should be filtered based on source addresses and should NOT be routed on border routers to the internet, if possible.</para></sect3></sect2><sect2>
<title>Multicast addresses</title>
<para>Multicast addresses are used for related services. </para>
<para>They alway start with (<emphasis>xx</emphasis> is the scope value)</para><screen>
<![CDATA[ffxy:
]]></screen><para>They are split into scopes and types:</para><sect3>
<title>Multicast scopes</title>
<para>Multicast scope is a parameter to specify the maximum distance a multicast packet can travel from the sending entity.</para>
<para>Currently, the following regions (scopes) are defined:</para><itemizedlist>
<listitem><para>ffx1: node-local, packets never leave the node.</para></listitem><listitem><para>ffx2: link-local, packets are never forwarded by routers, so they never leave the specified link.</para></listitem><listitem><para>ffx5: site-local, packets never leave the site.</para></listitem><listitem><para>ffx8: organization-local, packets never leave the organization (not so easy to implement, must be covered by routing protocol).</para></listitem><listitem><para>ffxe: global scope.</para></listitem><listitem><para>others are reserved</para></listitem></itemizedlist></sect3><sect3>
<title>Multicast types</title>
<para>There are many types already defined/reserved (see <ulink url="http://www.faqs.org/rfcs/rfc4291.html">RFC 4291 / IP Version 6 Addressing Architecture</ulink> for details). Some examples are:</para><itemizedlist>
<listitem><para>All Nodes Address: ID = 1h, addresses all hosts on the local node (ff01:0:0:0:0:0:0:1) or the connected link (ff02:0:0:0:0:0:0:1).</para></listitem><listitem><para>All Routers Address: ID = 2h, addresses all routers on the local node (ff01:0:0:0:0:0:0:2), on the connected link (ff02:0:0:0:0:0:0:2), or on the local site (ff05:0:0:0:0:0:0:2)</para></listitem></itemizedlist></sect3><sect3>
<title>Solicited node link-local multicast address</title>
<para>Special multicast address used as destination address in neighborhood discovery, because unlike in IPv4, ARP no longer exists in IPv6.</para>
<para>An example of this address looks like</para><screen>
<![CDATA[ff02::1:ff00:1234
]]></screen><para>Used prefix shows that this is a link-local multicast address. The suffix is generated from the destination address. In this example, a packet should be sent to address &ldquo;fe80::1234&rdquo;, but the network stack doesn't know the current layer 2 MAC address. It replaces the upper 104 bits with &ldquo;ff02:0:0:0:0:1:ff00::/104&rdquo; and leaves the lower 24 bits untouched. This address is now used `on-link' to find the corresponding node which has to send a reply containing its layer 2 MAC address.</para></sect3></sect2><sect2>
<title>Anycast addresses</title>
<para>Anycast addresses are special addresses and are used to cover things like nearest DNS server, nearest DHCP server, or similar dynamic groups. Addresses are taken out of the unicast address space (aggregatable global or site-local at the moment). The anycast mechanism (client view) will be handled by dynamic routing protocols.</para>
<para>Note: Anycast addresses cannot be used as source addresses, they are only used as destination addresses.</para><sect3>
<title>Subnet-router anycast address</title>
<para>A simple example for an anycast address is the subnet-router anycast address. Assuming that a node has the following global assigned IPv6 address:</para><screen>
<![CDATA[2001:db8:100:f101:210:a4ff:fee3:9566/64  <- Node's address
]]></screen><para>The subnet-router anycast address will be created blanking the suffix (least significant 64 bits) completely:</para><screen>
<![CDATA[2001:db8:100:f101::/64  <- subnet-router anycast address
]]></screen></sect3></sect2></sect1><sect1>
<title>Address types (host part)</title>
<para>For auto-configuration and mobility issues, it was decided to use the lower 64 bits as the host part of the address in most of the current address types. Therefore each single subnet can hold a large amount of addresses.</para>
<para>This host part can be inspected differently: </para><sect2>
<title>Automatically computed (also known as stateless)</title>
<para>With auto-configuration, the host part of the address is computed by converting the MAC address of an interface (if available), with the EUI-64 method, to a unique IPv6 address. If no MAC address is available for this device (happens e.g. on virtual devices), something else (like the IPv4 address or the MAC address of a physical interface) is used instead.</para>
<para>E.g. a NIC has following MAC address (48 bit):</para><screen>
<![CDATA[00:10:a4:01:23:45
]]></screen><para>This would be expanded according to the<ulink url="http://standards.ieee.org/regauth/oui/tutorials/EUI64.html">IEEE-Tutorial EUI-64</ulink> design for EUI-48 identifiers to the 64 bit interface identifier:</para><screen>
<![CDATA[0210:a4ff:fe01:2345
]]></screen><para>With a given prefix, the result is the IPv6 address shown in example above:</para><screen>
<![CDATA[2001:0db8:0100:f101:0210:a4ff:fe01:2345
]]></screen><sect3>
<title>Privacy problem with automatically computed addresses and a solution</title>
<para>Because the "automatically computed" host part is globally unique (except when a vendor of a NIC uses the same MAC address on more than one NIC), client tracking is possible on the host when not using a proxy of any kind.</para>
<para>This is a known problem, and a solution was defined: privacy extension, defined in <ulink url="http://www.faqs.org/rfcs/rfc3041.html">RFC 3041 / Privacy Extensions for Stateless Address Autoconfiguration in IPv6</ulink> (there is also already a newer draft available: <ulink url="http://www.ietf.org/ids.by.wg/ipv6.html">draft-ietf-ipv6-privacy-addrs-v2-*</ulink>). Using a random and a static value a new suffix is generated from time to time. Note: this is only reasonable for outgoing client connections and isn't really useful for well-known servers.</para></sect3></sect2><sect2>
<title>Manually set</title>
<para>For servers, it's probably easier to remember simpler addresses, this can also be accommodated. It is possible to assign an additional IPv6 address to an interface, e.g. </para><screen>
<![CDATA[2001:0db8:100:f101::1
]]></screen><para>For manual suffixes like &rdquo;::1&rdquo; shown in the above example, it's required that the 7th most significant bit is set to 0 (the universal/local bit of the automatically generated identifier). Also some other (otherwise unchosen ) bit combinations are reserved for anycast addresses, too.</para></sect2></sect1><sect1>
<title>Prefix lengths for routing</title>
<para>In the early design phase it was planned to use a fully hierarchical routing approach to reduce the size of the routing tables maximally. The reasons behind this approach were the number of current IPv4 routing entries in core routers (&gt; 400 thousand in 2013), reducing the need of memory in hardware routers (ASIC &rdquo;Application Specified Integrated Circuit&rdquo; driven) to hold the routing table and increase speed (fewer entries hopefully result in faster lookups).
</para>
<para>Todays view is that routing will be mostly hierarchically designed for networks with only one service provider. With more than one ISP connections, this is not possible, and subject to an issue named multi-homing (infos on multi-homing: <ulink url="http://www.ietf.org/ids.by.wg/multi6.html">drafts-ietf-multi6-*</ulink>,<ulink url="http://arneill-py.sacramento.ca.us/ipv6mh/">IPv6 Multihoming Solutions</ulink>).</para><sect2>
<title>Prefix lengths (also known as "netmasks")</title>
<para>Similar to IPv4, the routable network path for routing to take place. Because standard netmask notation for 128 bits doesn't look nice, designers employed the IPv4 Classless Inter Domain Routing (CIDR, <ulink url="http://www.faqs.org/rfcs/rfc1519.html">RFC 1519 / Classless Inter-Domain Routing</ulink>) scheme, which specifies the number of bits of the IP address to be used for routing. It is also called the "slash" notation.</para>
<para>An example: </para><screen>
<![CDATA[2001:0db8:100:1:2:3:4:5/48
]]></screen><para>This notation will be expanded:</para><itemizedlist>
<listitem><para>Network: </para></listitem></itemizedlist><screen>
<![CDATA[2001:0db8:0100:0000:0000:0000:0000:0000
]]></screen><itemizedlist>
<listitem><para>Netmask: </para></listitem></itemizedlist><screen>
<![CDATA[ffff:ffff:ffff:0000:0000:0000:0000:0000
]]></screen></sect2><sect2>
<title>Matching a route</title>
<para>Under normal circumstances (no QoS), a lookup in a routing table results in the route with the most significant number of address bits being selected. In other words, the route with the biggest prefix length matches first.</para>
<para>For example if a routing table shows following entries (list is not complete):</para><screen>
<![CDATA[2001:0db8:100::/48     ::            U  1 0 0 sit1 
2000::/3               ::192.88.99.1 UG 1 0 0 tun6to4
]]></screen><para>Shown destination addresses of IPv6 packets will be routed through shown device</para><screen>
<![CDATA[2001:0db8:100:1:2:3:4:5/48  ->  routed through device sit1
2001:0db8:200:1:2:3:4:5/48  ->  routed through device tun6to4
]]></screen></sect2></sect1></chapter><chapter id='chapter-systemcheck' >
<title><!-- anchor id="chapter-systemcheck" -->IPv6-ready system check</title>
<para>Before you can start using IPv6 on a Linux host, you have to test, whether your system is IPv6-ready. You may have to do some work to enable it first.</para><sect1 id='systemcheck-kernel' >
<title><!-- anchor id="systemcheck-kernel" -->IPv6-ready kernel</title>
<para>Modern Linux distributions already contain IPv6-ready kernels, the IPv6 capability is generally compiled as a module, but it's possible that this module is not loaded automatically on startup.</para>
<para>Note: you shouldn't anymore use kernel series 2.2.x, because it's not IPv6-up-to-date anymore. Also the IPv6 support in series 2.4.x is no longer improved according to definitions in latest RFCs. It's recommend to use series 2.6.x now.</para><sect2>
<title>Check for IPv6 support in the current running kernel</title>
<para>To check, whether your current running kernel supports IPv6, take a look into your /proc-file-system. Following entry must exists: </para><screen>
<![CDATA[/proc/net/if_inet6
]]></screen><para>A short automatical test looks like:</para><screen>
<![CDATA[# test -f /proc/net/if_inet6 && echo "Running kernel is IPv6 ready"
]]></screen><para>If this fails, it is quite likely, that the IPv6 module is not loaded.</para></sect2><sect2>
<title>Try to load IPv6 module</title>
<para>You can try to load the IPv6 module executing</para><screen>
<![CDATA[# modprobe ipv6
]]></screen><para>If this is successful, this module should be listed, testable with following auto-magically line:</para><screen>
<![CDATA[# lsmod |grep -w 'ipv6' && echo "IPv6 module successfully loaded"
]]></screen><para>And the check shown above should now run successfully.</para>
<para>Note: unloading the module is currently not supported and can result, under some circumstances, in a kernel crash.</para><sect3>
<title>Automatically loading of module</title>
<para>Its possible to automatically load the IPv6 module on demand. You only have to add following line in the configuration file of the kernel module loader (normally /etc/modules.conf or /etc/conf.modules):</para><screen>
<![CDATA[alias net-pf-10 ipv6  # automatically load IPv6 module on demand
]]></screen><para>It's also possible to disable automatically loading of the IPv6 module using following line</para><screen>
<![CDATA[alias net-pf-10 off   # disable automatically load of IPv6 module on demand
]]></screen><para>Additional note: in kernels series 2.6.x, the module loader mechanism was changed. The new configuration file has to be named /etc/modprobe.conf instead of /etc/modules.conf.</para></sect3></sect2><sect2>
<title>Compile kernel with IPv6 capabilities</title>
<para>If both above shown results were negative and your kernel has no IP6 support, than you have the following options:</para><itemizedlist>
<listitem><para>Update your distribution to a current one which supports IPv6 out-of-the-box (recommended for newbies)</para></listitem><listitem><para>Compile a new vanilla kernel (easy, if you know which options you needed)</para></listitem><listitem><para>Recompile kernel sources given by your Linux distribution (sometimes not so easy)</para></listitem><listitem><para>Compile a kernel with USAGI extensions</para></listitem></itemizedlist><para>If you decide to compile a kernel, you should have previous experience in kernel compiling and read the <ulink url="http://www.tldp.org/HOWTO/Kernel-HOWTO.html">Linux Kernel HOWTO</ulink>.</para>
<para>A comparison between vanilla and USAGI extended kernels is available on <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html">IPv6+Linux-Status-Kernel</ulink>.</para><sect3>
<title>Compiling a vanilla kernel</title>
<para>More detailed hints about compiling an IPv6-enabled kernel can be found e.g. on <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-2.html#kernel">IPv6-HOWTO-2#kernel</ulink>.</para>
<para>Note: you should use whenever possible kernel series 2.6.x or above, because the IPv6 support in series 2.4.x only will no longer get backported features from 2.6.x and IPv6 support in series 2.2.x is hopeless outdated.</para></sect3><sect3>
<title>Compiling a kernel with USAGI extensions</title>
<para>Same as for vanilla kernel, only recommend for advanced users, which are already familiar with IPv6 and kernel compilation. See also <ulink url="http://www.linux-ipv6.org/faq.html">USAGI project / FAQ</ulink> and <ulink url="http://www.deepspace6.net/docs/best_ipv6_support.html">Obtaining the best IPv6 support with Linux (Article)</ulink> (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/docs/best_ipv6_support.html">Mirror</ulink>).</para></sect3></sect2><sect2>
<title>IPv6-ready network devices</title>
<para>Not all existing network devices have already (or ever) the capability to transport IPv6 packets. A current status can be found at <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html#transport">IPv6+Linux-status-kernel.html#transport</ulink>.</para>
<para>A major issue is that because of the network layer structure of kernel implementation an IPv6 packet isn't really recognized by it's IP header number (6 instead of 4). It's recognized by the protocol number of the Layer 2 transport protocol. Therefore any transport protocol which doesn't use such protocol number cannot dispatch IPv6 packets. Note: the packet is still transported over the link, but on receivers side, the dispatching won't work (you can see this e.g. using tcpdump).</para><sect3>
<title>Currently known never &rdquo;IPv6 capable links&rdquo;</title>
<itemizedlist>
<listitem><para>Serial Line IP (SLIP, <ulink url="http://www.faqs.org/rfcs/rfc1055.html">RFC 1055 / SLIP</ulink>), should be better called now to SLIPv4, device named: slX</para></listitem><listitem><para>Parallel Line IP (PLIP), same like SLIP, device names: plipX</para></listitem><listitem><para>ISDN with encapsulation <emphasis>rawip</emphasis>, device names: isdnX</para></listitem></itemizedlist></sect3><sect3>
<title>Currently known &rdquo;not supported IPv6 capable links&rdquo;</title>
<itemizedlist>
<listitem><para>ISDN with encapsulation <emphasis>syncppp</emphasis>, device names: ipppX (design issue of the ipppd, will be merged into more general PPP layer in kernel series 2.5.x)</para></listitem></itemizedlist></sect3></sect2></sect1><sect1>
<title>IPv6-ready network configuration tools</title>
<para>You wont get very far, if you are running an IPv6-ready kernel, but have no tools to configure IPv6. There are several packages in existence which can configure IPv6.</para><sect2>
<title>net-tools package</title>
<para>The net-tool package includes some tools like ifconfig and route, which helps you to configure IPv6 on an interface. Look at the output of ifconfig -? or route -?, if something is shown like IPv6 or inet6, then the tool is IPv6-ready.</para>
<para>Auto-magically check:</para><screen>
<![CDATA[# /sbin/ifconfig -? 2>& 1|grep -qw 'inet6' && echo "utility 'ifconfig' is
¬ IPv6-ready"
]]></screen><para>Same check can be done for route:</para><screen>
<![CDATA[# /sbin/route -? 2>& 1|grep -qw 'inet6' && echo "utility 'route' is IPv6-ready"
]]></screen></sect2><sect2>
<title>iproute package</title>
<para>Alexey N. Kuznetsov (current a maintainer of the Linux networking code) created a tool-set which configures networks through the netlink device. Using this tool-set you have more functionality than net-tools provides, but its not very well documented and isn't for the faint of heart. </para><screen>
<![CDATA[# /sbin/ip 2>&1 |grep -qw 'inet6' && echo "utility 'ip' is IPv6-ready"
]]></screen><para>If the program /sbin/ip isn't found, then I strongly recommend you install the iproute package. </para><itemizedlist>
<listitem><para>You can get it from your Linux distribution (if contained)</para></listitem><listitem><para>You're able to look for a proper RPM package at <ulink url="http://rpmfind.net/linux/rpm2html/search.php?query=iproute">RPMfind/iproute</ulink> (sometimes rebuilding of a SRPMS package is recommended)</para></listitem></itemizedlist></sect2></sect1><sect1>
<title>IPv6-ready test/debug programs</title>
<para>After you have prepared your system for IPv6, you now want to use IPv6 for network communications. First you should learn how to examine IPv6 packets with a sniffer program. This is strongly recommended because for debugging/troubleshooting issues this can aide in providing a diagnosis very quickly.</para><sect2 id='program-ping6.' >
<title><!-- anchor id="program-ping6." -->IPv6 ping</title>
<para>This program is normally included in package <emphasis>iputils</emphasis>. It is designed for simple transport tests sending ICMPv6 echo-request packets and wait for ICMPv6 echo-reply packets.</para>
<para>Usage</para><screen>
<![CDATA[# ping6 <hostwithipv6address>
# ping6 <ipv6address>
# ping6 [-I <device>] <link-local-ipv6address>
]]></screen><para>Some implementation also support %&lt;device&gt; suffix instead of using -I &lt;device&gt;, e.g.</para><screen>
<![CDATA[# ping6 <link-local-ipv6address>%<device>
]]></screen><para>Example</para><screen>
<![CDATA[# ping6 -c 1 ::1 
PING ::1(::1) from ::1 : 56 data bytes 
64 bytes from ::1: icmp_seq=0 hops=64 time=292 usec

--- ::1 ping statistics --- 
1 packets transmitted, 1 packets received, 0% packet loss 
round-trip min/avg/max/mdev = 0.292/0.292/0.292/0.000 ms
]]></screen><para>Hint: ping6 needs raw access to socket and therefore root permissions. So if non-root users cannot use ping6 then there are two possible problems:</para><orderedlist>
<listitem><para>ping6 is not in users path (probably, because ping6 is generally stored in /usr/sbin -&gt; add path (not really recommended)</para></listitem><listitem><para>ping6 doesn't execute properly, generally because of missing root permissions -&gt; chmod u+s /usr/sbin/ping6</para></listitem></orderedlist><sect3>
<title>Specifying interface for IPv6 ping</title>
<para>Using link-local addresses for an IPv6 ping, the kernel does not know through which (physically or virtual) device it must send the packet - each device has a link-local address. A try will result in following error message:</para><screen>
<![CDATA[# ping6 fe80::212:34ff:fe12:3456 
connect: Invalid argument
]]></screen><para>In this case you have to specify the interface additionally like shown here:</para><screen>
<![CDATA[# ping6 -I eth0 -c 1 fe80::2e0:18ff:fe90:9205
PING fe80::212:23ff:fe12:3456(fe80::212:23ff:fe12:3456) from
¬ fe80::212:34ff:fe12:3478 eth0: 56 data bytes 
64 bytes from fe80::212:23ff:fe12:3456: icmp_seq=0 hops=64 time=445 usec

--- fe80::2e0:18ff:fe90:9205 ping statistics --- 
1 packets transmitted, 1 packets received, 0% packet loss round-trip
¬ min/avg/max/mdev = 0.445/0.445/0.445/0.000 ms
]]></screen><para>Example for %&lt;device&gt; notation:</para><screen>
<![CDATA[# ping6 -c 1 fe80::2e0:18ff:fe90:9205%eth0
]]></screen></sect3><sect3>
<title>Ping6 to multicast addresses</title>
<para>An interesting mechanism to detect IPv6-active hosts on a link is to ping6 to the link-local all-node multicast address:</para><screen>
<![CDATA[# ping6 -I eth0 ff02::1
PING ff02::1(ff02::1) from fe80:::2ab:cdff:feef:0123 eth0: 56 data bytes
64 bytes from ::1: icmp_seq=1 ttl=64 time=0.104 ms
64 bytes from fe80::212:34ff:fe12:3450: icmp_seq=1 ttl=64 time=0.549 ms (DUP!) 
]]></screen><para>Example for %&lt;device&gt; notation:</para><screen>
<![CDATA[# ping6 ff02::1%eth0
]]></screen><para>Unlike in IPv4, where replies to a ping on the broadcast address can be disabled, in IPv6 currently this behavior cannot be disable except by local IPv6 firewalling.</para></sect3></sect2><sect2 id='program-traceroute6.' >
<title><!-- anchor id="program-traceroute6." -->IPv6 traceroute6</title>
<sect3>
<title>IPv6 traceroute6 (old)</title>
<para>This older program is normally included in package <emphasis>iputils</emphasis>. It's a program similar to IPv4 traceroute. Below you will see an example:</para><screen>
<![CDATA[# traceroute6 www.6bone.net 
traceroute to 6bone.net (3ffe:b00:c18:1::10) from 2001:0db8:0000:f101::2, 30
¬ hops max, 16 byte packets 
 1 localipv6gateway (2001:0db8:0000:f101::1) 1.354 ms 1.566 ms 0.407 ms 
 2 swi6T1-T0.ipv6.switch.ch (3ffe:2000:0:400::1) 90.431 ms 91.956 ms 92.377 ms 
 3 3ffe:2000:0:1::132 (3ffe:2000:0:1::132) 118.945 ms 107.982 ms 114.557 ms 
 4 3ffe:c00:8023:2b::2 (3ffe:c00:8023:2b::2) 968.468 ms 993.392 ms 973.441 ms 
 5 3ffe:2e00:e:c::3 (3ffe:2e00:e:c::3) 507.784 ms 505.549 ms 508.928 ms 
 6 www.6bone.net (3ffe:b00:c18:1::10) 1265.85 ms * 1304.74 ms
]]></screen><para>Note: unlike some modern versions of IPv4 traceroute, which can use ICMPv4 echo-request packets as well as UDP packets (default), current IPv6-traceroute is only able to send UDP packets. As you perhaps already know, ICMP echo-request packets are more accepted by firewalls or ACLs on routers inbetween than UDP packets. </para>
<para>If a dedicated interface must be specified, this can be done by -i &lt;device&gt; or using &lt;address&gt;%&lt;device&gt;.</para></sect3><sect3>
<title>traceroute since version 2</title>
<para>traceroute got native IPv6 support with version 2 and support all features as for IPv4. Below you will see an example for an ICMP (ping) traceroute (root permissions required) </para><screen>
<![CDATA[# traceroute -I -n ipv6.google.com
traceroute to ipv6.google.com (2a00:1450:4016:804::200e), 30 hops max, 80 byte packets
 1  2001:a61:***  0.410 ms  0.510 ms  0.655 ms
 2  2001:a60::89:705:1  26.428 ms  34.361 ms  41.777 ms
 3  2001:a60::89:0:1:2  19.131 ms  19.163 ms  19.248 ms
 4  2001:a60:0:106::2  20.464 ms  20.467 ms  20.457 ms
 5  2001:4860::9:4000:cf86  21.836 ms *  21.852 ms
 6  2001:4860:0:1::19  21.690 ms  21.585 ms  22.919 ms
 7  2a00:1450:4016:804::200e  23.176 ms  19.310 ms  20.065 ms
]]></screen><para>If a dedicated interface must be specified, this can be done by -i &lt;device&gt;.</para></sect3></sect2><sect2 id='program-tracepath6.' >
<title><!-- anchor id="program-tracepath6." -->IPv6 tracepath6</title>
<para>This program is normally included in package <emphasis>iputils</emphasis>. It's a program like traceroute6 and traces the path to a given destination discovering the MTU along this path. Below you will see an example:</para><screen>
<![CDATA[# tracepath6 www.6bone.net 
 1?: [LOCALHOST] pmtu 1480 
 1: 3ffe:401::2c0:33ff:fe02:14 150.705ms 
 2: 3ffe:b00:c18::5 267.864ms 
 3: 3ffe:b00:c18::5 asymm 2 266.145ms pmtu 1280 
 3: 3ffe:3900:5::2 asymm 4 346.632ms 
 4: 3ffe:28ff:ffff:4::3 asymm 5 365.965ms 
 5: 3ffe:1cff:0:ee::2 asymm 4 534.704ms 
 6: 3ffe:3800::1:1 asymm 4 578.126ms !N 
Resume: pmtu 1280
]]></screen></sect2><sect2 id='program-tcpdump' >
<title><!-- anchor id="program-tcpdump" -->IPv6 tcpdump</title>
<para>On Linux, tcpdump is the major tool for packet capturing. Below you find some examples. IPv6 support is normally built-in in current releases of version 3.6.</para>
<para>tcpdump uses expressions for filtering packets to minimize the noise:</para><itemizedlist>
<listitem><para>icmp6: filters native ICMPv6 traffic</para></listitem><listitem><para>ip6: filters native IPv6 traffic (including ICMPv6)</para></listitem><listitem><para>proto ipv6: filters tunneled IPv6-in-IPv4 traffic</para></listitem><listitem><para>not port ssh: to suppress displaying SSH packets for running tcpdump in a remote SSH session</para></listitem></itemizedlist><para>Also some command line options are very useful to catch and print more information in a packet, mostly interesting for digging into ICMPv6 packets:</para><itemizedlist>
<listitem><para>&ldquo;-s 512&rdquo;: increase the snap length during capturing of a packet to 512 bytes</para></listitem><listitem><para>&ldquo;-vv&rdquo;: really verbose output</para></listitem><listitem><para>&ldquo;-n&rdquo;: don't resolve addresses to names, useful if reverse DNS resolving isn't working proper</para></listitem></itemizedlist><sect3>
<title>IPv6 ping to 2001:0db8:100:f101::1 native over a local link</title>
<screen>
<![CDATA[# tcpdump -t -n -i eth0 -s 512 -vv ip6 or proto ipv6 
tcpdump: listening on eth0 
2001:0db8:100:f101:2e0:18ff:fe90:9205 > 2001:0db8:100:f101::1: icmp6: echo
¬ request (len 64, hlim 64) 
2001:0db8:100:f101::1 > 2001:0db8:100:f101:2e0:18ff:fe90:9205: icmp6: echo
¬ reply (len 64, hlim 64)
]]></screen></sect3><sect3>
<title>IPv6 ping to 2001:0db8:100::1 routed through an IPv6-in-IPv4-tunnel</title>
<para>1.2.3.4 and 5.6.7.8 are tunnel endpoints (all addresses are examples)</para><screen>
<![CDATA[# tcpdump -t -n -i ppp0 -s 512 -vv ip6 or proto ipv6 
tcpdump: listening on ppp0 
1.2.3.4 > 5.6.7.8: 2002:ffff:f5f8::1 > 2001:0db8:100::1: icmp6: echo request
¬ (len 64, hlim 64) (DF) (ttl 64, id 0, len 124) 
5.6.7.8 > 1.2.3.4: 2001:0db8:100::1 > 2002:ffff:f5f8::1: icmp6: echo reply (len
¬ 64, hlim 61) (ttl 23, id 29887, len 124) 
1.2.3.4 > 5.6.7.8: 2002:ffff:f5f8::1 > 2001:0db8:100::1: icmp6: echo request
¬ (len 64, hlim 64) (DF) (ttl 64, id 0, len 124) 
5.6.7.8 > 1.2.3.4: 2001:0db8:100::1 > 2002:ffff:f5f8::1: icmp6: echo reply (len
¬ 64, hlim 61) (ttl 23, id 29919, len 124)
]]></screen></sect3></sect2></sect1><sect1>
<title>IPv6-ready programs</title>
<para>Current distributions already contain the most needed IPv6 enabled client and servers. See first on <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html">IPv6+Linux-Status-Distribution</ulink>. If still not included, you can check <ulink url="http://www.deepspace6.net/docs/ipv6_status_page_apps.html">Current Status of IPv6 Support for Networking Applications</ulink> whether the program is already ported to IPv6 and usable with Linux. For common used programs there are some hints available here later in this document.</para></sect1><sect1>
<title>IPv6-ready client programs (selection)</title>
<para>To run the following shown tests, it's required that your system is IPv6 enabled, and some examples show addresses which only can be reached if a connection to the global IPv6 network is available.</para>
<para>Note: if using names instead of dedicated IPv4/IPv6 addresses which resolves to IPv4 and IPv6 addresses, some command line clients support explicitly use of specified protocol. Usually such clients have option &rdquo;-4&rdquo; for IPv4 and &rdquo;-6&rdquo; for IPv6.</para><sect2>
<title>Checking DNS for resolving IPv6 addresses</title>
<para>Because of security updates in the last years every Domain Name System (DNS) server should run newer software which already understands the (intermediate) IPv6 address-type AAAA (the newer one named A6 isn't still common at the moment because only supported using BIND9 and newer and also the non-existent support of root domain IP6.ARPA). A simple test whether the used system can resolve IPv6 addresses is</para><screen>
<![CDATA[# host -t AAAA www.join.uni-muenster.de
]]></screen><para>and should show something like following:</para><screen>
<![CDATA[www.join.uni-muenster.de. is an alias for tolot.join.uni-muenster.de. 
tolot.join.uni-muenster.de. has AAAA address
¬ 2001:638:500:101:2e0:81ff:fe24:37c6
]]></screen></sect2><sect2>
<title>IPv6-ready telnet clients</title>
<para>IPv6-ready telnet clients are available. A simple test can be done with</para><screen>
<![CDATA[$ telnet 3ffe:400:100::1 80
Trying 3ffe:400:100::1... 
Connected to 3ffe:400:100::1. 
Escape character is '^]'. 
HEAD / HTTP/1.0

HTTP/1.1 200 OK 
Date: Sun, 16 Dec 2001 16:07:21 
GMT Server: Apache/2.0.28 (Unix) 
Last-Modified: Wed, 01 Aug 2001 21:34:42 GMT 
ETag: "3f02-a4d-b1b3e080" 
Accept-Ranges: bytes 
Content-Length: 2637 
Connection: close 
Content-Type: text/html; charset=ISO-8859-1

Connection closed by foreign host.
]]></screen><para>If the telnet client don't understand the IPv6 address and says something like &rdquo;cannot resolve hostname&rdquo;, then it's not IPv6-enabled.</para></sect2><sect2>
<title>IPv6-ready ssh clients</title>
<sect3>
<title>openssh</title>
<para>Current versions of openssh are IPv6-ready. Depending on configuring before compiling it has two behavior.</para><itemizedlist>
<listitem><para>--without-ipv4-default: the client tries an IPv6 connect first automatically and fall back to IPv4 if not working</para></listitem><listitem><para>--with-ipv4-default: default connection is IPv4, IPv6 connection must be force like following example shows</para></listitem></itemizedlist><screen>
<![CDATA[$ ssh -6 ::1 
user@::1's password: ****** 
[user@ipv6host user]$
]]></screen><para>If your ssh client doesn't understand the option &rdquo;-6&rdquo; then it's not IPv6-enabled, like most ssh version 1 packages.</para></sect3><sect3>
<title>ssh.com</title>
<para>SSH.com's SSH client and server is also IPv6 aware now and is free for all Linux and FreeBSD machine regardless if used for personal or commercial use.</para></sect3></sect2><sect2>
<title>IPv6-ready web browsers</title>
<para>A current status of IPv6 enabled web browsers is available at <ulink url="http://www.deepspace6.net/docs/ipv6_status_page_apps.html#http">Current Status of IPv6 Support for Networking Applications - HTTP</ulink>.</para>
<para>Most of them have unresolved problems at the moment</para><orderedlist>
<listitem><para>If using an IPv4 only proxy in the settings, IPv6 requests will be sent to the proxy, but the proxy will fail to understand the request and the request fails. Solution: update proxy software (see later).</para></listitem><listitem><para>Automatic proxy settings (*.pac) cannot be extended to handle IPv6 requests differently (e.g. don't use proxy) because of their nature (written in Java-script and well hard coded in source like to be seen in Mozilla source code).</para></listitem></orderedlist><para>Also older versions don't understand an URL with IPv6 encoded addresses like <ulink url="http://[2a01:238:4281:8600:812a:5915:8d24:58f3]/">http://[2a01:238:4281:8600:812a:5915:8d24:58f3]/</ulink>, IPv6 address of <ulink url="http://www.ipv6.bieringer.de/">http://www.ipv6.bieringer.de/</ulink> (this given URLs only works with an IPv6-enabled browser!).</para>
<para>A short test is to try shown URL with a given browser and using no proxy.</para><sect3>
<title>URLs for testing</title>
<para>A good starting point for browsing using IPv6 is <ulink url="http://www.kame.net/">http://www.kame.net/</ulink>. If the turtle on this page is animated, the connection is via IPv6, otherwise the turtle is static.</para>
<para>Other test servers are e.g.</para><itemizedlist>
<listitem><para><ulink url="http://ip.bieringer.de/">ip.bieringer.de</ulink></para></listitem><listitem><para><ulink url="http://ipv6-test.com/">IPv6 Test</ulink></para></listitem><listitem><para><ulink url="http://test-ipv6.com/">test-ipv6.com</ulink></para></listitem></itemizedlist></sect3></sect2></sect1><sect1>
<title>IPv6-ready server programs</title>
<para>In this part of this HOWTO, more client specific issues are mentioned. Therefore hints for IPv6-ready servers like sshd, httpd, telnetd, etc. are shown below in <link linkend="chapter-hints-daemons">Hints for IPv6-enabled daemons</link>.</para></sect1><sect1 id='faq-ipv6-ready-system-check' >
<title><!-- anchor id="faq-ipv6-ready-system-check" -->FAQ (IPv6-ready system check)</title>
<sect2>
<title>Using tools</title>
<sect3>
<title>Q: Cannot ping6 to link-local addresses</title>
<para>Error message: "<emphasis>connect: Invalid argument</emphasis>"</para>
<para>Kernel doesn't know, which physical or virtual link you want to use to send such ICMPv6 packets. Therefore it displays this error message.</para>
<para>Solution: Specify interface like: &rdquo;ping6 -I eth0 fe80::2e0:18ff:fe90:9205&rdquo;, see also <link linkend="program-ping6.">program ping6 usage</link>.</para></sect3><sect3>
<title>Q: Cannot ping6 or traceroute6 as normal user</title>
<para>Error message: &rdquo;<emphasis>icmp socket: Operation not permitted</emphasis>&rdquo;</para>
<para>These utilities create special ICMPv6 packets and send them out. This is done by using raw sockets in the kernel. But raw sockets can only be used by the &rdquo;root&rdquo; user. Therefore normal users get such error message.</para>
<para>Solution: If it's really needed that all users should be able to use these utilities, you can add the &rdquo;suid&rdquo; bit using &rdquo;chmod u+s /path/to/program&rdquo;, see also <link linkend="program-ping6.">program ping6 usage</link>. If not all users should be able to, you can change the group of the program to e.g. &rdquo;wheel&rdquo;, add these power users to this group and remove the execution bit for other users using &rdquo;chmod o-rwx /path/to/program&rdquo;. Or configure &rdquo;sudo&rdquo; to enable your security policy. </para></sect3></sect2></sect1></chapter><chapter id='chapter-configuration-interface' >
<title><!-- anchor id="chapter-configuration-interface" -->Configuring interfaces</title>
<sect1>
<title>Different network devices</title>
<para>On a node, there exist different network devices. They can be collected in classes</para><itemizedlist>
<listitem><para>Physically bounded, like eth0, tr0</para></listitem><listitem><para>Virtually existing, like ppp0, tun0, tap0, sit0, isdn0, ippp0</para></listitem></itemizedlist><sect2>
<title>Physically bounded</title>
<para>Physically bounded interfaces like Ethernet or Token-Ring are normal ones and need no special treatment.</para></sect2><sect2>
<title>Virtually bounded</title>
<para>Virtually bounded interfaces always need special support</para><sect3>
<title>IPv6-in-IPv4 tunnel interfaces</title>
<para>These interfaces are normally named sit<emphasis>x</emphasis>. The name <emphasis>sit</emphasis> is a shortcut for Simple Internet Transition. This device has the capability to encapsulate IPv6 packets into IPv4 ones and tunnel them to a foreign endpoint.</para>
<para>sit0 has a special meaning and cannot be used for dedicated tunnels.</para></sect3><sect3>
<title>PPP interfaces</title>
<para>PPP interfaces get their IPv6 capability from an IPv6 enabled PPP daemon.</para></sect3><sect3>
<title>ISDN HDLC interfaces</title>
<para>IPv6 capability for HDLC with encapsulation ip is already built-in in the kernel</para></sect3><sect3>
<title>ISDN PPP interfaces </title>
<para>ISDN PPP interfaces (ippp) aren't IPv6 enabled by kernel. Also there are also no plans to do that because in kernel 2.5.+ they will be replaced by a more generic ppp interface layer.</para></sect3><sect3>
<title>SLIP + PLIP</title>
<para>Like mentioned earlier, this interfaces don't support IPv6 transport (sending is OK, but dispatching on receiving don't work).</para></sect3><sect3>
<title>Ether-tap device</title>
<para>Ether-tap devices are IPv6-enabled and also stateless configured. For use, the module &rdquo;ethertap&rdquo; has to be loaded before.</para></sect3><sect3>
<title>tun devices</title>
<para>Currently not tested by me.</para></sect3><sect3>
<title>ATM</title>
<para>01/2002: Aren't currently supported by vanilla kernel, supported by USAGI extension</para></sect3><sect3>
<title>Others</title>
<para>Did I forget an interface?...</para></sect3></sect2></sect1><sect1>
<title>Bringing interfaces up/down</title>
<para>Two methods can be used to bring interfaces up or down.</para><sect2>
<title>Using "ip"</title>
<para>Usage: </para><screen>
<![CDATA[# ip link set dev <interface> up
# ip link set dev <interface> down
]]></screen><para>Example:</para><screen>
<![CDATA[
# ip link set dev eth0 up
# ip link set dev eth0 down
]]></screen></sect2><sect2>
<title>Using "ifconfig"</title>
<para>Usage: </para><screen>
<![CDATA[# /sbin/ifconfig <interface> up
# /sbin/ifconfig <interface> down
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ifconfig eth0 up
# /sbin/ifconfig eth0 down
]]></screen></sect2></sect1></chapter><chapter id='chapter-configuration-address' >
<title><!-- anchor id="chapter-configuration-address" -->Configuring IPv6 addresses</title>
<para>There are different ways to configure an IPv6 address on an interface. You can use use "ifconfig" or "ip".</para><sect1>
<title>Displaying existing IPv6 addresses</title>
<para>First you should check, whether and which IPv6 addresses are already configured (perhaps auto-magically during stateless auto-configuration).</para>
<para>Just note that addresses beginning with &rdquo;fec0&rdquo; are deprecated, but shown here for completness!</para><sect2>
<title>Using "ip"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 addr show dev <interface>
]]></screen><para>Example for a static configured host:</para><screen>
<![CDATA[# /sbin/ip -6 addr show dev eth0
2: eth0: <BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_ fast qlen 100
inet6 fe80::210:a4ff:fee3:9566/10 scope link
inet6 2001:0db8:0:f101::1/64 scope global
inet6 fec0:0:0:f101::1/64 scope site 
]]></screen><para>Example for a host which is auto-configured</para>
<para>Here you see some auto-magically configured IPv6 addresses and their lifetime.</para><screen>
<![CDATA[# /sbin/ip -6 addr show dev eth0 
3: eth0: <BROADCAST,MULTICAST,PROMISC,UP&gt; mtu 1500 qdisc pfifo_fast qlen
¬ 100 
inet6 2002:d950:f5f8:f101:2e0:18ff:fe90:9205/64 scope global dynamic 
valid_lft 16sec preferred_lft 6sec 
inet6 3ffe:400:100:f101:2e0:18ff:fe90:9205/64 scope global dynamic 
valid_lft 2591997sec preferred_lft 604797sec inet6 fe80::2e0:18ff:fe90:9205/10
¬ scope link
]]></screen></sect2><sect2>
<title>Using "ifconfig"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ifconfig <interface>
]]></screen><para>Example (output filtered with grep to display only IPv6 addresses). Here you see different IPv6 addresses with different scopes.</para><screen>
<![CDATA[# /sbin/ifconfig eth0 |grep "inet6 addr:"
inet6 addr: fe80::210:a4ff:fee3:9566/10 Scope:Link
inet6 addr: 2001:0db8:0:f101::1/64 Scope:Global
inet6 addr: fec0:0:0:f101::1/64 Scope:Site
]]></screen></sect2></sect1><sect1>
<title>Add an IPv6 address</title>
<para>Adding an IPv6 address is similar to the mechanism of "IP ALIAS" addresses in Linux IPv4 addressed interfaces.</para><sect2>
<title>Using "ip"</title>
<para>Usage: </para><screen>
<![CDATA[# /sbin/ip -6 addr add <ipv6address>/<prefixlength> dev <interface> 
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 addr add 2001:0db8:0:f101::1/64 dev eth0 
]]></screen></sect2><sect2>
<title>Using "ifconfig"</title>
<para>Usage: </para><screen>
<![CDATA[# /sbin/ifconfig <interface> inet6 add <ipv6address>/<prefixlength>
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ifconfig eth0 inet6 add 2001:0db8:0:f101::1/64 
]]></screen></sect2></sect1><sect1>
<title>Removing an IPv6 address</title>
<para>Not so often needed, be carefully with removing non existent IPv6 address, sometimes using older kernels it results in a crash.</para><sect2>
<title>Using "ip"</title>
<para>Usage: </para><screen>
<![CDATA[# /sbin/ip -6 addr del <ipv6address>/<prefixlength> dev <interface> 
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 addr del 2001:0db8:0:f101::1/64 dev eth0 
]]></screen></sect2><sect2>
<title>Using "ifconfig"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ifconfig <interface> inet6 del <ipv6address>/<prefixlength>
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ifconfig eth0 inet6 del 2001:0db8:0:f101::1/64
]]></screen></sect2></sect1><sect1>
<title>Automatic IPv6 Address Configuration</title>
<para>In case, a Router Advertisement is received by a client, and IPv6 autoconfiguration is enabled (default on non-router), the client configures itself an IPv6 address according to the prefix contained in the advertisement (see also <xref linkend="hints-daemons-radvd">).</para></sect1><sect1>
<title>Enable Privacy Extension</title>
<para>Privacy Extension as described in <ulink url="http://www.faqs.org/rfcs/rfc4941.html">RFC 4941 / Privacy Extensions for Stateless Address Autoconfiguration in IPv6</ulink> (obsoleted <ulink url="http://www.faqs.org/rfcs/rfc3041.html">RFC 3041</ulink>) is replacing the static interface ID (mostly based on word-wide unique MAC address) used during autoconfiguration by a pseudo-random one and generating from time to time a new one deprecating the old one.</para><sect2>
<title>Enable Privacy Extension using sysctl</title>
<bridgehead renderas="sect2">Temporary activation</bridgehead>
<para>Enable privacy extension for e.g. interface &rdquo;eth0&rdquo; and prefer the generated address:</para><screen>
<![CDATA[# sysctl -w net.ipv6.conf.eth0.use_tempaddr=2
]]></screen><para>Afterwards, restart of the interface is necessary</para><screen>
<![CDATA[# ip link set dev eth0 down
# ip link set dev eth0 up
]]></screen><para>Once a router advertisement is received, the result should look like following</para><screen>
<![CDATA[# ip -6 addr show dev eth0
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qlen 1000
    inet6 2001:db8:0:1:8992:3c03:d6e2:ed72/64 scope global secondary dynamic   <- pseudo-random IID
       valid_lft 604711sec preferred_lft 86311sec
    inet6 2001:db8:0:1::224:21ff:fe01:2345/64 scope global     <- IID based on MAC
       valid_lft 604711sec preferred_lft 86311sec
    ...
]]></screen><bridgehead renderas="sect2">Permanent activation</bridgehead>
<para>For permanent activation, either a special initscript value per interface will enable privacy or an entry in the /etc/sysctl.conf file like</para><screen>
<![CDATA[net.ipv6.conf.eth0.use_tempaddr=2
]]></screen><para>Note: interface must already exists with proper name when sysctl.conf is applied. If this is not the case (e.g. after reboot) one has to configure privacy for all interfaces by default:</para><screen>
<![CDATA[net.ipv6.conf.all.use_tempaddr=2
net.ipv6.conf.default.use_tempaddr=2
]]></screen><para>Changed/added values in /etc/sysctl.conf can be activated during runtime, but at least an interface down/up or a reboot is recommended.</para><screen>
<![CDATA[# sysctl -p
]]></screen></sect2><sect2>
<title>Enable Privacy Extension using NetworkManager</title>
<para>Modern (client) systems are using NetworkManager for configuring interfaces. A command line tool is built-in which can be used to change settings which are not available via GUI.</para>
<para>Examples based on version 0.9.9.1-5.git20140319.fc21</para>
<para>Check existing interfaces with:</para><screen>
<![CDATA[# nmcli connection 
NAME UUID TYPE DEVICE
ens4v1 d0fc2b2e-5fa0-4675-96b5-b723ca5c46db 802-3-ethernet ens4v1 
]]></screen><para>Current amount of IPv6 privacy extension addresses can be checked with</para><screen>
<![CDATA[# ip -o addr show dev ens4v1 | grep temporary | wc -l
0
]]></screen><para>Current IPv6 privacy extension settings can be checked with</para><screen>
<![CDATA[# nmcli connection show ens4v1 |grep ip6-privacy
ipv6.ip6-privacy: -1 (unknown)
]]></screen><para>Enable IPv6 privacy extension and restart interface</para><screen>
<![CDATA[# nmcli connection modify ens4v1 ipv6.ip6-privacy 2
# nmcli connection down ens4v1; nmcli connection up ens4v1
]]></screen><para>New IPv6 privacy extension settings can be checked with</para><screen>
<![CDATA[# nmcli connection show ens4v1 |grep ip6-privacy
ipv6.ip6-privacy: 2 (active, prefer temporary IP)
]]></screen><para>Now IPv6 privacy extension addresses are configured on the interface</para><screen>
<![CDATA[# ip -o addr show dev ens4v1 | grep temporary | wc -l
2
]]></screen></sect2><sect2>
<title>Test real use of Privacy Extension IPv6 Addresses</title>
<para>Whether the IPv6 address with an Interface ID generated by Privacy Extension is really used for outgoing connections, one can browse to <ulink url="http://ip.bieringer.de/">http://ip.bieringer.de/</ulink>, in case EUI64_SCOPE shows &rdquo;iid-privacy&rdquo;, then everything is working fine.</para></sect2></sect1></chapter><chapter id='chapter-configuration-route' >
<title><!-- anchor id="chapter-configuration-route" -->Configuring normal IPv6 routes</title>
<para>If you want to leave your link and want to send packets in the world wide IPv6-Internet, you need routing. If there is already an IPv6 enabled router on your link, it's possible enough to add IPv6 routes.</para>
<para>Just note that addresses beginning with &rdquo;fec0&rdquo; are deprecated, but shown here for completness!</para><sect1>
<title>Displaying existing IPv6 routes</title>
<para>First you should check, whether and which IPv6 addresses are already configured (perhaps auto-magically during auto-configuration).</para><sect2>
<title>Using "ip"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 route show [dev <device>]
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 route show dev eth0
2001:0db8:0:f101::/64 proto kernel metric 256 mtu 1500 advmss 1440
fe80::/10             proto kernel metric 256 mtu 1500 advmss 1440
ff00::/8              proto kernel metric 256 mtu 1500 advmss 1440
default               proto kernel metric 256 mtu 1500 advmss 1440
]]></screen></sect2><sect2>
<title>Using "route"</title>
<para>Usage: </para><screen>
<![CDATA[# /sbin/route -A inet6 
]]></screen><para>Example (output is filtered for interface eth0). Here you see different IPv6 routes for different addresses on a single interface.</para><screen>
<![CDATA[# /sbin/route -A inet6 |grep -w "eth0"
2001:0db8:0:f101 ::/64 :: UA  256 0 0 eth0 <- Interface route for global
¬ address
fe80::/10        ::       UA  256 0 0 eth0 <- Interface route for link-local
¬ address
ff00::/8         ::       UA  256 0 0 eth0 <- Interface route for all multicast
¬ addresses
::/0             ::       UDA 256 0 0 eth0 <- Automatic default route
]]></screen></sect2></sect1><sect1>
<title>Add an IPv6 route through a gateway</title>
<para>Mostly needed to reach the outside with IPv6 using an IPv6-enabled router on your link.</para><sect2>
<title>Using "ip"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 route add <ipv6network>/<prefixlength> via <ipv6address>
¬ [dev <device>]
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 route add default via 2001:0db8:0:f101::1
]]></screen></sect2><sect2>
<title>Using "route"</title>
<para>Usage: </para><screen>
<![CDATA[# /sbin/route -A inet6 add <ipv6network>/<prefixlength> gw
¬ <ipv6address> [dev <device>] 
]]></screen><para>A device can be needed, too, if the IPv6 address of the gateway is a link local one.</para>
<para>Following shown example adds a default route through gateway 2001:0db8:0:f101::1</para><screen>
<![CDATA[# /sbin/route -A inet6 add default gw 2001:0db8:0:f101::1
]]></screen></sect2></sect1><sect1>
<title>Removing an IPv6 route through a gateway</title>
<para>Not so often needed manually, mostly done by network configure scripts on shutdown (full or per interface)</para><sect2>
<title>Using "ip"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 route del <ipv6network>/<prefixlength> via <ipv6address>
¬ [dev <device>]
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 route del default via 2001:0db8:0:f101::1
]]></screen></sect2><sect2>
<title>Using "route"</title>
<para>Usage: </para><screen>
<![CDATA[# /sbin/route -A inet6 del <network>/<prefixlength> gw <ipv6address> [dev
¬ <device>]
]]></screen><para>Example for removing upper added route again:</para><screen>
<![CDATA[# /sbin/route -A inet6 del default gw 2001:0db8:0:f101::1
]]></screen></sect2></sect1><sect1>
<title>Add an IPv6 route through an interface</title>
<para>Not often needed, sometimes in cases of dedicated point-to-point links.</para><sect2>
<title>Using "ip"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 route add <ipv6network>/<prefixlength> dev <device>
¬ metric 1
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 route add default dev eth0 metric 1
]]></screen><para>Metric &rdquo;1&rdquo; is used here to be compatible with the metric used by route, because the default metric on using &rdquo;ip&rdquo; is &rdquo;1024&rdquo;.</para></sect2><sect2>
<title>Using "route"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/route -A inet6 add <ipv6network>/<prefixlength> dev <device>
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/route -A inet6 add default dev eth0 
]]></screen></sect2></sect1><sect1>
<title>Removing an IPv6 route through an interface</title>
<para>Not so often needed to use by hand, configuration scripts will use such on shutdown.</para><sect2>
<title>Using "ip"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 route del <ipv6network>/<prefixlength> dev <device>
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 route del default dev eth0 
]]></screen></sect2><sect2>
<title>Using "route"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/route -A inet6 del <network>/<prefixlength> dev <device>
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/route -A inet6 del default dev eth0
]]></screen></sect2></sect1><sect1>
<title>FAQ for IPv6 routes</title>
<sect2>
<title>Support of an IPv6 default route</title>
<para>One idea of IPv6 was a hierachical routing, therefore only less routing entries are needed in routers.</para>
<para>There are some issues in current Linux kernels:</para><sect3>
<title>Clients (not routing any packet!)</title>
<para>Client can setup a default route like prefix &rdquo;::/0&rdquo;, they also learn such route on autoconfiguration e.g. using radvd on the link like following example shows:</para><screen>
<![CDATA[# ip -6 route show | grep ^default
default via fe80::212:34ff:fe12:3450 dev eth0 proto kernel metric 1024 expires
¬ 29sec mtu 1500 advmss 1440
]]></screen></sect3><sect3>
<title>Routers in case of packet forwarding</title>
<para>Older Linux kernel (at least &lt;= 2.4.17) don't support default routes. You can set them up, but the route lookup fails when a packet should be forwarded (normal intention of a router). If you're still using such older kernel, &rdquo;default routing&rdquo; can be setup using the currently used global address prefix &rdquo;2000::/3&rdquo;.</para>
<para>Note: take care about default routing without address filtering on edge routers. Otherwise unwanted multicast or site-local traffic can leave the edge.</para></sect3></sect2></sect1></chapter><chapter id='chapter-Neighbor-Discovery' >
<title><!-- anchor id="chapter-Neighbor-Discovery" -->Neighbor Discovery</title>
<para>Neighbor discovery was the IPv6 successor for the ARP (Address Resolution Protocol) in IPv4. You can retrieve information about the current neighbors, in addition you can set and delete entries. The kernel keeps tracking of successful neighbor detection (like ARP in IPv4). You can dig into the learnt table using &rdquo;ip&rdquo;.</para><sect1>
<title>Displaying neighbors using &rdquo;ip&rdquo;</title>
<para>With following command you can display the learnt or configured IPv6 neighbors</para><screen>
<![CDATA[# ip -6 neigh show [dev <device>]
]]></screen><para>The following example shows one neighbor, which is a reachable router</para><screen>
<![CDATA[# ip -6 neigh show
fe80::201:23ff:fe45:6789 dev eth0 lladdr 00:01:23:45:67:89 router nud reachable
]]></screen></sect1><sect1>
<title>Manipulating neighbors table using &rdquo;ip&rdquo;</title>
<sect2>
<title>Manually add an entry</title>
<para>With following command you are able to manually add an entry</para><screen>
<![CDATA[# ip -6 neigh add <IPv6 address> lladdr <link-layer address> dev <device>
]]></screen><para>Example:</para><screen>
<![CDATA[# ip -6 neigh add fec0::1 lladdr 02:01:02:03:04:05 dev eth0
]]></screen></sect2><sect2>
<title>Manually delete an entry</title>
<para>Like adding also an entry can be deleted:</para><screen>
<![CDATA[# ip -6 neigh del <IPv6 address> lladdr <link-layer address> dev <device>
]]></screen><para>Example:</para><screen>
<![CDATA[# ip -6 neigh del fec0::1 lladdr 02:01:02:03:04:05 dev eth0
]]></screen></sect2><sect2>
<title>More advanced settings</title>
<para>The tool &rdquo;ip&rdquo; is less documentated, but very strong. See online &rdquo;help&rdquo; for more:</para><screen>
<![CDATA[# ip -6 neigh help
Usage: ip neigh { add | del | change | replace } { ADDR [ lladdr LLADDR ] 
          [ nud { permanent | noarp | stale | reachable } ] 
          | proxy ADDR } [ dev DEV ] 
       ip neigh {show|flush} [ to PREFIX ] [ dev DEV ] [ nud STATE ]
]]></screen><para>Looks like some options are only for IPv4...if you can contribute information about flags and advanced usage, pls. send.</para></sect2></sect1></chapter><chapter id='chapter-configuring-ipv6-in-ipv4-tunnels' >
<title><!-- anchor id="chapter-configuring-ipv6-in-ipv4-tunnels" -->Configuring IPv6-in-IPv4 tunnels</title>
<para>If you want to leave your link and you have no IPv6 capable network around you, you need IPv6-in-IPv4 tunneling to reach the world wide IPv6-Internet.</para>
<para>There are some kind of tunnel mechanism and also some possibilities to setup tunnels.</para><sect1>
<title>Types of tunnels</title>
<para>There are more than one possibility to tunnel IPv6 packets over IPv4-only links.</para><sect2>
<title>Static point-to-point tunneling</title>
<para>A point-to-point tunnel is a dedicated tunnel to an endpoint, which knows about your IPv6 network (for backward routing) and the IPv4 address of your tunnel endpoint and defined in <ulink url="http://www.faqs.org/rfcs/rfc4213.html">RFC 4213 / Basic Transition Mechanisms for IPv6 Hosts and Routers</ulink>. Requirements:</para><itemizedlist>
<listitem><para>IPv4 address of your local tunnel endpoint must be static, global unique and reachable from the foreign tunnel endpoint
</para><itemizedlist>
<listitem><para>If no static IPv4 address is available, the tunnel provider must support authentication of the dynamic IPv4 address, like <ulink url="http://www.sixxs.net/">SixXS / AICCU</ulink> (3740/udp) or <ulink url="http://gogo6.com/">gogo6</ulink> (3653/udp).</para></listitem></itemizedlist></listitem><listitem><para>A global IPv6 prefix assigned to you
</para><itemizedlist>
<listitem><para>It is also possible that additional IPv6 networks are routed through this tunnel.</para></listitem></itemizedlist></listitem><listitem><para>A foreign tunnel endpoint which is capable to route your IPv6 prefix to your local tunnel endpoint (mostly remote manual configuration required)</para></listitem></itemizedlist><para>Tunnel provider for static point-to-point tunneling:</para><itemizedlist>
<listitem><para><ulink url="http://he.com/">Hurricane Electric</ulink></para></listitem><listitem><para><ulink url="http://www.sixxs.net/">SixXS</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>Automatically tunneling</title>
<para>Automatic tunneling occurs, when a node directly connects another node gotten the IPv4 address of the other node before.</para></sect2><sect2 id='tunneling-6to4.' >
<title><!-- anchor id="tunneling-6to4." -->6to4-Tunneling</title>
<para>6to4 tunneling (<ulink url="http://www.faqs.org/rfcs/rfc3056.html">RFC 3056 / Connection of IPv6 Domains via IPv4 Clouds</ulink>) uses a simple mechanism to create automatic tunnels. Each node with a global unique IPv4 address is able to be a 6to4 tunnel endpoint (if no IPv4 firewall prohibits traffic). 6to4 tunneling is mostly not a one-to-one tunnel. This case of tunneling can be divided into upstream and downstream tunneling. Also, a special IPv6 address indicates that this node will use 6to4 tunneling for connecting the world-wide IPv6 network</para><sect3>
<title>Generation of 6to4 prefix</title>
<para>The 6to4 address is defined like following (schema is taken from <ulink url="http://www.faqs.org/rfcs/rfc3056.html">RFC 3056 / Connection of IPv6 Domains via IPv4 Clouds</ulink>):</para><screen>
<![CDATA[|   3+13   |    32     |    16  |            64 bits             | 
+---+------+-----------+--------+--------------------------------+ 
|  FP+TLA  |  V4ADDR   | SLA ID |           Interface ID         | 
|  0x2002  |           |        |                                | 
+---+------+-----------+--------+--------------------------------+
]]></screen><para>FP and TLA together (16 bits) have the value 0x2002. V4ADDR is the node's global unique IPv4 address (in hexadecimal notation). SLA is the subnet identifier (65536 local subnets possible) and are usable to represent your local network structure.</para>
<para>For gateways, such prefix is generated by normally using SLA &rdquo;0000&rdquo; and suffix &rdquo;::1&rdquo; (not a must, can be an arbitrary one with local-scope) and assigned to the 6to4 tunnel interface. Note that Microsoft Windows uses V4ADDR also for suffix.</para></sect3><sect3>
<title>6to4 upstream tunneling</title>
<para>The node has to know to which foreign tunnel endpoint its in IPv4 packed IPv6 packets should be send to. In &rdquo;early&rdquo; days of 6to4 tunneling, dedicated upstream accepting routers were defined. See  <ulink url="http://www.kfu.com/~nsayer/6to4/">NSayer's 6to4 information</ulink> for a list of routers.</para>
<para>Nowadays, 6to4 upstream routers can be found auto-magically using the anycast address 192.88.99.1. In the background routing protocols handle this, see <ulink url="http://www.faqs.org/rfcs/rfc3068.html">RFC 3068 / An Anycast Prefix for 6to4 Relay Routers</ulink> for details. </para></sect3><sect3>
<title>6to4 downstream tunneling</title>
<para>The downstream (IPv6 backbone -&gt; your 6to4 enabled node) is not really fix and can vary from foreign host which originated packets were send to. There exist two possibilities:</para><itemizedlist>
<listitem><para>Foreign host uses 6to4 and sends packet direct back to your node (see below)</para></listitem><listitem><para>Foreign host sends packets back to the world-wide IPv6 network and depending on the dynamic routing a relay router of an ISP which announces 2002::/16 via BGP will create a automatic tunnel back to your node.</para></listitem></itemizedlist></sect3><sect3>
<title>Possible 6to4 traffic</title>
<itemizedlist>
<listitem><para>from 6to4 to 6to4: is normally directly tunneled between the both 6to4 enabled hosts</para></listitem><listitem><para>from 6to4 to non-6to4: is sent via upstream tunneling</para></listitem><listitem><para>non-6to4 to 6to4: is sent via downstream tunneling</para></listitem></itemizedlist><para>Note, that because of possible asymmetric routing problems with a broken 6to4 relay can be hard to troubleshoot.</para></sect3></sect2><sect2>
<title>UDP encapsulated IPv6 tunneling</title>
<para>UDP encapsulated IPv6 tunneling is usally used if no global IPv4 address is available on the internal endpoint, but using Network Adress Translation (NAT) it can still reach related endpoints using UDP ports described below.</para><sect3>
<title>Teredo Tunnel</title>
<para><ulink url="http://www.faqs.org/rfcs/rfc4380.html">RFC 4380 / Teredo: Tunneling IPv6 over UDP through Network Address Translations</ulink>describes tunneling of IPv6 packets via IPv4 UDP bubbles, see also <ulink url="http://de.wikipedia.org/wiki/Teredo">Wikipedia / Teredo</ulink>. It uses usually 3544/udp. Linux client is named <ulink url="http://www.remlab.net/miredo/">miredo</ulink> and usable out-of-the-box. This tunnel method can only connect a single client to the global IPv6 network..</para></sect3><sect3>
<title>AYIYA Tunnel</title>
<para>Tunnel provider <ulink url="http://www.sixxs.net/">SixXS</ulink> has also IPv6-in-UDP-in-IPv4 (5072/udp) capability, for using it, the AYIYA mode must be enabled.</para></sect3><sect3>
<title>gogo6 Tunnel</title>
<para>Tunnel provider <ulink url="http://gogo6.com/">gogo6</ulink> has also IPv6-in-UDP-in-IPv4 (3653/udp) capability, for using it, the v6udpv4 mode must be enabled.</para></sect3></sect2></sect1><sect1>
<title>Displaying existing tunnels</title>
<sect2>
<title>Using "ip"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 tunnel show [<device>]
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 tunnel show 
sit0: ipv6/ip remote any local any ttl 64 nopmtudisc 
sit1: ipv6/ip remote 195.226.187.50 local any ttl 64
]]></screen></sect2><sect2>
<title>Using "route"</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/route -A inet6 
]]></screen><para>Example (output is filtered to display only tunnels through virtual interface sit0):</para><screen>
<![CDATA[# /sbin/route -A inet6 | grep "\Wsit0\W*$" 
::/96      ::               U   256  2  0  sit0 
2002::/16  ::               UA  256  0  0  sit0 
2000::/3   ::193.113.58.75  UG    1  0  0  sit0 
fe80::/10  ::               UA  256  0  0  sit0 
ff00::/8   ::               UA  256  0  0  sit0
]]></screen></sect2></sect1><sect1 id='conf-ipv6-in-ipv4-point-to-point-tunnels' >
<title><!-- anchor id="conf-ipv6-in-ipv4-point-to-point-tunnels" -->Setup of point-to-point tunnel</title>
<para>There are 3 possibilities to add or remove point-to-point tunnels.</para>
<para>A good additional information about tunnel setup using &rdquo;ip&rdquo; is <ulink url="http://www.deepspace6.net/docs/iproute2tunnel-en.html">Configuring tunnels with iproute2 (article)</ulink> (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/docs/iproute2tunnel-en.html">Mirror</ulink>).</para>
<para>Note: support of such kind of tunnels is provided by kernel module &rdquo;sit&rdquo; (potentially not possible on Virtuozzo platforms)</para><sect2>
<title>Add point-to-point tunnels</title>
<sect3>
<title>Using "ip"</title>
<para>Common method at the moment for a small amount of tunnels.</para>
<para>Usage for creating a tunnel device (but it's not up afterward, also a TTL must be specified because the default value is 0).</para><screen>
<![CDATA[# /sbin/ip tunnel add <device> mode sit ttl <ttldefault> remote
¬ <ipv4addressofforeigntunnel> local <ipv4addresslocal>
]]></screen><para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/ip tunnel add sit1 mode sit ttl <ttldefault> remote
¬ <ipv4addressofforeigntunnel1> local <ipv4addresslocal>
# /sbin/ip link set dev sit1 up
# /sbin/ip -6 route add <prefixtoroute1> dev sit1 metric 1

# /sbin/ip tunnel add sit2 mode sit ttl <ttldefault>
¬ <ipv4addressofforeigntunnel2> local <ipv4addresslocal>
# /sbin/ip link set dev sit2 up
# /sbin/ip -6 route add <prefixtoroute2> dev sit2 metric 1

# /sbin/ip tunnel add sit3 mode sit ttl <ttldefault>
¬ <ipv4addressofforeigntunnel3> local <ipv4addresslocal>
# /sbin/ip link set dev sit3 up
# /sbin/ip -6 route add <prefixtoroute3> dev sit3 metric 1
]]></screen></sect3><sect3>
<title>Using "ifconfig" and "route" (deprecated)</title>
<para>This not very recommended way to add a tunnel because it's a little bit strange. No problem if adding only one, but if you setup more than one, you cannot easy shutdown the first ones and leave the others running.</para>
<para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/ifconfig sit0 up

# /sbin/ifconfig sit0 tunnel <ipv4addressofforeigntunnel1>
# /sbin/ifconfig sit1 up
# /sbin/route -A inet6 add <prefixtoroute1> dev sit1

# /sbin/ifconfig sit0 tunnel <ipv4addressofforeigntunnel2>
# /sbin/ifconfig sit2 up
# /sbin/route -A inet6 add <prefixtoroute2> dev sit2

# /sbin/ifconfig sit0 tunnel <ipv4addressofforeigntunnel3>
# /sbin/ifconfig sit3 up
# /sbin/route -A inet6 add <prefixtoroute3> dev sit3
]]></screen><para>Important: DON'T USE THIS, because this setup implicit enable "automatic tunneling" from anywhere in the Internet, this is a risk, and it should not be advocated.</para></sect3><sect3>
<title>Using "route" only</title>
<para>It's also possible to setup tunnels in Non Broadcast Multiple Access (NBMA) style, it's a easy way to add many tunnels at once. But none of the tunnel can be numbered (which is a not required feature).</para>
<para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/ifconfig sit0 up

# /sbin/route -A inet6 add <prefixtoroute1> gw
¬ ::<ipv4addressofforeigntunnel1> dev sit0
# /sbin/route -A inet6 add <prefixtoroute2> gw
¬ ::<ipv4addressofforeigntunnel2> dev sit0
# /sbin/route -A inet6 add <prefixtoroute3> gw
¬ ::<ipv4addressofforeigntunnel3> dev sit0
]]></screen><para>Important: DON'T USE THIS, because this setup implicit enable "automatic tunneling" from anywhere in the Internet, this is a risk, and it should not be advocated.</para></sect3></sect2><sect2>
<title>Removing point-to-point tunnels</title>
<para>Manually not so often needed, but used by scripts for clean shutdown or restart of IPv6 configuration.</para><sect3>
<title>Using "ip"</title>
<para>Usage for removing a tunnel device:</para><screen>
<![CDATA[# /sbin/ip tunnel del <device>
]]></screen><para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/ip -6 route del <prefixtoroute1> dev sit1
# /sbin/ip link set sit1 down
# /sbin/ip tunnel del sit1

# /sbin/ip -6 route del <prefixtoroute2> dev sit2
# /sbin/ip link set sit2 down
# /sbin/ip tunnel del sit2

# /sbin/ip -6 route del <prefixtoroute3> dev sit3
# /sbin/ip link set sit3 down
# /sbin/ip tunnel del sit3
]]></screen></sect3><sect3>
<title>Using "ifconfig" and "route" (deprecated because not very funny)</title>
<para>Not only the creation is strange, the shutdown also...you have to remove the tunnels in backorder, means the latest created must be removed first.</para>
<para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/route -A inet6 del <prefixtoroute3> dev sit3
# /sbin/ifconfig sit3 down

# /sbin/route -A inet6 del <prefixtoroute2> dev sit2
# /sbin/ifconfig sit2 down

# /sbin/route -A inet6 add <prefixtoroute1> dev sit1
# /sbin/ifconfig sit1 down

# /sbin/ifconfig sit0 down

]]></screen></sect3><sect3>
<title>Using "route"</title>
<para>This is like removing normal IPv6 routes.
</para>
<para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/route -A inet6 del <prefixtoroute1> gw
¬ ::<ipv4addressofforeigntunnel1> dev sit0
# /sbin/route -A inet6 del <prefixtoroute2> gw
¬ ::<ipv4addressofforeigntunnel2> dev sit0
# /sbin/route -A inet6 del <prefixtoroute3> gw
¬ ::<ipv4addressofforeigntunnel3> dev sit0

# /sbin/ifconfig sit0 down
]]></screen></sect3></sect2><sect2>
<title>Numbered point-to-point tunnels</title>
<para>Sometimes it's needed to configure a point-to-point tunnel with IPv6 addresses like in IPv4 today. This is only possible with the first (ifconfig+route - deprecated) and third (ip+route) tunnel setup. In such cases, you can add the IPv6 address to the tunnel interface like shown on interface configuration. </para></sect2></sect1><sect1 id='configuring-ipv6to4-tunnels' >
<title><!-- anchor id="configuring-ipv6to4-tunnels" -->Setup of 6to4 tunnels</title>
<para>Pay attention that the support of 6to4 tunnels currently lacks on vanilla kernel series 2.2.x (see <link linkend="systemcheck-kernel">systemcheck/kernel</link> for more information). Also note that that the prefix length for a 6to4 address is 16 because of from network point of view, all other 6to4 enabled hosts are on the same layer 2.</para><sect2>
<title>Add a 6to4 tunnel</title>
<para>First, you have to calculate your 6to4 prefix using your local assigned global routable IPv4 address (if your host has no global routable IPv4 address, in special cases NAT on border gateways is possible):</para>
<para>Assuming your IPv4 address is </para><screen>
<![CDATA[1.2.3.4
]]></screen><para>the generated 6to4 prefix will be</para><screen>
<![CDATA[2002:0102:0304::
]]></screen><para>Local 6to4 gateways should (but it's not a must, you can choose an arbitrary suffix with local-scope, if you feel better) always assigned the suffix &rdquo;::1&rdquo;, therefore your local 6to4 address will be</para><screen>
<![CDATA[2002:0102:0304::1
]]></screen><para>Use e.g. following for automatic generation:</para><screen>
<![CDATA[ipv4="1.2.3.4"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`
]]></screen><para>There are two ways possible to setup 6to4 tunneling now.</para><sect3>
<title>Using "ip" and a dedicated tunnel device</title>
<para>This is now the recommended way (a TTL must be specified because the default value is 0).</para>
<para>Create a new tunnel device</para><screen>
<![CDATA[# /sbin/ip tunnel add tun6to4 mode sit ttl <ttldefault> remote any local
¬ <localipv4address> 
]]></screen><para>Bring interface up</para><screen>
<![CDATA[# /sbin/ip link set dev tun6to4 up 
]]></screen><para>Add local 6to4 address to interface (note: prefix length 16 is important!)</para><screen>
<![CDATA[# /sbin/ip -6 addr add <local6to4address>/16 dev tun6to4 
]]></screen><para>Add (default) route to the global IPv6 network using the all-6to4-routers IPv4 anycast address</para><screen>
<![CDATA[# /sbin/ip -6 route add default via ::192.88.99.1 dev tun6to4 metric 1
]]></screen><para>It was reported that some versions of &rdquo;ip&rdquo; (e.g. SuSE Linux 9.0) don't support IPv4-compatible IPv6 addresses for gateways, in this case the related IPv6 address has to be used:</para><screen>
<![CDATA[# /sbin/ip -6 route add default via 2002:c058:6301::1 dev tun6to4 metric 1
]]></screen></sect3><sect3>
<title>Using "ifconfig" and "route" and generic tunnel device &rdquo;sit0&rdquo; (deprecated)</title>
<para>This is now deprecated because using the generic tunnel device sit0 doesn't let specify filtering per device.</para>
<para>Bring generic tunnel interface sit0 up</para><screen>
<![CDATA[# /sbin/ifconfig sit0 up 
]]></screen><para>Add local 6to4 address to interface</para><screen>
<![CDATA[# /sbin/ifconfig sit0 add <local6to4address>/16
]]></screen><para>Add (default) route to the global IPv6 network using the all-6to4-relays IPv4 anycast address</para><screen>
<![CDATA[# /sbin/route -A inet6 add default gw ::192.88.99.1 dev sit0
]]></screen></sect3></sect2><sect2>
<title>Remove a 6to4 tunnel</title>
<sect3>
<title>Using "ip" and a dedicated tunnel device</title>
<para>Remove all routes through this dedicated tunnel device</para><screen>
<![CDATA[# /sbin/ip -6 route flush dev tun6to4
]]></screen><para>Shut down interface</para><screen>
<![CDATA[# /sbin/ip link set dev tun6to4 down
]]></screen><para>Remove created tunnel device</para><screen>
<![CDATA[# /sbin/ip tunnel del tun6to4 
]]></screen></sect3><sect3>
<title>Using &rdquo;ifconfig&rdquo; and &rdquo;route&rdquo; and generic tunnel device &rdquo;sit0&rdquo; (deprecated)</title>
<para>Remove (default) route through the 6to4 tunnel interface</para><screen>
<![CDATA[# /sbin/route -A inet6 del default gw ::192.88.99.1 dev sit0
]]></screen><para>Remove local 6to4 address to interface</para><screen>
<![CDATA[# /sbin/ifconfig sit0 del <local6to4address>/16
]]></screen><para>Shut down generic tunnel device (take care about this, perhaps it's still in use...)</para><screen>
<![CDATA[# /sbin/ifconfig sit0 down 
]]></screen></sect3></sect2></sect1></chapter><chapter id='chapter-configuring-ipv4-in-ipv6-tunnels' >
<title><!-- anchor id="chapter-configuring-ipv4-in-ipv6-tunnels" -->Configuring IPv4-in-IPv6 tunnels</title>
<para><ulink url="http://www.faqs.org/rfcs/rfc2473.html">RFC 2473 / Generic Packet Tunneling in IPv6 Specification</ulink> specifies mechanisms to tunnel several different packet types over IPv6 including IPv4.</para>
<para>NOTE: Support for IPv4-in-IPv6 tunnel is available only since kernel version 2.6.22.</para><sect1>
<title>Displaying existing tunnels</title>
<para>Usage:</para><screen>
<![CDATA[# /sbin/ip -6 tunnel show [<device>]
]]></screen><para>Example:</para><screen>
<![CDATA[# /sbin/ip -6 tunnel show mode any
ip6tnl0: ipv6/ipv6 remote :: local :: encaplimit 0 hoplimit 0 tclass 0x00
¬ flowlabel 0x00000 (flowinfo 0x00000000)
ip6tnl1: ip/ipv6 remote fd00:0:0:2::a local fd00:0:0:2::1 dev eth1 encaplimit 4
¬ hoplimit 64 tclass 0x00 flowlabel 0x00000 (flowinfo 0x00000000)
]]></screen><para>NOTE: If you don't include "mode any", only IPv6-in-IPv6 tunnels are displayed.</para></sect1><sect1>
<title>Setup of point-to-point tunnel</title>
<para>Usage for creating a 4over6 tunnel device (but it's not up afterward)</para><screen>
<![CDATA[# /sbin/ip tunnel add <device> mode ip4ip6 remote <ipv6addressofforeigntunnel>
¬ local <ipv6addresslocal>
]]></screen><para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/ip -6 tunnel add ip6tnl1 mode ip4ip6 remote
¬ <ipv6addressofforeigntunnel1> local <ipv6addresslocal>
# /sbin/ip link set dev ip6tnl1 up 
# /sbin/ip -6 route add <prefixtoroute1> dev ip6tnl1 metric 1

# /sbin/ip -6 tunnel add ip6tnl2 mode ip4ip6 remote
¬ <ipv6addressofforeigntunnel2> local <ipv6addresslocal>
# /sbin/ip link set dev ip6tnl2 up
# /sbin/ip -6 route add <prefixtoroute2> dev ip6tnl2 metric 1

# /sbin/ip -6 tunnel add ip6tnl3 mode ip4ip6 remote
¬ <ipv6addressofforeigntunnel3> local <ipv6addresslocal>
# /sbin/ip link set dev ip6tnl3 up
# /sbin/ip -6 route add <prefixtoroute3> dev ip6tnl3 metric 1
]]></screen></sect1><sect1>
<title>Removing point-to-point tunnels</title>
<para>Usage for removing a tunnel device:</para><screen>
<![CDATA[# /sbin/ip -6 tunnel del <device>
]]></screen><para>Usage (generic example for three tunnels):</para><screen>
<![CDATA[# /sbin/ip -6 route del <prefixtoroute1> dev ip6tnl1
# /sbin/ip link set ip6tnl1 down
# /sbin/ip -6 tunnel del ip6tnl1

# /sbin/ip -6 route del <prefixtoroute2> dev ip6tnl2
# /sbin/ip link set ip6tnl2 down
# /sbin/ip -6 tunnel del ip6tnl2

# /sbin/ip -6 route del <prefixtoroute3> dev ip6tnl3
# /sbin/ip link set ip6tnl3 down
# /sbin/ip -6 tunnel del ip6tnl3 
]]></screen></sect1></chapter><chapter id='chapter-kernel-settings' >
<title><!-- anchor id="chapter-kernel-settings" -->Kernel settings in /proc-filesystem</title>
<para id='proc-filesystem' ><!-- anchor id="proc-filesystem" -->Note: the source of this section is mostly the file &rdquo;ip-sysctl.txt&rdquo; which is included in current kernel sources in directory &rdquo;Documentation/networking&rdquo;. Credits to Pekka Savola for maintaining the IPv6-related part in this file. Also some text is more or less copied &amp; pasted into this document.</para><sect1>
<title>How to access the /proc-filesystem</title>
<sect2>
<title>Using &rdquo;cat&rdquo; and &rdquo;echo&rdquo;</title>
<para>Using &rdquo;cat&rdquo; and &rdquo;echo&rdquo; is the simplest way to access the /proc filesystem, but some requirements are needed for that</para><itemizedlist>
<listitem><para>The /proc-filesystem had to be enabled in kernel, means on compiling following switch has to be set</para></listitem></itemizedlist><screen>
<![CDATA[CONFIG_PROC_FS=y
]]></screen><itemizedlist>
<listitem><para>The /proc-filesystem was mounted before, which can be tested using</para></listitem></itemizedlist><screen>
<![CDATA[# mount | grep "type proc"
none on /proc type proc (rw)
]]></screen><itemizedlist>
<listitem><para>You need read and sometimes also write access (normally root only) to the /proc-filesystem</para></listitem></itemizedlist><para>Normally, only entries in /proc/sys/* are writable, the others are readonly and for information retrieving only.</para><sect3>
<title>Retrieving a value</title>
<para>The value of an entry can be retrieved using &rdquo;cat&rdquo;:</para><screen>
<![CDATA[# cat /proc/sys/net/ipv6/conf/all/forwarding
0
]]></screen></sect3><sect3>
<title>Setting a value</title>
<para>A new value can be set (if entry is writable) using &rdquo;echo&rdquo;:</para><screen>
<![CDATA[# echo "1" >/proc/sys/net/ipv6/conf/all/forwarding
]]></screen></sect3></sect2><sect2>
<title>Using &rdquo;sysctl&rdquo;</title>
<para>Using the &rdquo;sysctl&rdquo; program to access the kernel switches is a modern method today. You can use it also, if the /proc-filesystem isn't mounted. But you have only access to /proc/sys/*!</para>
<para>The program &rdquo;sysctl&rdquo; is included in package &rdquo;procps&rdquo; (on Red Hat Linux systems).</para><itemizedlist>
<listitem><para>The sysctl-interface had to be enabled in kernel, means on compiling following switch has to be set</para></listitem></itemizedlist><screen>
<![CDATA[CONFIG_SYSCTL=y
]]></screen><sect3>
<title>Retrieving a value</title>
<para>The value of an entry can be retrieved now:</para><screen>
<![CDATA[# sysctl net.ipv6.conf.all.forwarding
net.ipv6.conf.all.forwarding = 0
]]></screen></sect3><sect3>
<title>Setting a value</title>
<para>A new value can be set (if entry is writable):</para><screen>
<![CDATA[# sysctl -w net.ipv6.conf.all.forwarding=1
net.ipv6.conf.all.forwarding = 1
]]></screen><para>Note: Don't use spaces around the &rdquo;=&rdquo; on setting values. Also on multiple values per line, quote them like e.g.</para><screen>
<![CDATA[# sysctl -w net.ipv4.ip_local_port_range="32768 61000"
net.ipv4.ip_local_port_range = 32768 61000
]]></screen></sect3><sect3>
<title>Additionals</title>
<para>Note: There are sysctl versions in the wild which displaying &rdquo;/&rdquo; instead of the &rdquo;.&rdquo;</para>
<para>For more details take a look into sysctl's manpage.</para>
<para>Hint: for digging fast into the settings, use the option &rdquo;-a&rdquo; (display all entries) in conjunction with &rdquo;grep&rdquo;.</para></sect3></sect2><sect2>
<title>Values found in /proc-filesystems</title>
<para>There are several formats seen in /proc-filesystem:</para><itemizedlist>
<listitem><para>BOOLEAN: simple a &rdquo;0&rdquo; (false) or a &rdquo;1&rdquo; (true)</para></listitem><listitem><para>INTEGER: an integer value, can be unsigned, too</para></listitem><listitem><para>more sophisticated lines with several values: sometimes a header line is displayed also, if not, have a look into the kernel source to retrieve information about the meaning of each value...</para></listitem></itemizedlist></sect2></sect1><sect1 id='proc-sys-net-ipv6.' >
<title><!-- anchor id="proc-sys-net-ipv6." -->Entries in /proc/sys/net/ipv6/</title>
<sect2>
<title>conf/default/*</title>
<para>Change the interface-specific default settings.</para></sect2><sect2>
<title>conf/all/*</title>
<para>Change all the interface-specific settings.</para>
<para>Exception: &rdquo;conf/all/forwarding&rdquo; has a different meaning here</para><sect3>
<title>conf/all/forwarding</title>
<itemizedlist>
<listitem><para>Type: BOOLEAN</para></listitem></itemizedlist><para>This enables global IPv6 forwarding between all interfaces.</para>
<para>In IPv6 you can't control forwarding per device, forwarding control has to be done using IPv6-netfilter (controlled with ip6tables) rulesets and specify input and output devices (see <link linkend="firewalling-netfilter6.">Firewalling/Netfilter6</link> for more). This is different to IPv4, where you are able to control forwarding per device (decision is made on interface where packet came in).</para>
<para>This also sets all interfaces' Host/Router setting 'forwarding' to the specified value. See below for details. This referred to as global forwarding.</para>
<para>If this value is 0, no IPv6 forwarding is enabled, packets never leave another interface, neither physical nor logical like e.g. tunnels.</para></sect3></sect2><sect2>
<title>conf/interface/*</title>
<para>Change special settings per interface.</para>
<para>The functional behaviour for certain settings is different depending on whether local forwarding is enabled or not.</para><sect3>
<title>accept_ra</title>
<itemizedlist>
<listitem><para>Type: BOOLEAN</para></listitem><listitem><para>Functional default: enabled if local forwarding is disabled. disabled if local forwarding is enabled.</para></listitem></itemizedlist><para>Accept Router Advertisements, and autoconfigure this interface with received data.</para></sect3><sect3>
<title>accept_redirects</title>
<itemizedlist>
<listitem><para>Type: BOOLEAN</para></listitem><listitem><para>Functional default: enabled if local forwarding is disabled. disabled if local forwarding is enabled.</para></listitem></itemizedlist><para>Accept Redirects sent by an IPv6 router.</para></sect3><sect3>
<title>autoconf</title>
<itemizedlist>
<listitem><para>Type: BOOLEAN</para></listitem><listitem><para>Functional default: enabled if accept_ra_pinfo is enabled. disabled if accept_ra_pinfo is disabled.</para></listitem></itemizedlist><para>Autoconfigure addresses using prefix information from router advertisements.</para></sect3><sect3>
<title>dad_transmits</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 1</para></listitem></itemizedlist><para>The amount of Duplicate Address Detection probes to send.</para></sect3><sect3>
<title>forwarding</title>
<itemizedlist>
<listitem><para>Type: BOOLEAN</para></listitem><listitem><para>Default: FALSE if global forwarding is disabled (default), otherwise TRUE</para></listitem></itemizedlist><para>Configure interface-specific Host/Router behaviour.</para>
<para>Note: It is recommended to have the same setting on all interfaces; mixed router/host scenarios are rather uncommon.</para><itemizedlist>
<listitem><para>Value FALSE: By default, Host behaviour is assumed. This means:</para></listitem></itemizedlist><orderedlist>
<listitem><para>IsRouter flag is not set in Neighbour Advertisements.</para></listitem><listitem><para>Router Solicitations are being sent when necessary.</para></listitem><listitem><para>If accept_ra is TRUE (default), accept Router Advertisements (and do autoconfiguration).</para></listitem><listitem><para>If accept_redirects is TRUE (default), accept Redirects.</para></listitem></orderedlist><itemizedlist>
<listitem><para>Value TRUE: If local forwarding is enabled, Router behaviour is assumed. This means exactly the reverse from the above:</para></listitem></itemizedlist><orderedlist>
<listitem><para>IsRouter flag is set in Neighbour Advertisements.</para></listitem><listitem><para>Router Solicitations are not sent.</para></listitem><listitem><para>Router Advertisements are ignored.</para></listitem><listitem><para>Redirects are ignored.</para></listitem></orderedlist></sect3><sect3>
<title>hop_limit</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 64</para></listitem></itemizedlist><para>Default Hop Limit to set.</para></sect3><sect3>
<title>mtu</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 1280 (IPv6 required minimum)</para></listitem></itemizedlist><para>Default Maximum Transfer Unit</para></sect3><sect3>
<title>router_solicitation_delay</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 1</para></listitem></itemizedlist><para>Number of seconds to wait after interface is brought up before sending Router Solicitations.</para></sect3><sect3>
<title>router_solicitation_interval</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 4</para></listitem></itemizedlist><para>Number of seconds to wait between Router Solicitations. </para></sect3><sect3>
<title>router_solicitations</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 3</para></listitem></itemizedlist><para>Number of Router Solicitations to send until assuming no routers are present.</para></sect3></sect2><sect2>
<title>neigh/default/*</title>
<para>Change default settings for neighbor detection and some special global interval and threshold values:</para><sect3>
<title>gc_thresh1</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 128</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>gc_thresh2</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 512</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>gc_thresh3</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 1024</para></listitem></itemizedlist><para>Tuning parameter for neighbour table size.</para>
<para>Increase this value if you have a lot of interfaces and problem with routes start to act mysteriously and fail. Or if a running <ulink url="http://www.zebra.org/">Zebra (routing daemon)</ulink>  reports:</para><screen>
<![CDATA[ZEBRA: netlink-listen error: No buffer space available, type=RTM_NEWROUTE(24),
¬ seq=426, pid=0
]]></screen></sect3><sect3>
<title>gc_interval</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 30</para></listitem></itemizedlist><para>More to be filled.</para></sect3></sect2><sect2>
<title>neigh/interface/*</title>
<para>Change special settings per interface for neighbor detection.</para><sect3>
<title>anycast_delay</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 100</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>gc_stale_time</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 60</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>proxy_qlen</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 64</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>unres_qlen</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 3</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>app_solicit</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 0</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>locktime</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 0</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>retrans_time</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 100</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>base_reachable_time</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 30</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>mcast_solicit</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 3</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>ucast_solicit</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 3</para></listitem></itemizedlist><para>More to be filled</para></sect3><sect3>
<title>delay_first_probe_time</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 5</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>proxy_delay</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 80</para></listitem></itemizedlist><para>More to be filled.</para></sect3></sect2><sect2>
<title>route/*</title>
<para>Change global settings for routing.</para><sect3>
<title>flush</title>
<para>Removed in newer kernel releases - more to be filled.</para></sect3><sect3>
<title>gc_interval</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 30</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>gc_thresh</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 1024</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>mtu_expires</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 600</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>gc_elasticity</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 0</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>gc_min_interval</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 5</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>gc_timeout</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 60</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>min_adv_mss</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 12</para></listitem></itemizedlist><para>More to be filled.</para></sect3><sect3>
<title>max_size</title>
<itemizedlist>
<listitem><para>Type: INTEGER</para></listitem><listitem><para>Default: 4096</para></listitem></itemizedlist><para>More to be filled.</para></sect3></sect2></sect1><sect1 id='proc-sys-net-ipv4.' >
<title><!-- anchor id="proc-sys-net-ipv4." -->IPv6-related entries in /proc/sys/net/ipv4/</title>
<para>At the moment (and this will be until IPv4 is completly converted to an independend kernel module) some switches are also used here for IPv6.</para><sect2>
<title>ip_*</title>
<sect3>
<title>ip_local_port_range</title>
<para>This control setting is used by IPv6 also.</para></sect3></sect2><sect2>
<title>tcp_*</title>
<para>This control settings are used by IPv6 also.</para></sect2><sect2>
<title>icmp_*</title>
<para>This control settings are not used by IPv6. To enable ICMPv6 rate limiting (which is very recommended because of the capability of ICMPv6 storms) netfilter-v6 rules must be used.</para></sect2><sect2>
<title>others</title>
<para>Unknown, but probably not used by IPv6.</para></sect2></sect1><sect1 id='proc-net' >
<title><!-- anchor id="proc-net" -->IPv6-related entries in /proc/net/</title>
<para>In /proc/net there are several read-only entries available. You cannot retrieve information using &rdquo;sysctl&rdquo; here, so use e.g. &rdquo;cat&rdquo;.</para><sect2>
<title>if_inet6</title>
<itemizedlist>
<listitem><para>Type: One line per addresss containing multiple values</para></listitem></itemizedlist><para>Here all configured IPv6 addresses are shown in a special format. The example displays for loopback interface only. The meaning is shown below (see &rdquo;net/ipv6/addrconf.c&rdquo; for more).</para><screen>
<![CDATA[# cat /proc/net/if_inet6
00000000000000000000000000000001 01 80 10 80 lo
+------------------------------+ ++ ++ ++ ++ ++
|                                |  |  |  |  |
1                                2  3  4  5  6
]]></screen><orderedlist>
<listitem><para>IPv6 address displayed in 32 hexadecimal chars without colons as separator</para></listitem><listitem><para>Netlink device number (interface index) in hexadecimal (see &rdquo;ip addr&rdquo; , too)</para></listitem><listitem><para>Prefix length in hexadecimal</para></listitem><listitem><para>Scope value (see kernel source &rdquo; include/net/ipv6.h&rdquo; and &rdquo;net/ipv6/addrconf.c&rdquo; for more)</para></listitem><listitem><para>Interface flags (see &rdquo;include/linux/rtnetlink.h&rdquo; and &rdquo;net/ipv6/addrconf.c&rdquo; for more)</para></listitem><listitem><para>Device name</para></listitem></orderedlist></sect2><sect2>
<title>ipv6_route</title>
<itemizedlist>
<listitem><para>Type: One line per route containing multiple values</para></listitem></itemizedlist><para>Here all configured IPv6 routes are shown in a special format. The example displays for loopback interface only. The meaning is shown below (see &rdquo;net/ipv6/route.c&rdquo; for more).</para><screen>
<![CDATA[# cat /proc/net/ipv6_route
00000000000000000000000000000000 00 00000000000000000000000000000000 00
+------------------------------+ ++ +------------------------------+ ++
|                                |  |                                |
1                                2  3                                4

¬ 00000000000000000000000000000000 ffffffff 00000001 00000001 00200200 lo
¬ +------------------------------+ +------+ +------+ +------+ +------+ ++
¬ |                                |        |        |        |        |
¬ 5                                6        7        8        9        10
]]></screen><orderedlist>
<listitem><para>IPv6 destination network displayed in 32 hexadecimal chars without colons as separator</para></listitem><listitem><para>IPv6 destination prefix length in hexadecimal</para></listitem><listitem><para>IPv6 source network displayed in 32 hexadecimal chars without colons as separator</para></listitem><listitem><para>IPv6 source prefix length in hexadecimal</para></listitem><listitem><para>IPv6 next hop displayed in 32 hexadecimal chars without colons as separator</para></listitem><listitem><para>Metric in hexadecimal</para></listitem><listitem><para>Reference counter</para></listitem><listitem><para>Use counter</para></listitem><listitem><para>Flags</para></listitem><listitem><para>Device name</para></listitem></orderedlist></sect2><sect2>
<title>sockstat6</title>
<itemizedlist>
<listitem><para>Type: One line per protocol with description and value</para></listitem></itemizedlist><para>Statistics about used IPv6 sockets. Example:</para><screen>
<![CDATA[# cat /proc/net/sockstat6
TCP6: inuse 7 
UDP6: inuse 2 
RAW6: inuse 1 
FRAG6: inuse 0 memory 0
]]></screen></sect2><sect2>
<title>tcp6</title>
<para>To be filled.</para></sect2><sect2>
<title>udp6</title>
<para>To be filled.</para></sect2><sect2>
<title>igmp6</title>
<para>To be filled.</para></sect2><sect2>
<title>raw6</title>
<para>To be filled.</para></sect2><sect2>
<title>ip6_flowlabel</title>
<para>To be filled.</para></sect2><sect2>
<title>rt6_stats</title>
<para>To be filled.</para></sect2><sect2>
<title>snmp6</title>
<itemizedlist>
<listitem><para>Type: One line per SNMP description and value</para></listitem></itemizedlist><para>SNMP statistics, can be retrieved via SNMP server and related MIB table by network management software.</para></sect2><sect2>
<title>ip6_tables_names</title>
<para>Available netfilter6 tables</para></sect2></sect1></chapter><chapter id='netlink' >
<title><!-- anchor id="netlink" -->Netlink-Interface to kernel</title>
<para>To be filled...I have no experience with that...</para></chapter><chapter id='resolver' >
<title><!-- anchor id="resolver" -->Address Resolver &amp; Selection</title>
<para>Additional info can be found at</para><itemizedlist>
<listitem><para><ulink url="http://www.bieringer.de/linux/IPv6/getaddrinfo/">Linux &amp; IPv6: getaddrinfo and search domains - Research</ulink></para></listitem><listitem><para><ulink url="http://people.redhat.com/drepper/linux-rfc3484.html">RFC 3484 on Linux</ulink> </para></listitem><listitem><para>Karl Auer's Blog: <ulink url="http://biplane.com.au/blog/?p=30">Controlling IPv6 source address selection</ulink> , <ulink url="http://biplane.com.au/blog/?p=22">IPv6 Source Address Selection - what, why, how</ulink></para></listitem><listitem><para>Into6: <ulink url="http://into6.com.au/?p=288">/etc/gai.conf - it ain't what you think it is</ulink></para></listitem></itemizedlist><bridgehead renderas="sect1">Address Resolver &amp; Destination Address Selection</bridgehead>
<para>Name to IPv4 or IPv6 address resolving is usually done using a libc resolver library. Usually the function <emphasis>getaddrinfo</emphasis> is used for that. In case of more than one IPv6 address is returned, according to <ulink url="http://www.faqs.org/rfcs/rfc3484.html">RFC 3484 / Default Address Selection for Internet Protocol version 6</ulink> a sorting should be applied, which can be optionally configured.</para>
<para>The &rdquo;magic&rdquo; is controlled by a file named /etc/gai.conf (it can be that it is empty or missing by default). Default is usually somewhere stored in documentation, see &rdquo;man gai.conf&rdquo; or e.g. /usr/share/doc/glibc-common/gai.conf.</para>
<para>For controlling sort order by configuration following are needed for testing:</para><itemizedlist>
<listitem><para>A host in DNS returning more than one IPv6 address, e.g.</para></listitem></itemizedlist><screen>
<![CDATA[$ dig +short aaaa st1.bieringer.de
2001:4dd0:ff00:834::2
2a01:238:423d:8800:85b3:9e6b:3019:8909 
]]></screen><itemizedlist>
<listitem><para>Lookup via DNS (/etc/hosts won't work)</para></listitem><listitem><para>/etc/gai.conf with proper config, e.g.</para></listitem></itemizedlist><screen>
<![CDATA[precedence  ::1/128       50            # default
precedence  ::/0          40            # default
precedence  2002::/16     30            # default
precedence ::/96          20            # default
precedence ::ffff:0:0/96  10            # default
precedence 2001:4dd0:ff00:834::/64  80  # dst-A
precedence 2a01:238:423d:8800::/64  90  # dst-B
]]></screen><itemizedlist>
<listitem><para>For tests use e.g. telnet client</para></listitem></itemizedlist><screen>
<![CDATA[$ telnet st1.bieringer.de
Trying 2a01:238:423d:8800:85b3:9e6b:3019:8909...    (dst-B)
...
Trying 2001:4dd0:ff00:834::2...                     (dst-A)
...
]]></screen><itemizedlist>
<listitem><para>If precedence is changed in configuration</para></listitem></itemizedlist><screen>
<![CDATA[precedence 2001:4dd0:ff00:834::/64  90  # dst-A ex 80
precedence 2a01:238:423d:8800::/64  80  # dst-B ex 90
]]></screen><itemizedlist>
<listitem><para>The order is changed accordingly</para></listitem></itemizedlist><screen>
<![CDATA[$ telnet st1.bieringer.de
Trying 2001:4dd0:ff00:834::2...                     (dst-A)
...
Trying 2a01:238:423d:8800:85b3:9e6b:3019:8909...    (dst-B)
...
]]></screen><bridgehead renderas="sect1">Source Address Selection</bridgehead>
<para>Source address selection in Linux is done automatically by kernel and usually only using information from routing tables and try to match the same scope of address.</para>
<bridgehead renderas="sect2">Source Address Selection with &rdquo;ip addrlabel&rdquo;</bridgehead>
<para>With extension of internal &rdquo;ip addrlabel&rdquo; a source address can be bound to a destination address (e.g. selected via mechanisms above). Binding means here: &rdquo;same label&rdquo; (label is a number).</para><itemizedlist>
<listitem><para>Default of &rdquo;ip addrlabel&rdquo; (here on CentOS 6):</para></listitem></itemizedlist><screen>
<![CDATA[# ip addrlabel
prefix ::1/128 label 0 
prefix ::/96 label 3 
prefix ::ffff:0.0.0.0/96 label 4 
prefix 2001::/32 label 6 
prefix 2001:10::/28 label 7 
prefix 2002::/16 label 2 
prefix fc00::/7 label 5 
prefix ::/0 label 1 
]]></screen><itemizedlist>
<listitem><para>System is multihomed (here on one interface), router provides 2 prefixes via radvd:</para></listitem></itemizedlist><screen>
<![CDATA[# ip -6 addr show dev eth1 | grep -w inet6 |grep -w global
    inet6 2001:6f8:12d8:2:5054:ff:fefb:6582/64 scope global dynamic 
    inet6 2001:6f8:900:8cbc:5054:ff:fefb:6582/64 scope global dynamic 
]]></screen><itemizedlist>
<listitem><para>Connect now to server (shown above)</para></listitem></itemizedlist><screen>
<![CDATA[$ telnet st1.bieringer.de
Trying 2001:4dd0:ff00:834::2...                     (dst-A)
...
Trying 2a01:238:423d:8800:85b3:9e6b:3019:8909...    (dst-B)
...
]]></screen><itemizedlist>
<listitem><para>Related tcpdump with filter &rdquo;tcp and dst port 23&rdquo; shows only the use of the upper local source IPv6 address</para></listitem></itemizedlist><screen>
<![CDATA[IP6 2001:6f8:12d8:2:5054:ff:fefb:6582.37762 > 2001:4dd0:ff00:834::2.telnet:                  (src-A -> dst-A)
IP6 2001:6f8:12d8:2:5054:ff:fefb:6582.45754 > 2a01:238:423d:8800:85b3:9e6b:3019:8909.telnet: (src-A -> dst-B)
]]></screen><itemizedlist>
<listitem><para>Binding now source and destination with &rdquo;ip addrlabel&rdquo;</para></listitem></itemizedlist><screen>
<![CDATA[# ip addrlabel add prefix 2001:6f8:12d8:2::/64 label 200
# ip addrlabel add prefix 2001:6f8:900:8cbc::/64 label 300
# ip addrlabel add prefix 2001:4dd0:ff00:834::/64 label 200
# ip addrlabel add prefix 2a01:238:423d:8800::/64 label 300
]]></screen><itemizedlist>
<listitem><para>Resulting &rdquo;ip addrlabel&rdquo;</para></listitem></itemizedlist><screen>
<![CDATA[# ip addrlabel
prefix ::1/128 label 0 
prefix ::/96 label 3 
prefix ::ffff:0.0.0.0/96 label 4 
prefix 2a01:238:423d:8800::/64 label 300   # dst-B
prefix 2001:4dd0:ff00:834::/64 label 200   # dst-A
prefix 2001:6f8:900:8cbc::/64 label 300    # src-B
prefix 2001:6f8:12d8:2::/64 label 200      # src-A
prefix 2001::/32 label 6 
prefix 2001:10::/28 label 7 
prefix 2002::/16 label 2 
prefix fc00::/7 label 5 
prefix ::/0 label 1 
]]></screen><itemizedlist>
<listitem><para>Connect now to server again</para></listitem></itemizedlist><screen>
<![CDATA[$ telnet st1.bieringer.de
Trying 2001:4dd0:ff00:834::2...                     (dst-A)
...
Trying 2a01:238:423d:8800:85b3:9e6b:3019:8909...    (dst-B)
...
]]></screen><itemizedlist>
<listitem><para>Related tcpdump with filter &rdquo;tcp and dst port 23&rdquo; shows now the use of both local source IPv6 addresses according to the configured pairs A and B</para></listitem></itemizedlist><screen>
<![CDATA[IP6 2001:6f8:12d8:2:5054:ff:fefb:6582.37765   > 2001:4dd0:ff00:834::2.telnet:                  (src-A -> dst-A)
IP6 2001:6f8:900:8cbc:5054:ff:fefb:6582.39632 > 2a01:238:423d:8800:85b3:9e6b:3019:8909.telnet: (src-B -> dst-B)
]]></screen><para>Setup of persistent &rdquo;ip addrtable&rdquo; is probably currently not supported by Linux distributions, so extension of network init scripts or rc.local must be used for that. A script which uses information from /etc/gai.conf and configure &rdquo;ip addrtable&rdquo; accordingly can be found here: <ulink url="http://into6.com.au/?p=288">/etc/gai.conf - it ain't what you think it is</ulink></para></chapter><chapter id='network-debugging' >
<title><!-- anchor id="network-debugging" -->Network debugging</title>
<sect1>
<title>Server socket binding</title>
<sect2>
<title>Using &rdquo;netstat&rdquo; for server socket binding check</title>
<para>It's always interesting which server sockets are currently active on a node. Using &rdquo;netstat&rdquo; is a short way to get such information: </para>
<para>Used options: -nlptu</para>
<para>Example:</para><screen>
<![CDATA[# netstat -nlptu
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
¬ PID/Program name
tcp        0      0 0.0.0.0:32768           0.0.0.0:*               LISTEN     
¬ 1258/rpc.statd
tcp        0      0 0.0.0.0:32769           0.0.0.0:*               LISTEN     
¬ 1502/rpc.mountd
tcp        0      0 0.0.0.0:515             0.0.0.0:*               LISTEN     
¬ 22433/lpd Waiting
tcp        0      0 1.2.3.1:139             0.0.0.0:*               LISTEN     
¬ 1746/smbd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     
¬ 1230/portmap
tcp        0      0 0.0.0.0:6000            0.0.0.0:*               LISTEN     
¬ 3551/X
tcp        0      0 1.2.3.1:8081            0.0.0.0:*               LISTEN     
¬ 18735/junkbuster
tcp        0      0 1.2.3.1:3128            0.0.0.0:*               LISTEN     
¬ 18822/(squid)
tcp        0      0 127.0.0.1:953           0.0.0.0:*               LISTEN     
¬ 30734/named
tcp        0      0 ::ffff:1.2.3.1:993      :::*                    LISTEN     
¬ 6742/xinetd-ipv6
tcp        0      0 :::13                   :::*                    LISTEN     
¬ 6742/xinetd-ipv6
tcp        0      0 ::ffff:1.2.3.1:143      :::*                    LISTEN     
¬ 6742/xinetd-ipv6
tcp        0      0 :::53                   :::*                    LISTEN     
¬ 30734/named
tcp        0      0 :::22                   :::*                    LISTEN     
¬ 1410/sshd
tcp        0      0 :::6010                 :::*                    LISTEN     
¬ 13237/sshd
udp        0      0 0.0.0.0:32768           0.0.0.0:*                          
¬ 1258/rpc.statd
udp        0      0 0.0.0.0:2049            0.0.0.0:*                          
¬ -
udp        0      0 0.0.0.0:32770           0.0.0.0:*                          
¬ 1502/rpc.mountd
udp        0      0 0.0.0.0:32771           0.0.0.0:*                          
¬ -
udp        0      0 1.2.3.1:137             0.0.0.0:*                          
¬ 1751/nmbd
udp        0      0 0.0.0.0:137             0.0.0.0:*                          
¬ 1751/nmbd
udp        0      0 1.2.3.1:138             0.0.0.0:*                          
¬ 1751/nmbd
udp        0      0 0.0.0.0:138             0.0.0.0:*                          
¬ 1751/nmbd
udp        0      0 0.0.0.0:33044           0.0.0.0:*                          
¬ 30734/named
udp        0      0 1.2.3.1:53              0.0.0.0:*                          
¬ 30734/named
udp        0      0 127.0.0.1:53            0.0.0.0:*                          
¬ 30734/named
udp        0      0 0.0.0.0:67              0.0.0.0:*                          
¬ 1530/dhcpd
udp        0      0 0.0.0.0:67              0.0.0.0:*                          
¬ 1530/dhcpd
udp        0      0 0.0.0.0:32858           0.0.0.0:*                          
¬ 18822/(squid)
udp        0      0 0.0.0.0:4827            0.0.0.0:*                          
¬ 18822/(squid)
udp        0      0 0.0.0.0:111             0.0.0.0:*                          
¬ 1230/portmap
udp        0      0 :::53                   :::*                               
¬ 30734/named
]]></screen></sect2></sect1><sect1 id='examples-tcpdump' >
<title><!-- anchor id="examples-tcpdump" -->Examples for tcpdump packet dumps</title>
<para>Here some examples of captured packets are shown, perhaps useful for your own debugging...</para>
<para>...more coming next...</para><sect2>
<title>Router discovery</title>
<sect3>
<title>Router advertisement</title>
<screen>
<![CDATA[15:43:49.484751 fe80::212:34ff:fe12:3450 > ff02::1: icmp6: router
¬ advertisement(chlim=64, router_ltime=30, reachable_time=0,
¬ retrans_time=0)(prefix info: AR valid_ltime=30, preffered_ltime=20,
¬ prefix=2002:0102:0304:1::/64)(prefix info: LAR valid_ltime=2592000,
¬ preffered_ltime=604800, prefix=2001:0db8:0:1::/64)(src lladdr:
¬ 0:12:34:12:34:50) (len 88, hlim 255)
]]></screen><para>Router with link-local address &rdquo;fe80::212:34ff:fe12:3450&rdquo; send an advertisement to the all-node-on-link multicast address &rdquo;ff02::1&rdquo; containing two prefixes &rdquo;2002:0102:0304:1::/64&rdquo; (lifetime 30 s) and &rdquo;2001:0db8:0:1::/64&rdquo; (lifetime 2592000 s) including its own layer 2 MAC address &rdquo;0:12:34:12:34:50&rdquo;.</para></sect3><sect3>
<title>Router solicitation</title>
<screen>
<![CDATA[15:44:21.152646 fe80::212:34ff:fe12:3456 > ff02::2: icmp6: router solicitation
¬ (src lladdr: 0:12:34:12:34:56) (len 16, hlim 255)
]]></screen><para>Node with link-local address &rdquo;fe80::212:34ff:fe12:3456&rdquo; and layer 2 MAC address &rdquo;0:12:34:12:34:56&rdquo; is looking for a router on-link, therefore sending this solicitation to the all-router-on-link multicast address &rdquo;ff02::2&rdquo;.</para></sect3></sect2><sect2>
<title>Neighbor discovery</title>
<sect3>
<title>Neighbor discovery solicitation for duplicate address detection</title>
<para>Following packets are sent by a node with layer 2 MAC address &rdquo;0:12:34:12:34:56&rdquo; during autoconfiguration to check whether a potential address is already used by another node on the link sending this to the solicited-node link-local multicast address.</para><itemizedlist>
<listitem><para>Node wants to configure its link-local address &rdquo;fe80::212:34ff:fe12:3456&rdquo;, checks for duplicate now</para></listitem></itemizedlist><screen>
<![CDATA[15:44:17.712338 :: > ff02::1:ff12:3456: icmp6: neighbor sol: who has
¬ fe80::212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32, hlim 255)
]]></screen><itemizedlist>
<listitem><para>Node wants to configure its global address &rdquo;2002:0102:0304:1:212:34ff:fe12:3456&rdquo; (after receiving advertisement shown above), checks for duplicate now</para></listitem></itemizedlist><screen>
<![CDATA[15:44:21.905596 :: > ff02::1:ff12:3456: icmp6: neighbor sol: who has
¬ 2002:0102:0304:1:212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32,
¬ hlim 255)
]]></screen><itemizedlist>
<listitem><para>Node wants to configure its global address &rdquo;2001:0db8:0:1:212:34ff:fe12:3456&rdquo; (after receiving advertisement shown above), checks for duplicate now</para></listitem></itemizedlist><screen>
<![CDATA[15:44:22.304028 :: > ff02::1:ff12:3456: icmp6: neighbor sol: who has
¬ 2001:0db8:0:1:212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32, hlim
¬ 255)
]]></screen></sect3><sect3>
<title>Neighbor discovery solicitation for looking for host or gateway</title>
<itemizedlist>
<listitem><para>Node wants to send packages to &rdquo;2001:0db8:0:1::10&rdquo; but has no layer 2 MAC address to send packet, so send solicitation now</para></listitem></itemizedlist><screen>
<![CDATA[13:07:47.664538 2002:0102:0304:1:2e0:18ff:fe90:9205 > ff02::1:ff00:10: icmp6:
¬ neighbor sol: who has 2001:0db8:0:1::10(src lladdr: 0:e0:18:90:92:5) (len 32,
¬ hlim 255)
]]></screen><itemizedlist>
<listitem><para>Node looks for &rdquo;fe80::10&rdquo; now</para></listitem></itemizedlist><screen>
<![CDATA[13:11:20.870070 fe80::2e0:18ff:fe90:9205 > ff02::1:ff00:10: icmp6: neighbor
¬ sol: who has fe80::10(src lladdr: 0:e0:18:90:92:5) (len 32, hlim 255)
]]></screen></sect3></sect2></sect1></chapter><chapter id='chapter-support-persistent-configuration' >
<title><!-- anchor id="chapter-support-persistent-configuration" -->Support for persistent IPv6 configuration in Linux distributions</title>
<para>Some Linux distribution contain already support of a persistent IPv6 configuration using existing or new configuration and script files and some hook in the IPv4 script files.</para><sect1>
<title>Red Hat Linux and &rdquo;clones&rdquo;</title>
<para>Since starting writing the <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux - HowTo</ulink> it was my intention to enable a persistent IPv6 configuration which catch most of the wished cases like host-only, router-only, dual-homed-host, router with second stub network, normal tunnels, 6to4 tunnels, and so on. Nowadays there exists a set of configuration and script files which do the job very well (never heard about real problems, but I don't know how many use the set). Because this configuration and script files are extended from time to time, they got their own homepage: <ulink url="http://www.deepspace6.net/projects/initscripts-ipv6.html">initscripts-ipv6 homepage</ulink> (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/projects/initscripts-ipv6.html">Mirror</ulink>). Because I began my IPv6 experience using a Red Hat Linux 5.0 clone, my IPv6 development systems are mostly Red Hat Linux based now, it's kind a logic that the scripts are developed for this kind of distribution (so called <emphasis>historic issue</emphasis>). Also it was very easy to extend some configuration files, create new ones and create some simple hook for calling IPv6 setup during IPv4 setup.</para>
<para>Fortunately, in Red Hat Linux since 7.1 a snapshot of my IPv6 scripts is included, this was and is still further on assisted by Pekka Savola.</para>
<para>Mandrake since version 8.0 also includes an IPv6-enabled initscript package, but a minor bug still prevents usage (&rdquo;ifconfig&rdquo; misses &rdquo;inet6&rdquo; before &rdquo;add&rdquo;).</para><sect2>
<title>Test for IPv6 support of network configuration scripts</title>
<para>You can test, whether your Linux distribution contain support for persistent IPv6 configuration using my set. Following script library should exist:</para><screen>
<![CDATA[/etc/sysconfig/network-scripts/network-functions-ipv6
]]></screen><para>Auto-magically test:</para><screen>
<![CDATA[# test -f /etc/sysconfig/network-scripts/network-functions-ipv6 && echo "Main
¬ IPv6 script library exists"
]]></screen><para>The version of the library is important if you miss some features. You can get it executing following (or easier look at the top of the file):</para><screen>
<![CDATA[# source /etc/sysconfig/network-scripts/network-functions-ipv6 &&
¬ getversion_ipv6_functions 
20011124
]]></screen><para>In shown example, the used version is 20011124. Check this against latest information on <ulink url="http://www.deepspace6.net/projects/initscripts-ipv6.html">initscripts-ipv6 homepage</ulink> (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/projects/initscripts-ipv6.html">Mirror</ulink>) to see what has been changed. You will find there also a change-log.</para></sect2><sect2>
<title>Short hint for enabling IPv6 on current RHL 7.1, 7.2, 7.3, ...</title>
<itemizedlist>
<listitem><para>Check whether running system has already IPv6 module loaded</para></listitem></itemizedlist><screen>
<![CDATA[# modprobe -c | grep net-pf-10
alias net-pf-10 off
]]></screen><itemizedlist>
<listitem><para>If result is &rdquo;off&rdquo;, then enable IPv6 networking by editing /etc/sysconfig/network, add following new line</para></listitem></itemizedlist><screen>
<![CDATA[NETWORKING_IPV6=yes
]]></screen><itemizedlist>
<listitem><para>Reboot or restart networking using</para></listitem></itemizedlist><screen>
<![CDATA[# service network restart
]]></screen><itemizedlist>
<listitem><para>Now IPv6 module should be loaded</para></listitem></itemizedlist><screen>
<![CDATA[# modprobe -c | grep ipv6
alias net-pf-10 ipv6
]]></screen><para>If your system is on a link which provides router advertisement, autoconfiguration will be done automatically. For more information which settings are supported see /usr/share/doc/initscripts-$version/sysconfig.txt.</para></sect2></sect1><sect1>
<title>SuSE Linux</title>
<para>In newer 7.x versions there is a really rudimentary support available, see /etc/rc.config for details.</para>
<para>Because of the really different configuration and script file structure it is hard (or impossible) to use the set for Red Hat Linux and clones with this distribution.
In versions 8.x they completly change their configuration setup. </para><sect2>
<title>SuSE Linux 7.3</title>
<itemizedlist>
<listitem><para><ulink url="http://www.feyrer.de/IPv6/SuSE73-IPv6+6to4-setup.html">How to setup 6to4 IPv6 with SuSE 7.3</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>SuSE Linux 8.0</title>
<sect3>
<title>IPv6 address configuration</title>
<para>Edit file /etc/sysconfig/network/ifcfg-&lt;Interface-Name&gt; and setup following value</para><screen>
<![CDATA[IP6ADDR="<ipv6-address>/<prefix>"
]]></screen></sect3><sect3>
<title>Additional information</title>
<para>See file /usr/share/doc/packages/sysconfig/README</para></sect3></sect2><sect2>
<title>SuSE Linux 8.1</title>
<sect3>
<title>IPv6 address configuration</title>
<para>Edit file /etc/sysconfig/network/ifcfg-&lt;Interface-Name&gt; and setup following value</para><screen>
<![CDATA[IPADDR="<ipv6-address>/<prefix>"
]]></screen></sect3><sect3>
<title>Additional information</title>
<para>See file /usr/share/doc/packages/sysconfig/Network </para></sect3></sect2></sect1><sect1 id='Configuration-Debian-Linux' >
<title><!-- anchor id="Configuration-Debian-Linux" -->Debian Linux</title>
<para>Following information was contributed by Stephane Bortzmeyer &lt;bortzmeyer at nic dot fr&gt;</para><orderedlist>
<listitem><para>Be sure that IPv6 is loaded, either because it is compiled into the kernel or because the module is loaded. For the latest, three solutions, adding it to /etc/modules, using the pre-up trick shown later or using kmod (not detailed here).</para></listitem><listitem><para>Configure your interface. Here we assume eth0 and address (2001:0db8:1234:5::1:1). Edit /etc/network/interfaces:</para></listitem></orderedlist><screen>
<![CDATA[iface eth0 inet6 static
        pre-up modprobe ipv6
        address 2001:0db8:1234:5::1:1
        # To suppress completely autoconfiguration:
        # up echo 0 > /proc/sys/net/ipv6/conf/all/autoconf
        netmask 64
        # The router is autoconfigured and has no fixed address.
        # It is magically
        # found. (/proc/sys/net/ipv6/conf/all/accept_ra). Otherwise:
        #gateway 2001:0db8:1234:5::1
]]></screen><para>And you reboot or you just</para><screen>
<![CDATA[# ifup --force eth0
]]></screen><para>and you have your static address. </para><sect2>
<title>Further information</title>
<itemizedlist>
<listitem><para><ulink url="http://ipv6.debian.net/">IPv6 with Debian Linux</ulink></para></listitem><listitem><para>Jean-Marc V. Liotier's <ulink url="http://www.ruwenzori.net/ipv6/Jims_LAN_IPv6_global_connectivity_howto.html">HOWTO for Freenet6 &amp; Debian Users</ulink> (announced 24.12.2002 on <link linkend="information-maillists">mailinglist</link> users@ipv6.org )</para></listitem></itemizedlist></sect2></sect1></chapter><chapter id='chapter-autoconfiguration' >
<title><!-- anchor id="chapter-autoconfiguration" -->Auto-configuration</title>
<sect1>
<title>Stateless auto-configuration out-of-the-box</title>
<para>Is supported and seen on the assigned link-local address after an IPv6-enabled interface is up.</para>
<para>Example:</para><screen>
<![CDATA[# ip -6 addr show dev eth0 scope link
2: eth0: <BROADCAST,MULTICAST,UP> mtu 1500 qlen1000
    inet6 fe80::211:d8ff:fe6b:f0f5/64 scope link
       valid_lft forever preferred_lft forever 
]]></screen></sect1><sect1>
<title>Stateless auto-configuration using Router Advertisement Daemon (radvd)</title>
<para>to be filled. See <link linkend="hints-daemons-radvd">radvd daemon autoconfiguration</link> below.</para></sect1><sect1>
<title>Dynamic Host Configuration Protocol v6 (DHCPv6)</title>
<para>After a long time discussing issues, finally <ulink url="http://www.faqs.org/rfcs/rfc3315.html">RFC 3315 / Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</ulink> was finished. At time updating this part (10/2005) currently two implementations are available:</para><itemizedlist>
<listitem><para><ulink url="http://klub.com.pl/dhcpv6/">Dibbler</ulink> by Tomasz Mrugalski &lt;thomson at klub dot com dot pl&gt; (<link linkend="hints-daemons-dibbler">Hints for configuration</link>)</para></listitem><listitem><para><ulink url="https://fedorahosted.org/dhcpv6/">dhcpv6</ulink> (<link linkend="hints-daemons-dhcpv6.">Hints for configuration</link>)</para></listitem><listitem><para><ulink url="http://www.isc.org/software/dhcp">ISC DHCP</ulink> (<link linkend="hints-daemons-isc-dhcp">Hints for configuration</link>)</para></listitem></itemizedlist></sect1></chapter><chapter id='chapter-mobility' >
<title><!-- anchor id="chapter-mobility" -->Mobility</title>
<sect1>
<title>Common information</title>
<sect2>
<title>Node Mobility</title>
<para>Support for IPv6 mobility can be enabled in Linux by installing the MIPL2 implementation found at: <ulink url="http://www.mobile-ipv6.org/">http://www.mobile-ipv6.org/</ulink></para>
<para>This implementation is compliant with RFC 3775. It is composed of a kernel patch and a mobility daemon called mip6d. Version 2.0.1 applies on Linux kernel 2.6.15.</para>
<para>Installation and setup are described in the <ulink url="http://tldp.org/HOWTO/Mobile-IPv6-HOWTO/">Linux Mobile IPv6 HOWTO</ulink>.</para></sect2><sect2>
<title>Network Mobility</title>
<para>There also exists an implementation of network mobility for Linux, it is called NEPL and is based on MIPL. It can also be downloaded from: <ulink url="http://www.mobile-ipv6.org/">http://www.mobile-ipv6.org/</ulink>.</para>
<para>The HOWTO document describing setup and configuration is available at: <ulink url="http://www.nautilus6.org/doc/nepl-howto/">http://www.nautilus6.org/doc/nepl-howto/</ulink>.</para></sect2><sect2>
<title>Links</title>
<itemizedlist>
<listitem><para>Mobile IPv6 for Linux (MIPL) project: <ulink url="http://www.mobile-ipv6.org/">http://www.mobile-ipv6.org/</ulink></para></listitem><listitem><para>Nautilus6 working group: <ulink url="http://nautilus6.org/">http://nautilus6.org/</ulink></para></listitem><listitem><para>Fast Handovers for Mobile IPv6 for Linux project: <ulink url="http://www.fmipv6.org/">http://www.fmipv6.org/</ulink></para></listitem><listitem><para>USAGI-patched Mobile IPv6 for Linux (UMIP):<ulink url="http://umip.linux-ipv6.org/">http://umip.linux-ipv6.org/</ulink></para></listitem><listitem><para>Deploying IPsec/IKE-protected MIPv6 under Linux:<ulink url="http://natisbad.org/MIPv6/">http://natisbad.org/MIPv6/</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3775.html">RFC 3775 / Mobility Support in IPv6</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3776.html">RFC 3776 / Using IPsec to Protect Mobile IPv6 Signaling Between Mobile Nodes and Home Agents</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3963.html">RFC 3963 / Network Mobility (NEMO)</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc4068.html">RFC 4068 / Fast Handovers for Mobile IPv6</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc4423.html">RFC 4423 / Host Identity Protocol (HIP) Architecture</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc5201.html">RFC 5201 / Host Identity Protocol</ulink></para></listitem><listitem><para>HIP implementations: <ulink url="http://infrahip.hiit.fi/">http://infrahip.hiit.fi/</ulink>, <ulink url="http://hip4inter.net/">http://hip4inter.net/</ulink>, <ulink url="http://www.openhip.org/">http://www.openhip.org/</ulink></para></listitem></itemizedlist></sect2></sect1></chapter><chapter id='chapter-firewalling-security' >
<title><!-- anchor id="chapter-firewalling-security" -->Firewalling</title>
<para>IPv6 firewalling is important, especially if using IPv6 on internal networks with global IPv6 addresses. Because unlike at IPv4 networks where in common internal hosts are protected automatically using private IPv4 addresses like <ulink url="http://www.faqs.org/rfcs/rfc1918.html">RFC 1918 / Address Allocation for Private Internets</ulink> or Automatic Private IP Addressing (APIPA)<ulink url="http://www.google.com/search?q=apipa+microsoft">Google search for Microsoft + APIPA</ulink>, in IPv6 normally global addresses are used and someone with IPv6 connectivity can reach all internal IPv6 enabled nodes.</para><sect1 id='firewalling-netfilter6.' >
<title><!-- anchor id="firewalling-netfilter6." -->Firewalling using netfilter6 </title>
<para>Native IPv6 firewalling is only supported in kernel versions 2.4+. In older 2.2- you can only filter IPv6-in-IPv4 by protocol 41. </para>
<para>Attention: no warranty that described rules or examples can really protect your system! </para>
<para>Audit your ruleset after installation, see <xref linkend="IPv6-security-auditing"> for more.</para>
<para>Since kernel version 2.6.20 (February 2007) IPv6 connection tracking is fully working (and does not break IPv4 NAT anymore like versions before)</para>
<para>Since kernel version 3.9.0 (April 2013) NAT for IPv6 is supported with ip6tables &gt;= 1.4.18</para>
<para>Since kernel version 3.13 (April 2014) new framework introduced named: nftables</para><sect2>
<title>More information</title>
<itemizedlist>
<listitem><para><ulink url="http://www.netfilter.org/">Netfilter project</ulink></para></listitem><listitem><para><ulink url="https://lists.netfilter.org/mailman/listinfo/netfilter">maillist archive of netfilter users</ulink></para></listitem><listitem><para><ulink url="https://lists.netfilter.org/mailman/listinfo/netfilter-devel">maillist archive of netfilter developers</ulink></para></listitem><listitem><para><ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html#netfilter6 ">Unofficial status informations</ulink></para></listitem></itemizedlist></sect2></sect1><sect1>
<title>Preparation</title>
<para>This step is only needed if distributed kernel and netfilter doesn't fit your requirements and new features are available but still not built-in.</para><sect2>
<title>Get sources</title>
<para>Get the latest kernel source: <ulink url="http://www.kernel.org/">http://www.kernel.org/</ulink></para>
<para>Get the latest iptables package: </para><itemizedlist>
<listitem><para>Source tarball (for kernel patches): <ulink url="http://www.netfilter.org/">http://www.netfilter.org/</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>Extract sources</title>
<para>Change to source directory: </para><screen>
<![CDATA[# cd /path/to/src 
]]></screen><para>Unpack and rename kernel sources </para><screen>
<![CDATA[# tar z|jxf kernel-version.tar.gz|bz2 
# mv linux linux-version-iptables-version+IPv6 
]]></screen><para>Unpack iptables sources </para><screen>
<![CDATA[# tar z|jxf iptables-version.tar.gz|bz2 
]]></screen></sect2><sect2>
<title>Apply latest iptables/IPv6-related patches to kernel source</title>
<para>Change to iptables directory </para><screen>
<![CDATA[# cd iptables-version 
]]></screen><para>Apply pending patches </para><screen>
<![CDATA[# make pending-patches KERNEL_DIR=/path/to/src/linux-version-iptables-version/ 
]]></screen><para>Apply additional IPv6 related patches (still not in the vanilla kernel included) </para><screen>
<![CDATA[# make patch-o-matic KERNEL_DIR=/path/to/src/linux-version-iptables-version/ 
]]></screen><para>Say yes at following options (iptables-1.2.2) </para><itemizedlist>
<listitem><para>ah-esp.patch </para></listitem><listitem><para>masq-dynaddr.patch (only needed for systems with dynamic IP assigned WAN connections like PPP or PPPoE) </para></listitem><listitem><para>ipv6-agr.patch.ipv6 </para></listitem><listitem><para>ipv6-ports.patch.ipv6 </para></listitem><listitem><para>LOG.patch.ipv6 </para></listitem><listitem><para>REJECT.patch.ipv6 </para></listitem></itemizedlist><para>Check IPv6 extensions </para><screen>
<![CDATA[# make print-extensions 
Extensions found: IPv6:owner IPv6:limit IPv6:mac IPv6:multiport
]]></screen></sect2><sect2>
<title>Configure, build and install new kernel</title>
<para>Change to kernel sources </para><screen>
<![CDATA[# cd /path/to/src/linux-version-iptables-version/ 
]]></screen><para>Edit Makefile </para><screen>
<![CDATA[- EXTRAVERSION = 
+ EXTRAVERSION = -iptables-version+IPv6-try 
]]></screen><para>Run configure, enable IPv6 related </para><screen>
<![CDATA[            Code maturity level options 
                  Prompt for development and/or incomplete code/drivers : yes 
            Networking options 
                  Network packet filtering: yes 
                  The IPv6 protocol: module 
                       IPv6: Netfilter Configuration 
                             IP6 tables support: module 
                             All new options like following: 
                                   limit match support: module 
                                   MAC address match support: module 
                                   Multiple port match support: module 
                                   Owner match support: module 
                                   netfilter MARK match support: module 
                                   Aggregated address check: module 
                                   Packet filtering: module 
                                        REJECT target support: module 
                                        LOG target support: module 
                                   Packet mangling: module 
                                   MARK target support: module 
]]></screen><para>Configure other related to your system, too </para>
<para>Compilation and installing: see the kernel section here and other HOWTOs </para></sect2><sect2>
<title>Rebuild and install binaries of iptables</title>
<para>Make sure, that upper kernel source tree is also available at /usr/src/linux/ </para>
<para>Rename older directory </para><screen>
<![CDATA[# mv /usr/src/linux /usr/src/linux.old 
]]></screen><para>Create a new softlink </para><screen>
<![CDATA[# ln -s /path/to/src/linux-version-iptables-version /usr/src/linux 
]]></screen><para>Rebuild SRPMS </para><screen>
<![CDATA[# rpm --rebuild /path/to/SRPMS/iptables-version-release.src.rpm 
]]></screen><para>Install new iptables packages (iptables + iptables-ipv6) </para><itemizedlist>
<listitem><para>On RH 7.1 systems, normally, already an older version is installed, therefore use "freshen" </para></listitem></itemizedlist><screen>
<![CDATA[# rpm -Fhv /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm 
]]></screen><itemizedlist>
<listitem><para>If not already installed, use "install" </para></listitem></itemizedlist><screen>
<![CDATA[# rpm -ihv /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm 
]]></screen><itemizedlist>
<listitem><para>On RH 6.2 systems, normally, no kernel 2.4.x is installed, therefore the requirements don't fit. Use "--nodeps" to install it </para></listitem></itemizedlist><screen>
<![CDATA[# rpm -ihv --nodeps /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm 
]]></screen><para>Perhaps it's necessary to create a softlink for iptables libraries where iptables looks for them </para><screen>
<![CDATA[# ln -s /lib/iptables/ /usr/lib/iptables 
]]></screen></sect2></sect1><sect1>
<title>Usage of ip6tables</title>
<sect2>
<title>Check for support</title>
<para>Load module, if so compiled </para><screen>
<![CDATA[# modprobe ip6_tables 
]]></screen><para>Check for capability </para><screen>
<![CDATA[# [ ! -f /proc/net/ip6_tables_names ] && echo "Current kernel doesn't support
¬ 'ip6tables' firewalling (IPv6)!" 
]]></screen></sect2><sect2>
<title>Learn how to use ip6tables</title>
<sect3>
<title>List all IPv6 netfilter entries </title>
<itemizedlist>
<listitem><para>Short </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -L 
]]></screen><itemizedlist>
<listitem><para>Extended </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -n -v --line-numbers -L 
]]></screen></sect3><sect3>
<title>List specified filter </title>
<screen>
<![CDATA[# ip6tables -n -v --line-numbers -L INPUT 
]]></screen></sect3><sect3>
<title>Insert a log rule at the input filter with options </title>
<screen>
<![CDATA[# ip6tables --table filter --append INPUT  -j LOG --log-prefix "INPUT:"
¬ --log-level 7 
]]></screen></sect3><sect3>
<title>Insert a drop rule at the input filter </title>
<screen>
<![CDATA[# ip6tables --table filter --append INPUT  -j DROP 
]]></screen></sect3><sect3>
<title>Delete a rule by number </title>
<screen>
<![CDATA[# ip6tables --table filter --delete INPUT 1 
]]></screen></sect3><sect3>
<title>Enable connection tracking</title>
<para>Since kernel version 2.6.20 IPv6 connection tracking is well supported and should be used instead of using stateless filter rules.</para><screen>
<![CDATA[# ip6tables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
]]></screen></sect3><sect3>
<title>Allow ICMPv6</title>
<para>Using older kernels (unpatched kernel 2.4.5 and iptables-1.2.2) no type can be specified</para><itemizedlist>
<listitem><para>Accept incoming ICMPv6 through tunnels </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -A INPUT -i sit+ -p icmpv6 -j ACCEPT 
]]></screen><itemizedlist>
<listitem><para>Allow outgoing ICMPv6 through tunnels </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -A OUTPUT -o sit+ -p icmpv6 -j ACCEPT 
]]></screen><para>Newer kernels allow specifying of ICMPv6 types:</para><screen>
<![CDATA[# ip6tables -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT
]]></screen></sect3><sect3>
<title>Rate-limiting</title>
<para>Because it can happen (author already saw it to times) that an ICMPv6 storm will raise up, you should use available rate limiting for at least ICMPv6 ruleset. In addition logging rules should also get rate limiting to prevent DoS attacks against syslog and storage of log file partition. An example for a rate limited ICMPv6 looks like:</para><screen>
<![CDATA[# ip6tables -A INPUT --protocol icmpv6 --icmpv6-type echo-request
¬ -j ACCEPT --match limit --limit 30/minute
]]></screen></sect3><sect3>
<title>Allow incoming SSH</title>
<para>Here an example is shown for a ruleset which allows incoming SSH connection from a specified IPv6 address </para><itemizedlist>
<listitem><para>Allow incoming SSH from 2001:0db8:100::1/128 </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -A INPUT -i sit+ -p tcp -s 2001:0db8:100::1/128 --sport 512:65535
¬ --dport 22 -j ACCEPT 
]]></screen><itemizedlist>
<listitem><para>Allow response packets (no longer needed if connection tracking is used!) </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -A OUTPUT -o sit+ -p tcp -d 2001:0db8:100::1/128 --dport 512:65535
¬ --sport 22 ! --syn -j ACCEPT 
]]></screen></sect3><sect3>
<title>Enable tunneled IPv6-in-IPv4</title>
<para>To accept tunneled IPv6-in-IPv4 packets, you have to insert rules in your IPv4 firewall setup relating to such packets, for example </para><itemizedlist>
<listitem><para>Accept incoming IPv6-in-IPv4 on interface ppp0 </para></listitem></itemizedlist><screen>
<![CDATA[# iptables -A INPUT -i ppp0 -p ipv6 -j ACCEPT 
]]></screen><itemizedlist>
<listitem><para>Allow outgoing IPv6-in-IPv4 to interface ppp0 </para></listitem></itemizedlist><screen>
<![CDATA[# iptables -A OUTPUT -o ppp0 -p ipv6 -j ACCEPT 
]]></screen><para>If you have only a static tunnel, you can specify the IPv4 addresses, too, like </para><itemizedlist>
<listitem><para>Accept incoming IPv6-in-IPv4 on interface ppp0 from tunnel endpoint 192.0.2.2</para></listitem></itemizedlist><screen>
<![CDATA[# iptables -A INPUT -i ppp0 -p ipv6 -s 192.0.2.2 -j ACCEPT 
]]></screen><itemizedlist>
<listitem><para>Allow outgoing IPv6-in-IPv4 to interface ppp0 to tunnel endpoint 192.0.2.2</para></listitem></itemizedlist><screen>
<![CDATA[# iptables -A OUTPUT -o ppp0 -p ipv6 -d 192.0.2.2 -j ACCEPT 
]]></screen></sect3><sect3>
<title>Protection against incoming TCP connection requests</title>
<para>VERY RECOMMENDED! For security issues you should really insert a rule which blocks incoming TCP connection requests. Adapt "-i" option, if other interface names are in use! </para><itemizedlist>
<listitem><para>Block incoming TCP connection requests to this host </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -I INPUT -i sit+ -p tcp --syn -j DROP 
]]></screen><itemizedlist>
<listitem><para>Block incoming TCP connection requests to hosts behind this router </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -I FORWARD -i sit+ -p tcp --syn -j DROP 
]]></screen><para>Perhaps the rules have to be placed below others, but that is work you have to think about it. Best way is to create a script and execute rules in a specified way. </para></sect3><sect3>
<title>Protection against incoming UDP connection requests</title>
<para>ALSO RECOMMENDED! Like mentioned on my firewall information it's possible to control the ports on outgoing UDP/TCP sessions. So if all of your local IPv6 systems are using local ports e.g. from 32768 to 60999 you are able to filter UDP connections also (until connection tracking works) like: </para><itemizedlist>
<listitem><para>Block incoming UDP packets which cannot be responses of outgoing requests of this host </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -I INPUT -i sit+ -p udp ! --dport 32768:60999 -j DROP 
]]></screen><itemizedlist>
<listitem><para>Block incoming UDP packets which cannot be responses of forwarded requests of hosts behind this router </para></listitem></itemizedlist><screen>
<![CDATA[# ip6tables -I FORWARD -i sit+ -p udp ! --dport 32768:60999 -j DROP 
]]></screen></sect3></sect2><sect2>
<title>Examples</title>
<sect3>
<title>Simple example for Fedora</title>
<para>Following lines show a simple firewall configuration for Fedora 6 (since kernel version 2.6.20). It was modfied from the default one (generated by system-config-firewall) for supporting connection tracking and return the proper ICMPv6 code for rejects. Incoming SSH (port 22) connections are allowed.</para><screen>
<![CDATA[File: /etc/sysconfig/ip6tables

*filter :INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:RH-Firewall-1-INPUT - [0:0]
-A INPUT -j RH-Firewall-1-INPUT
-A FORWARD -j RH-Firewall-1-INPUT
-A RH-Firewall-1-INPUT -i lo -j ACCEPT
-A RH-Firewall-1-INPUT -p icmpv6 -j ACCEPT
-A RH-Firewall-1-INPUT -p 50 -j ACCEPT
-A RH-Firewall-1-INPUT -p 51 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp --dport 5353 -d ff02::fb -j ACCEPT
-A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT 
-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 631 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT
-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp6-adm-prohibited
COMMIT 
]]></screen><para>For completeness also the IPv4 configuration is shown here:</para><screen>
<![CDATA[File: /etc/sysconfig/iptables

*filter :INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:RH-Firewall-1-INPUT - [0:0]
-A INPUT -j RH-Firewall-1-INPUT
-A FORWARD -j RH-Firewall-1-INPUT
-A RH-Firewall-1-INPUT -i lo -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type any -j ACCEPT
-A RH-Firewall-1-INPUT -p 50 -j ACCEPT
-A RH-Firewall-1-INPUT -p 51 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp --dport 5353 -d 224.0.0.251 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT
-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 631 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited
COMMIT 
]]></screen><para>Usage:</para><itemizedlist>
<listitem><para>Create/modify the configuration files</para></listitem><listitem><para>Activate IPv4 &amp; IPv6 firewalling</para></listitem></itemizedlist><screen>
<![CDATA[# service iptables start
# service ip6tables start
]]></screen><itemizedlist>
<listitem><para>Enable automatic start after reboot</para></listitem></itemizedlist><screen>
<![CDATA[# chkconfig iptables on
# chkconfig ip6tables on
]]></screen></sect3><sect3>
<title>Sophisticated example</title>
<para>Following lines show a more sophisticated but still stateless filter setup as an example. Happy netfilter6 ruleset creation.... </para><screen>
<![CDATA[# ip6tables -n -v -L 
Chain INPUT (policy DROP 0 packets, 0 bytes) 
 pkts bytes target     prot opt in     out     source               destination
    0     0 extIN      all      sit+   *       ::/0                 ::/0 
    4   384 intIN      all      eth0   *       ::/0                 ::/0 
    0     0 ACCEPT     all      *      *       ::1/128              ::1/128 
    0     0 ACCEPT     all      lo     *       ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `INPUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain FORWARD (policy DROP 0 packets, 0 bytes) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 int2ext    all      eth0   sit+    ::/0                 ::/0 
    0     0 ext2int    all      sit+   eth0    ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `FORWARD-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain OUTPUT (policy DROP 0 packets, 0 bytes) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 extOUT     all      *      sit+    ::/0                 ::/0 
    4   384 intOUT     all      *      eth0    ::/0                 ::/0 
    0     0 ACCEPT     all      *      *       ::1/128              ::1/128 
    0     0 ACCEPT     all      *      lo      ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `OUTPUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain ext2int (1 references) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0       
¬        tcp spts:1:65535 dpts:1024:65535 flags:!0x16/0x02 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `ext2int-default:' 
    0     0 DROP       tcp      *      *       ::/0                 ::/0 
    0     0 DROP       udp      *      *       ::/0                 ::/0 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain extIN (1 references) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 ACCEPT     tcp      *      *       3ffe:400:100::1/128  ::/0       
¬        tcp spts:512:65535 dpt:22 
    0     0 ACCEPT     tcp      *      *       3ffe:400:100::2/128  ::/0       
¬        tcp spts:512:65535 dpt:22 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0       
¬        tcp spts:1:65535 dpts:1024:65535 flags:!0x16/0x02 
    0     0 ACCEPT     udp      *      *       ::/0                 ::/0       
¬        udp spts:1:65535 dpts:1024:65535 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        limit: avg 5/min burst 5 LOG flags 0 level 7 prefix `extIN-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain extOUT (1 references) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 ACCEPT     tcp      *      *       ::/0                
¬ 2001:0db8:100::1/128tcp spt:22 dpts:512:65535 flags:!0x16/0x02 
    0     0 ACCEPT     tcp      *      *       ::/0                
¬ 2001:0db8:100::2/128tcp spt:22 dpts:512:65535 flags:!0x16/0x02 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0       
¬        tcp spts:1024:65535 dpts:1:65535 
    0     0 ACCEPT     udp      *      *       ::/0                 ::/0       
¬        udp spts:1024:65535 dpts:1:65535 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `extOUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain int2ext (1 references) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0       
¬        tcp spts:1024:65535 dpts:1:65535 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `int2ext:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `int2ext-default:' 
    0     0 DROP       tcp      *      *       ::/0                 ::/0 
    0     0 DROP       udp      *      *       ::/0                 ::/0 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain intIN (1 references) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 ACCEPT     all      *      *       ::/0                
¬ fe80::/ffc0:: 
    4   384 ACCEPT     all      *      *       ::/0                 ff02::/16 
 
Chain intOUT (1 references) 
 pkts bytes target     prot opt in     out     source               destination
¬ 
    0     0 ACCEPT     all      *      *       ::/0                
¬ fe80::/ffc0:: 
    4   384 ACCEPT     all      *      *       ::/0                 ff02::/16 
    0     0 LOG        all      *      *       ::/0                 ::/0       
¬        LOG flags 0 level 7 prefix `intOUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
]]></screen></sect3></sect2></sect1><sect1 id='nat-netfilter6.' >
<title><!-- anchor id="nat-netfilter6." -->Network Address Translation (NAT) using netfilter6 </title>
<para>Since at least Linux kernel version 3.9.0 and using ip6tables since 1.4.18 also Network Address Translation (NAT) is usable.</para><sect2>
<title>IPv6 Masquerading</title>
<para>Like in IPv4 clients behind a router can be hided by using IPv6 masquerading (hide/overlap NAT), e.g.</para><screen>
<![CDATA[# ip6tables -t nat -A POSTROUTING -o sixxs -s fec0::/64 -j MASQUERADE
]]></screen></sect2><sect2>
<title>IPv6 Destination NAT</title>
<para>A dedicated public IPv6 address can be forwarded to an internal IPv6 address, e.g.</para><screen>
<![CDATA[# ip6tables -t nat -A PREROUTING -d 2001:db8:0:1:5054:ff:fe01:2345 -i sixxs -j DNAT --to-destination fec0::5054:ff:fe01:2345
]]></screen></sect2><sect2>
<title>IPv6 Port Forwarding</title>
<para>A dedicated specified port can be forwarded to an internal system, e.g.</para><screen>
<![CDATA[# ip6tables -t nat -A PREROUTING -i sixxs -p tcp --dport 8080 -j DNAT --to-destination [fec0::1234]:80
]]></screen></sect2></sect1><sect1>
<title>Firewalling using nftables</title>
<para>nftables adds in addition to protocol specific tables &rdquo;ip&rdquo; (IPv4) and &rdquo;ip6&rdquo; (IPv6) support for a IPv4/IPv6 aware table named &rdquo;inet&rdquo;. Using this table it's possible to add only one rule and match both protocols (in case of UDP and TCP).</para>
<para>Take care if rules are contained in more than one table, because the tables are checked in sequence:</para><screen>
<![CDATA[IPv4-Packet --> table "ip"  --> table "inet" --> further checks
IPv6-Packet --> table "ip6" --> table "inet" --> further checks
]]></screen><para>If table &rdquo;ip6&rdquo; accepts the packet, also table &rdquo;inet&rdquo; must accept the packet, otherwise it can be dropped by a later drop rule.</para><sect2>
<title>Preparation for nftables usage</title>
<para>Install a Linux distribution which has nftables support already included. At time of writing (May 2014) at least Fedora Rawhide (upcoming version 21) has support in conjunction with nftables version 0.2.0.</para></sect2><sect2>
<title>Basic nftables configuration</title>
<para>Load kernel modules:</para><screen>
<![CDATA[# modprobe nf_tables
# modprobe nf_tables_ipv4
# modprobe nf_tables_ipv6
# modprobe nf_tables_inet 
]]></screen><para>Flush iptables and ip6tables to avoid interferences:</para><screen>
<![CDATA[# iptables -F
# ip6tables -F
]]></screen><para>Create filter table:</para><screen>
<![CDATA[# nft add table inet filter 
]]></screen><para>Create input chain:</para><screen>
<![CDATA[# nft add chain inet filter input { type filter hook input priority 0 \; }
]]></screen></sect2><sect2>
<title>Simple filter policy with nftables using only table &rdquo;inet&rdquo;</title>
<sect3>
<title>Configuration</title>
<para>Allow packets which are related to existing connection tracking entries</para><screen>
<![CDATA[# nft add rule inet filter input ct state established,related counter accept
]]></screen><para>Allow IPv4 and IPv6 ICMP echo-request (aka ping)</para><screen>
<![CDATA[# nft add rule inet filter input meta nfproto ipv4 icmp type { echo-request } counter accept
# nft add rule inet filter input meta nfproto ipv6 icmpv6 type echo-request counter accept 
]]></screen><para>Allow some important IPv6 ICMP traffic, without counter, but checking hop-limit for security</para><screen>
<![CDATA[# nft add rule inet filter input meta nfproto ipv6
¬  icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert} ip6 hoplimit 1 accept
# nft add rule inet filter input meta nfproto ipv6
¬  icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert} ip6 hoplimit 255 counter accept
]]></screen><para>Allow incoming SSH for IPv4 and IPv6</para><screen>
<![CDATA[# nft add rule inet filter input tcp dport 22 ct state new tcp flags \& \(syn \| ack\) == syn counter accept
]]></screen><para>Reject/drop others</para><screen>
<![CDATA[# nft add rule inet filter input tcp dport 0-65535 reject
# nft add rule inet filter input udp dport 0-65535 counter drop
# nft add rule inet filter input counter drop
]]></screen></sect3><sect3>
<title>Result</title>
<para>Table for IP version aware filter</para><screen>
<![CDATA[table inet filter {
	chain input {
		 type filter hook input priority 0;
		 ct state established,related counter packets 0 bytes 0 accept
		 ip protocol icmp icmp type { echo-request} counter packets 0 bytes 0 accept
		 ip6 nexthdr ipv6-icmp icmpv6 type echo-request counter packets 0 bytes 0 accept
		 ip6 nexthdr ipv6-icmp ip6 hoplimit 1 icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert} accept
		 ip6 nexthdr ipv6-icmp ip6 hoplimit 255 icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert} accept
		 tcp dport ssh ct state new tcp flags & (syn | ack) == syn counter packets 0 bytes 0 accept
		 tcp dport >= 0 tcp dport <= 65535 counter packets 0 bytes 0 reject
		 udp dport >= 0 udp dport <= 65535 counter packets 0 bytes 0 drop
		 log prefix counter packets 0 bytes 0 drop
	}
}
]]></screen></sect3><sect3>
<title>Hints for logging</title>
<para>To enable logging, an additonal kernel module must be loaded</para><screen>
<![CDATA[# modprobe xt_LOG
]]></screen><para>BUT TAKE CARE, IT LOOKS LIKE THAT NO LOG LEVEL CAN BE SPEFICIED CURRENTLY IN nftables, resulting that events are logged with kern.emerg - POSSIBILITY OF FLODDING THE CONSOLE WITH LOG ENTRIES!</para>
<para>Fir initial test with logging it can be useful to disable kernel console logging in e.g. /etc/rsyslog.conf by putting a &rdquo;#&rdquo; in front of the related entry and restart logging daemon</para><screen>
<![CDATA[#*.emerg    :omusrmsg:* 
]]></screen><para>Rule from above accepting SSH on port 22, but now with logging:</para><screen>
<![CDATA[# nft add rule inet filter input tcp dport 22 ct state new tcp flags \& \(syn \| ack\) == syn log prefix \"inet/input/accept: \" counter accept
]]></screen></sect3></sect2><sect2>
<title>Filter policy with nftables using tables &rdquo;ip&rdquo;, &rdquo;ip6&rdquo; and &rdquo;inet&rdquo;</title>
<para>As written above, if rules should be stored in related tables, it must be assured that earlier accepts are not discarded in the further table. This can be done using &rdquo;meta mark set xxxx&rdquo; on every accept rule and generic rules which accepts packets with &rdquo;mark xxxx&rdquo;. A resulting filter set would look like the following:</para><screen>
<![CDATA[# for table in ip ip6 inet; do nft list table $table filter; done
table ip filter {
	chain input {
		 type filter hook input priority 0;
		 ct state established,related counter packets 241 bytes 25193 accept
		 counter packets 2 bytes 120 mark 0x00000100 accept
		 icmp type { echo-request} counter packets 0 bytes 0 meta mark set 0x00000100 accept
	}
}
table ip6 filter {
	chain input {
		 type filter hook input priority 0;
		 ct state established,related counter packets 14 bytes 4077 accept
		 counter packets 4 bytes 408 mark 0x00000100 accept
		 icmpv6 type echo-request counter packets 1 bytes 104 meta mark set 0x00000100
		 icmpv6 type { nd-neighbor-advert, nd-neighbor-solicit, nd-router-advert} counter packets 2 bytes 224 meta mark set 0x00000100 accept
	}
}
table inet filter {
	chain input {
		 type filter hook input priority 0;
		 ct state established,related counter packets 307 bytes 31974 accept
		 counter packets 6 bytes 528 mark 0x00000100 accept
		 tcp dport ssh ct state new tcp flags & (syn | ack) == syn log prefix "inet/input/accept: " meta mark set 0x00000100 counter packets 3 bytes 200 accept
		 log prefix "inet/input/reject: " counter packets 0 bytes 0 reject
	}
}
]]></screen></sect2></sect1></chapter><chapter id='chapter-security' >
<title><!-- anchor id="chapter-security" -->Security</title>
<sect1>
<title>Node security</title>
<para>It's very recommended to apply all available patches and disable all not necessary services. Also bind services to the needed IPv4/IPv6 addresses only and install local firewalling.</para>
<para>More to be filled...</para></sect1><sect1>
<title>Access limitations</title>
<para>Many services uses the tcp_wrapper library for access control. Below is described the <link linkend="hints-daemons-tcpwrapper">use of tcp_wrapper</link>.</para>
<para>More to be filled...</para></sect1><sect1 id='IPv6-security-auditing' >
<title><!-- anchor id="IPv6-security-auditing" -->IPv6 security auditing</title>
<para>Currently there are no comfortable tools out which are able to check a system over network for IPv6 security issues. Neither <ulink url="http://www.nessus.org/">Nessus</ulink> nor any commercial security scanner is as far as I know able to scan IPv6 addresses.</para><sect2>
<title>Legal issues</title>
<para>ATTENTION: always take care that you only scan your own systems or after receiving a written order, otherwise legal issues are able to come up to you.
CHECK destination IPv6 addresses TWICE before starting a scan.</para></sect2><sect2>
<title>Security auditing using IPv6-enabled netcat</title>
<para>With the IPv6-enabled netcat (see <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#security-auditing">IPv6+Linux-status-apps/security-auditing</ulink> for more) you can run a portscan by wrapping a script around which run through a port range, grab banners and so on. Usage example:</para><screen>
<![CDATA[# nc6 ::1 daytime
13 JUL 2002 11:22:22 CEST
]]></screen></sect2><sect2>
<title>Security auditing using IPv6-enabled nmap</title>
<para><ulink url="http://www.insecure.org/nmap/">NMap</ulink>, one of the best portscaner around the world, supports IPv6 since version 3.10ALPHA1. Usage example:</para><screen>
<![CDATA[# nmap -6 -sT ::1
Starting nmap V. 3.10ALPHA3 ( www.insecure.org/nmap/ ) 
Interesting ports on localhost6 (::1): 
(The 1600 ports scanned but not shown below are in state: closed) 
Port       State       Service 
22/tcp     open        ssh 
53/tcp     open        domain 
515/tcp    open        printer 
2401/tcp   open        cvspserver
Nmap run completed -- 1 IP address (1 host up) scanned in 0.525 seconds
]]></screen></sect2><sect2>
<title>Security auditing using IPv6-enabled strobe</title>
<para>Strobe is a (compared to NMap) more a low budget portscanner, but there is an IPv6-enabling patch available (see <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#security-auditing">IPv6+Linux-status-apps/security-auditing</ulink> for more). Usage example:</para><screen>
<![CDATA[# ./strobe ::1 strobe 1.05 (c) 1995-1999 Julian Assange <proff@iq.org>.
::1 2401 unassigned unknown
::1 22 ssh Secure Shell - RSA encrypted rsh 
::1 515 printer spooler (lpd)
::1 6010 unassigned unknown 
::1 53 domain Domain Name Server
]]></screen><para>Note: strobe isn't really developed further on, the shown version number isn't the right one.</para></sect2><sect2>
<title>Security auditing using online tools</title>
<para>There are some IPv6 enabled online tools available which can support in testing inbound firewall configuration:</para><itemizedlist>
<listitem><para><ulink url="http://ipv6.chappell-family.com/ipv6tcptest/">Tim's Online IPv6 TCP/UDP Port Scanner</ulink></para></listitem><listitem><para><ulink url="http://www.subnetonline.com/pages/ipv6-network-tools/online-ipv6-port-scanner.php">SubnetOnline IPv6 Scanner</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>Audit results</title>
<para>If the result of an audit mismatch your IPv6 security policy, use IPv6 firewalling to close the holes, e.g. using netfilter6 (see <link linkend="firewalling-netfilter6.">Firewalling/Netfilter6</link> for more).</para>
<para>Info: More detailed information concerning IPv6 Security can be found here: </para><itemizedlist>
<listitem><para><ulink url="http://www.ietf.org/ids.by.wg/v6ops.html">IETF drafts - IPv6 Operations (v6ops)</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3964.html">RFC 3964 / Security Considerations for 6to4</ulink></para></listitem></itemizedlist></sect2></sect1></chapter><chapter id='chapter-encryption-authentication' >
<title><!-- anchor id="chapter-encryption-authentication" -->Encryption and Authentication</title>
<para>Unlike in IPv4, encryption and authentication is a mandatory feature of IPv6. Those features are normally implemented using IPsec (which can be also used by IPv4).</para><sect1>
<title>Modes of using encryption and authentication</title>
<para>Two modes of encryption and authentication of a connection are possible:</para><sect2>
<title>Transport mode</title>
<para>Transport mode is a real end-to-end connection mode. Here, only the payload (usually ICMP, TCP or UDP) is encrypted with their particular header, while the IP header is not encrypted (but usually included in authentication).</para>
<para>Using AES-128 for encryption and SHA1 for authentication, this mode decreases the MTU by 42 octets.</para></sect2><sect2>
<title>Tunnel mode</title>
<para>Tunnel mode can be used either for end-to-end or for gateway-to-gateway connection modes. Here, the complete IP packet is being encrypted and gets a new IP header prepended, all together constituing a new IP packet (this mechanism is also known as "encapsulation")</para>
<para>This mode usually decreases the MTU by 40 octets from the MTU of transport mode. I.e. using AES-128 for encryption and SHA1 for authentication 82 octets less than the normal MTU.</para></sect2></sect1><sect1>
<title>Support in kernel (ESP and AH)</title>
<sect2>
<title>Support in vanilla Linux kernel 2.4.x</title>
<para>At the time of writing missing in vanilla up to 2.4.28. There was an issue about keeping the Linux kernel source free of export/import-control-laws regarding encryption code. This is also one case why <ulink url="http://www.freeswan.org/">FreeS/WAN project</ulink> wasn't included in vanilla source. Perhaps a backport from 2.6.x will be done in the future.</para></sect2><sect2>
<title>Support in vanilla Linux kernel 2.6.x</title>
<para>Current versions (as time of writing 2.6.9 and upper) support native IPsec for IPv4 and IPv6.</para>
<para>Implementation was helped by the USAGI project.</para></sect2></sect1><sect1>
<title>Automatic key exchange (IKE)</title>
<para>IPsec requires a key exchange of a secret. This is mostly done automatically by so called IKE daemons. They also handle the authentication of the peers, either by a common known secret (so called &rdquo;pre-shared secret&rdquo;) or by RSA keys (which can also be used from X.509 certificates).</para>
<para>Currently, two different IKE daemons are available for Linux, which totally differ in configuration and usage.</para>
<para>I prefer &rdquo;pluto&rdquo; from the *S/WAN implementation because of the easier and one-config-only setup.</para><sect2>
<title>IKE daemon &rdquo;racoon&rdquo;</title>
<para>The IKE daemon &rdquo;racoon&rdquo; is taken from the KAME project and ported to Linux. Modern Linux distributions contain this daemon in the package &rdquo;ipsec-tools&rdquo;. Two executables are required for a proper IPsec setup. Take a look on <ulink url="http://lartc.org/howto/lartc.ipsec.html">Linux Advanced Routing &amp; Traffic Control HOWTO / IPSEC</ulink>, too.</para><sect3>
<title>Manipulation of the IPsec SA/SP database with the tool &rdquo;setkey&rdquo;</title>
<para>&rdquo;setkey&rdquo; is important to define the security policy (SP) for the kernel.</para>
<para>File: /etc/racoon/setkey.sh</para><itemizedlist>
<listitem><para>Example for an end-to-end encrypted connection in transport mode</para></listitem></itemizedlist><screen>
<![CDATA[#!/sbin/setkey -f
flush;
spdflush;
spdadd 2001:db8:1:1::1 2001:db8:2:2::2 any -P out ipsec esp/transport//require;
spdadd 2001:db8:2:2::2 2001:db8:1:1::1 any -P in  ipsec esp/transport//require;

]]></screen><itemizedlist>
<listitem><para>Example for a end-to-end encrypted connection in tunnel mode</para></listitem></itemizedlist><screen>
<![CDATA[#!/sbin/setkey -f
flush;
spdflush;
spdadd 2001:db8:1:1::1 2001:db8:2:2::2 any -P out ipsec
¬ esp/tunnel/2001:db8:1:1::1-2001:db8:2:2::2/require;
spdadd 2001:db8:2:2::2 2001:db8:1:1::1 any -P in  ipsec
¬ esp/tunnel/2001:db8:2:2::2-2001:db8:1:1::1/require;
]]></screen><para>For the other peer, you have to replace &rdquo;in&rdquo; with &rdquo;out&rdquo;.</para></sect3><sect3>
<title>Configuration of the IKE daemon &rdquo;racoon&rdquo;</title>
<para>&rdquo;racoon&rdquo; requires a configuration file for proper execution. It includes the related settings to the security policy, which should be set up previously using &rdquo;setkey&rdquo;.</para>
<para>File: /etc/racoon/racoon.conf</para><screen>
<![CDATA[# Racoon IKE daemon configuration file.
# See 'man racoon.conf' for a description of the format and entries.
path include "/etc/racoon";
path pre_shared_key "/etc/racoon/psk.txt";

listen
{
        isakmp 2001:db8:1:1::1;
}

remote 2001:db8:2:2::2
{
        exchange_mode main;
        lifetime time 24 hour;
        proposal
        {
                encryption_algorithm 3des;
                hash_algorithm md5;
                authentication_method pre_shared_key;
                dh_group 2;
        }
}

# gateway-to-gateway
sainfo address 2001:db8:1:1::1 any address 2001:db8:2:2::2 any
{
        lifetime time 1 hour;
        encryption_algorithm 3des;
        authentication_algorithm hmac_md5;
        compression_algorithm deflate;
}

sainfo address 2001:db8:2:2::2 any address 2001:db8:1:1::1 any
{
        lifetime time 1 hour;
        encryption_algorithm 3des;
        authentication_algorithm hmac_md5;
        compression_algorithm deflate;
} 
]]></screen><para>Also set up the pre-shared secret:</para>
<para>File: /etc/racoon/psk.txt</para><screen>
<![CDATA[# file for pre-shared keys used for IKE authentication
# format is: 'identifier' 'key'

2001:db8:2:2::2 verysecret 
]]></screen></sect3><sect3>
<title>Running IPsec with IKE daemon &rdquo;racoon&rdquo;</title>
<para>At least the daemon needs to be started. For the first time, use debug and foreground mode. The following example shows a successful IKE phase 1 (ISAKMP-SA) and 2 (IPsec-SA) negotiation:</para><screen>
<![CDATA[# racoon -F -v -f /etc/racoon/racoon.conf
Foreground mode. 
2005-01-01 20:30:15: INFO: @(#)ipsec-tools 0.3.3
¬ (http://ipsec-tools.sourceforge.net)
2005-01-01 20:30:15: INFO: @(#)This product linked
¬ OpenSSL 0.9.7a Feb 19 2003 (http://www.openssl.org/)
2005-01-01 20:30:15: INFO: 2001:db8:1:1::1[500] used as isakmp port (fd=7)
2005-01-01 20:31:06: INFO: IPsec-SA request for 2001:db8:2:2::2
¬ queued due to no phase1 found.
2005-01-01 20:31:06: INFO: initiate new phase 1 negotiation:
¬ 2001:db8:1:1::1[500]<=>2001:db8:2:2::2[500]
2005-01-01 20:31:06: INFO: begin Identity Protection mode.
2005-01-01 20:31:09: INFO: ISAKMP-SA established
¬ 2001:db8:1:1::1[500]-2001:db8:2:2::2[500] spi:da3d3693289c9698:ac039a402b2db401
2005-01-01 20:31:09: INFO: initiate new phase 2 negotiation:
¬ 2001:6f8:900:94::2[0]<=>2001:db8:2:2::2[0]
2005-01-01 20:31:10: INFO: IPsec-SA established:
¬ ESP/Tunnel 2001:db8:2:2::2->2001:db8:1:1::1 spi=253935531(0xf22bfab) 
2005-01-01 20:31:10: INFO: IPsec-SA established:
¬ ESP/Tunnel 2001:db8:1:1::1->2001:db8:2:2::2 spi=175002564(0xa6e53c4) 
]]></screen><para>Each direction got its own IPsec-SA (like defined in the IPsec standard). With &rdquo;tcpdump&rdquo; on the related interface, you will see as result of an IPv6 ping:</para><screen>
<![CDATA[20:35:55.305707 2001:db8:1:1::1 > 2001:db8:2:2::2: ESP(spi=0x0a6e53c4,seq=0x3)
20:35:55.537522 2001:db8:2:2::2 > 2001:db8:1:1::1: ESP(spi=0x0f22bfab,seq=0x3)
]]></screen><para>As expected, the negotiated SPIs are being used here.</para>
<para>And using &rdquo;setkey&rdquo;, current active parameters are shown:</para><screen>
<![CDATA[# setkey -D
2001:db8:1:1::1 2001:db8:2:2::2
        esp mode=tunnel spi=175002564(0x0a6e53c4) reqid=0(0x00000000)
        E: 3des-cbc  bd26bc45 aea0d249 ef9c6b89 7056080f 5d9fa49c 924e2edd
        A: hmac-md5  60c2c505 517dd8b7 c9609128 a5efc2db
        seq=0x00000000 replay=4 flags=0x00000000 state=mature
        created: Jan  1 20:31:10 2005   current: Jan  1 20:40:47 2005
        diff: 577(s)    hard: 3600(s)   soft: 2880(s)
        last: Jan  1 20:35:05 2005      hard: 0(s)      soft: 0(s)
        current: 540(bytes)     hard: 0(bytes)  soft: 0(bytes)
        allocated: 3    hard: 0 soft: 0
        sadb_seq=1 pid=22358 refcnt=0
2001:db8:2:2::2 2001:db8:1:1::1
        esp mode=tunnel spi=253935531(0x0f22bfab) reqid=0(0x00000000)
        E: 3des-cbc  c1ddba65 83debd62 3f6683c1 20e747ac 933d203f 4777a7ce
        A: hmac-md5  3f957db9 9adddc8c 44e5739d 3f53ca0e
        seq=0x00000000 replay=4 flags=0x00000000 state=mature
        created: Jan  1 20:31:10 2005   current: Jan  1 20:40:47 2005
        diff: 577(s)    hard: 3600(s)   soft: 2880(s)
        last: Jan  1 20:35:05 2005      hard: 0(s)      soft: 0(s)
        current: 312(bytes)     hard: 0(bytes)  soft: 0(bytes)
        allocated: 3    hard: 0 soft: 0
        sadb_seq=0 pid=22358 refcnt=0 
]]></screen></sect3></sect2><sect2>
<title>IKE daemon &rdquo;pluto&rdquo;</title>
<para>The IKE daemon &rdquo;pluto&rdquo; is included in distributions of the *S/WAN projects. *S/WAN project starts at the beginning as <ulink url="http://www.freeswan.org/">FreeS/WAN</ulink>. Unfortunately, the FreeS/WAN project stopped further development in 2004. Because of the slow pace of development in the past, two spin-offs started: <ulink url="http://www.strongswan.org/">strongSwan</ulink> and <ulink url="http://www.openswan.org/">Openswan</ulink>. Today, readily installable packages are available for at least Openswan (included in Fedora Core 3).</para>
<para>A major difference to &rdquo;racoon&rdquo;, only one configuration file is required. Also, an initscript exists for automatic setup after booting.</para><sect3>
<title>Configuration of the IKE daemon &rdquo;pluto&rdquo;</title>
<para>The configuration is very similar to the IPv4 one, only one important option is necessary.</para>
<para>File: /etc/ipsec.conf</para><screen>
<![CDATA[# /etc/ipsec.conf - Openswan IPsec configuration file
#
# Manual:     ipsec.conf.5
version 2.0     # conforms to second version of ipsec.conf specification

# basic configuration
config setup
        # Debug-logging controls:  "none" for (almost) none, "all" for lots.
        # klipsdebug=none
        # plutodebug="control parsing"

#Disable Opportunistic Encryption
include /etc/ipsec.d/examples/no_oe.conf

conn ipv6-p1-p2
        connaddrfamily=ipv6       # Important for IPv6, but no longer needed since StrongSwan 4
        left=2001:db8:1:1::1
        right=2001:db8:2:2::2
        authby=secret
        esp=aes128-sha1
        ike=aes128-sha-modp1024
        type=transport
        #type=tunnel
        compress=no
        #compress=yes
        auto=add
        #auto=up

]]></screen><para>Don't forget to define the pre-shared secret here also.</para>
<para>File: /etc/ipsec.secrets</para><screen>
<![CDATA[2001:db8:1:1::1 2001:db8:2:2::2 : PSK      "verysecret"
]]></screen></sect3><sect3>
<title>Running IPsec with IKE daemon &rdquo;pluto&rdquo;</title>
<para>If installation of Openswan was successfully, an initscript should exist for starting IPsec, simply run (on each peer):</para><screen>
<![CDATA[# /etc/rc.d/init.d/ipsec start
]]></screen><para>Afterwards, start this connection on one peer. If you saw the line &rdquo;IPsec SA established&rdquo;, all worked fine.</para><screen>
<![CDATA[# ipsec auto --up ipv6-peer1-peer2
104 "ipv6-p1-p2" #1: STATE_MAIN_I1: initiate
106 "ipv6-p1-p2" #1: STATE_MAIN_I2: sent MI2, expecting MR2
108 "ipv6-p1-p2" #1: STATE_MAIN_I3: sent MI3, expecting MR3
004 "ipv6-p1-p2" #1: STATE_MAIN_I4: ISAKMP SA established
112 "ipv6-p1-p2" #2: STATE_QUICK_I1: initiate
004 "ipv6-p1-p2" #2: STATE_QUICK_I2: sent QI2,
¬ IPsec SA established {ESP=>0xa98b7710 <0xa51e1f22} 
]]></screen><para>Because *S/WAN and setkey/racoon do use the same IPsec implementation in Linux 2.6.x kernel, &rdquo;setkey&rdquo; can be used here too to show current active parameters:</para><screen>
<![CDATA[# setkey -D
2001:db8:1:1::1 2001:db8:2:2::2
        esp mode=transport spi=2844489488(0xa98b7710) reqid=16385(0x00004001)
        E: aes-cbc  082ee274 2744bae5 7451da37 1162b483
        A: hmac-sha1  b7803753 757417da 477b1c1a 64070455 ab79082c
        seq=0x00000000 replay=64 flags=0x00000000 state=mature
        created: Jan  1 21:16:32 2005   current: Jan  1 21:22:20 2005
        diff: 348(s)    hard: 0(s)      soft: 0(s)
        last:                           hard: 0(s)      soft: 0(s)
        current: 0(bytes)       hard: 0(bytes)  soft: 0(bytes)
        allocated: 0    hard: 0 soft: 0
        sadb_seq=1 pid=23825 refcnt=0
2001:db8:2:2::2 2001:db8:1:1::1
        esp mode=transport spi=2770214690(0xa51e1f22) reqid=16385(0x00004001)
        E: aes-cbc  6f59cc30 8d856056 65e07b76 552cac18
        A: hmac-sha1  c7c7d82b abfca8b1 5440021f e0c3b335 975b508b
        seq=0x00000000 replay=64 flags=0x00000000 state=mature
        created: Jan  1 21:16:31 2005   current: Jan  1 21:22:20 2005
        diff: 349(s)    hard: 0(s)      soft: 0(s)
        last:                           hard: 0(s)      soft: 0(s)
        current: 0(bytes)       hard: 0(bytes)  soft: 0(bytes)
        allocated: 0    hard: 0 soft: 0
        sadb_seq=0 pid=23825 refcnt=0 
]]></screen></sect3></sect2></sect1><sect1>
<title>Additional informations:</title>
<para>On Linux Kernel 2.6.x you can get the policy and status of IPsec also using &rdquo;ip&rdquo;:</para><screen>
<![CDATA[# ip xfrm policy
...

# ip xfrm state
...
]]></screen></sect1></chapter><chapter id='chapter-qos' >
<title><!-- anchor id="chapter-qos" -->Quality of Service (QoS)</title>
<para>IPv6 supports QoS with use of Flow Labels and Traffic Classes.</para>
<para>Additional infos:</para><itemizedlist>
<listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3697.html">RFC 3697 / IPv6 Flow Label Specification</ulink></para></listitem></itemizedlist><sect1>
<title>General</title>
<para>Proper working QoS is only possible on the outgoing interface of a router or host, where the bottleneck begins. Everything else is a hickup and not subject to work as expected or has a successful result.</para><screen>
<![CDATA[-------------->-------
           Queue 1    \
           --->---     ---->--------->--------->---------------
Big pipe   Queue 2      Queue 1 / Queue 2 / Queue 3   Thin Pipe
           --->----    ---->--------->--------->---------------
           Queue 3    /
-------------->-------
]]></screen></sect1><sect1>
<title>Linux QoS using &rdquo;tc&rdquo;</title>
<para>Linux is using &rdquo;tc&rdquo; from the &rdquo;iproute2&rdquo; package to configure traffic shaping, generally described in the <ulink url="http://lartc.org/">Linux Advanced Routing &amp; Traffic Control HOWTO</ulink>.</para><sect2>
<title>Example for a constant bitrate queuing</title>
<para>With the &rdquo;cbq&rdquo; scheduler, pipes with constant bit rates can be defined.</para><sect3>
<title>Root qdisc definition</title>
<para>Define root qdisc with a bandwidth of 1000 MBit/s on eth1</para><screen>
<![CDATA[# tc qdisc add dev eth1 root handle 1: cbq avpkt 1000 bandwidth 1000Mbit
]]></screen></sect3><sect3>
<title>QoS class definition</title>
<para>Define a class 1:1 with 1 MBit/s</para><screen>
<![CDATA[# tc class add dev eth1 parent 1: classid 1:1 cbq rate   1Mbit allot 1500 bounded 
]]></screen><para>Define a class 1:2 with 50 MBit/s</para><screen>
<![CDATA[# tc class add dev eth1 parent 1: classid 1:2 cbq rate  50Mbit allot 1500 bounded
]]></screen><para>Define a class 1:3 with 10 MBit/s</para><screen>
<![CDATA[# tc class add dev eth1 parent 1: classid 1:3 cbq rate  10Mbit allot 1500 bounded
]]></screen><para>Define a class 1:4 with 200 kBit/s</para><screen>
<![CDATA[# tc class add dev eth1 parent 1: classid 1:4 cbq rate 200kbit allot 1500 bounded
]]></screen></sect3><sect3>
<title>QoS filter definition</title>
<para>Define a filter for IPv4 (<emphasis>protocol ip</emphasis>), TCP (<emphasis>match ip protocol 6 0xff</emphasis>) destination port 5001 (<emphasis>match ip dport 5001 0xffff</emphasis>) using class 1:2 from above</para><screen>
<![CDATA[# tc filter add dev eth1 parent 1: protocol ip   u32 match ip  protocol 6 0xff match ip dport 5001 0xffff flowid 1:1
]]></screen><para>Define a filter for IPv6 (<emphasis>protocol ip</emphasis>), TCP (<emphasis>match ip6 protocol 6 0xff</emphasis>) destination port 5001 using class 1:2 from above</para><screen>
<![CDATA[# tc filter add dev eth1 parent 1: protocol ipv6 u32 match ip6 protocol 6 0xff match ip6 dport 5001 0xffff flowid 1:2
]]></screen><para>Define a filter for IPv6 for packets having flow label 12345 (<emphasis>match ip6 flowlabel 12345 0x3ffff</emphasis>) using class 1:3 from above</para><screen>
<![CDATA[# tc filter add dev eth1 parent 1: protocol ipv6 u32 match ip6 flowlabel 12345 0x3ffff flowid 1:3 
]]></screen><para>Define a filter for IPv6 for packets having Linux iptables mark 32 (<emphasis>handle 32 fw</emphasis>) specified using class 1:4 from above</para><screen>
<![CDATA[# tc filter add dev eth1 parent 1: protocol ipv6 handle 32 fw flowid 1:4
]]></screen><para>The last filter definition requires an entry in the ip6tables to mark a packet</para><screen>
<![CDATA[# ip6tables -A POSTROUTING -t mangle -p tcp --dport 5003 -j MARK --set-mark 32 
]]></screen></sect3><sect3>
<title>Testing filter definitions using iperf</title>
<para>Start on server side each one one separate console:</para><screen>
<![CDATA[# iperf -V -s -p 5001
# iperf -V -s -p 5002
# iperf -V -s -p 5003
]]></screen><para>Start on client side and compare results:</para><screen>
<![CDATA[# iperf -V -c SERVER-IPv4 -p 5001    (expected:      1 MBit/s)
# iperf -V -c SERVER-IPv6 -p 5001    (expected:     50 MBit/s)
# iperf -V -c SERVER-IPv4 -p 5002    (expected:  >> 50 MBit/s && <= 1000 MBit/s)
# iperf -V -c SERVER-IPv6 -p 5002    (expected:  >> 50 MBit/s && <= 1000 MBit/s)
# iperf -V -c SERVER-IPv4 -p 5003    (expected:  >> 50 MBit/s && <= 1000 MBit/s)
# iperf -V -c SERVER-IPv6 -p 5003    (expected:    200 kBit/s)
]]></screen><para>The rate result should be as defined in the classes (see above), the results on port 5002 should be very similar independend from used IP version.</para></sect3></sect2></sect1></chapter><chapter id='chapter-hints-daemons' >
<title><!-- anchor id="chapter-hints-daemons" -->Hints for IPv6-enabled daemons</title>
<para>Here some hints are shown for IPv6-enabled daemons.</para><sect1 id='hints-daemons-bind' >
<title><!-- anchor id="hints-daemons-bind" -->Berkeley Internet Name Domain (BIND) daemon &rdquo;named&rdquo;</title>
<para>IPv6 is supported since version 9. Always use newest available version. At least version 9.1.3 must be used, older versions can contain remote exploitable security holes.</para><sect2>
<title>Listening on IPv6 addresses</title>
<para>Note: unlike in IPv4 current versions doesn't allow to bind a server socket to dedicated IPv6 addresses, so only <emphasis>any</emphasis> or <emphasis>none</emphasis> are valid. Because this can be a security issue, check the Access Control List (ACL) section below, too!</para><sect3>
<title>Enable BIND named for listening on IPv6 address</title>
<para>To enable IPv6 for listening, following options are requested to change</para><screen>
<![CDATA[options {
        # sure other options here, too
        listen-on-v6 { any; };
};
]]></screen><para>This should result after restart in e.g.</para><screen>
<![CDATA[# netstat -lnptu |grep "named\W*$" 
tcp 0 0 :::53         :::*      LISTEN 1234/named
¬ # incoming TCP requests
udp 0 0 1.2.3.4:53    0.0.0.0:*        1234/named
¬ # incoming UDP requests to IPv4 1.2.3.4
udp 0 0 127.0.0.1:53  0.0.0.0:*        1234/named
¬ # incoming UDP requests to IPv4 localhost
udp 0 0 0.0.0.0:32868 0.0.0.0:*        1234/named
¬ # dynamic chosen port for outgoing queries
udp 0 0 :::53         :::*             1234/named
¬ # incoming UDP request to any IPv6
]]></screen><para>And a simple test looks like</para><screen>
<![CDATA[# dig localhost @::1
]]></screen><para>and should show you a result.</para></sect3><sect3>
<title>Disable BIND named for listening on IPv6 address</title>
<para>To disable IPv6 for listening, following options are requested to change</para><screen>
<![CDATA[options {
        # sure other options here, too
        listen-on-v6 { none; };
};
]]></screen></sect3></sect2><sect2>
<title>IPv6 enabled Access Control Lists (ACL)</title>
<para>IPv6 enabled ACLs are possible and should be used whenever it's possible. An example looks like following:</para><screen>
<![CDATA[acl internal-net { 
        127.0.0.1; 
        1.2.3.0/24;  
        2001:0db8:100::/56; 
        ::1/128; 
        ::ffff:1.2.3.4/128; 
};
acl ns-internal-net { 
        1.2.3.4;  
        1.2.3.5;  
        2001:0db8:100::4/128; 
        2001:0db8:100::5/128; 
};
]]></screen><para>This ACLs can be used e.g. for queries of clients and transfer zones to secondary name-servers. This prevents also your caching name-server to be used from outside using IPv6.</para><screen>
<![CDATA[options {
        # sure other options here, too
        listen-on-v6 { none; };
        allow-query { internal-net; }; 
        allow-transfer { ns-internal-net; }; 
};
]]></screen><para>It's also possible to set the <emphasis>allow-query </emphasis>and <emphasis>allow-transfer</emphasis> option for most of single zone definitions, too.</para></sect2><sect2>
<title>Sending queries with dedicated IPv6 address</title>
<para>This option is not required, but perhaps needed:</para><screen>
<![CDATA[query-source-v6 address <ipv6address|*> port <port|*>;
]]></screen></sect2><sect2>
<title>Per zone defined dedicated IPv6 addresses</title>
<para>It's also possible to define per zone some IPv6 addresses.</para><sect3>
<title>Transfer source address </title>
<para>Transfer source address is used for outgoing zone transfers:</para><screen>
<![CDATA[transfer-source-v6 <ipv6addr|*> [port port];
]]></screen></sect3><sect3>
<title>Notify source address </title>
<para>Notify source address is used for outgoing notify messages:</para><screen>
<![CDATA[notify-source-v6 <ipv6addr|*> [port port];
]]></screen></sect3></sect2><sect2>
<title>IPv6 DNS zone files examples</title>
<para>Some information can be also found at <ulink url="http://www.isi.edu/~bmanning/v6DNS.html">IPv6 DNS Setup Information (article)</ulink>. Perhaps also helpful is the <ulink url="http://tools.fpsn.net/ipv6-inaddr/">IPv6 Reverse DNS zone builder for BIND 8/9 (webtool)</ulink>.</para></sect2><sect2>
<title>Serving IPv6 related DNS data</title>
<para>For IPv6 new types and root zones for reverse lookups are defined:</para><itemizedlist>
<listitem><para>AAAA and reverse IP6.INT: specified in <ulink url="http://www.faqs.org/rfcs/rfc1886.html">RFC 1886 / DNS Extensions to support IP version 6</ulink>, usable since BIND version 4.9.6</para></listitem><listitem><para>A6, DNAME (DEPRECATED NOW!) and reverse IP6.ARPA: specified in <ulink url="http://www.faqs.org/rfcs/rfc2874.html">RFC 2874 / DNS Extensions to Support IPv6 Address Aggregation and Renumbering</ulink>, usable since BIND 9, but see also an information about the current state at <ulink url="http://www.ietf.org/ids.by.wg/dnsext.html">Domain Name System Extension (dnsext)</ulink></para></listitem></itemizedlist><para>Perhaps filled later more content, for the meantime take a look at given RFCs and</para><itemizedlist>
<listitem><para>AAAA and reverse IP6.INT: <ulink url="http://www.isi.edu/~bmanning/v6DNS.html">IPv6 DNS Setup Information</ulink></para></listitem><listitem><para>A6, DNAME (DEPRECATED NOW!) and reverse IP6.ARPA: take a look into chapter 4 and 6 of the BIND 9 Administrator Reference Manual (ARM) distributed with the bind-package or get this here: <ulink url="http://www.isc.org/sw/bind/arm93/">BIND manual version 9.3</ulink></para></listitem></itemizedlist><para>Because IP6.INT is deprecated (but still in use), a DNS server which will support IPv6 information has to serve both reverse zones.</para><sect3>
<title>Current best practice</title>
<para>Because there are some troubles around using the new formats, current best practice is:</para>
<para>Forward lookup support:</para><itemizedlist>
<listitem><para>AAAA</para></listitem></itemizedlist><para>Reverse lookup support:</para><itemizedlist>
<listitem><para>Reverse nibble format for zone ip6.int (FOR BACKWARD COMPATIBILITY)</para></listitem><listitem><para>Reverse nibble format for zone ip6.arpa (RECOMMENDED)</para></listitem></itemizedlist></sect3></sect2><sect2>
<title>Checking IPv6-enabled connect</title>
<para>To check, whether BIND named is listening on an IPv6 socket and serving data see following examples.</para><sect3>
<title>IPv6 connect, but denied by ACL</title>
<para>Specifying a dedicated server for the query, an IPv6 connect can be forced:</para><screen>
<![CDATA[$ host -t aaaa www.6bone.net 2001:0db8:200:f101::1 
Using domain server: 
Name: 2001:0db8:200:f101::1 
Address: 2001:0db8:200:f101::1#53 
Aliases:

Host www.6bone.net. not found: 5(REFUSED)
]]></screen><para>Related log entry looks like following:</para><screen>
<![CDATA[Jan 3 12:43:32 gate named[12347]: client
¬ 2001:0db8:200:f101:212:34ff:fe12:3456#32770: 
 query denied
]]></screen><para>If you see such entries in the log, check whether requests from this client should be allowed and perhaps review your ACL configuration.</para></sect3><sect3>
<title>Successful IPv6 connect</title>
<para>A successful IPv6 connect looks like following:</para><screen>
<![CDATA[$ host -t aaaa www.6bone.net 2001:0db8:200:f101::1 
Using domain server: 
Name: 2001:0db8:200:f101::1 
Address: 2001:0db8:200:f101::1#53 
Aliases:

www.6bone.net. is an alias for 6bone.net. 
6bone.net. has AAAA address 3ffe:b00:c18:1::10
]]></screen></sect3></sect2></sect1><sect1 id='hints-daemons-xinetd' >
<title><!-- anchor id="hints-daemons-xinetd" -->Internet super daemon (xinetd)</title>
<para>IPv6 is supported since <ulink url="https://github.com/xinetd-org/xinetd">xinetd</ulink> version around 1.8.9. Always use newest available version. At least version 2.3.3 must be used, older versions can contain remote exploitable security holes.</para>
<para>Some Linux distribution contain an extra package for the IPv6 enabled xinetd, some others start the IPv6-enabled xinetd if following variable is set: NETWORKING_IPV6="yes", mostly done by /etc/sysconfig/network (only valid for Red Hat like distributions). In newer releases, one binary supports IPv4 and IPv6.</para>
<para>If you enable a built-in service like e.g. daytime by modifying the configuration file in /etc/xinetd.d/daytime like</para><screen>
<![CDATA[# diff -u /etc/xinetd.d/daytime.orig /etc/xinetd.d/daytime 
--- /etc/xinetd.d/daytime.orig Sun Dec 16 19:00:14 2001 
+++ /etc/xinetd.d/daytime Sun Dec 16 19:00:22 2001 
@@ -10,5 +10,5 @@ 
        protocol = tcp 
        user = root 
        wait = no 
-       disable = yes 
+       disable = no 
 }
]]></screen><para>After restarting the xinetd you should get a positive result like:</para><screen>
<![CDATA[# netstat -lnptu -A inet6 |grep "xinetd*" 
tcp 0 0 ::ffff:192.168.1.1:993  :::*  LISTEN  12345/xinetd-ipv6 
tcp 0 0 :::13                   :::*  LISTEN  12345/xinetd-ipv6 <- service
¬ daytime/tcp
tcp 0 0 ::ffff:192.168.1.1:143  :::*  LISTEN  12345/xinetd-ipv6
]]></screen><para>Shown example also displays an IMAP and IMAP-SSL IPv4-only listening xinetd.</para>
<para>Note: earlier versions had a problem that an IPv4-only xinetd won't start on an IPv6-enabled node and also the IPv6-enabled xinetd won't start on an IPv4-only node. This is known to be fixed in later versions, at least version 2.3.11.</para></sect1><sect1 id='hints-daemons-apache2.' >
<title><!-- anchor id="hints-daemons-apache2." -->Webserver Apache2 (httpd2)</title>
<para>Apache web server supports IPv6 native by maintainers since 2.0.14. Available patches for the older 1.3.x series are not current and shouldn't be used in public environment, but available at <ulink url="ftp://ftp.kame.net/pub/kame/misc/">KAME / Misc</ulink>.</para><sect2>
<title>Listening on IPv6 addresses</title>
<para>Note: virtual hosts on IPv6 addresses are broken in versions until 2.0.28 (a patch is available for 2.0.28). But always try latest available version first because earlier versions had some security issues.</para><sect3>
<title>Virtual host listen on an IPv6 address only</title>
<screen>
<![CDATA[Listen [2001:0db8:100::1]:80
<VirtualHost [2001:0db8:100::1]:80>
        ServerName ipv6only.yourdomain.yourtopleveldomain
        # ...sure more config lines
</VirtualHost>
]]></screen></sect3><sect3>
<title>Virtual host listen on an IPv6 and on an IPv4 address</title>
<screen>
<![CDATA[Listen [2001:0db8:100::2]:80 
Listen 1.2.3.4:80
<VirtualHost [2001:0db8:100::2]:80 1.2.3.4:80>
        ServerName ipv6andipv4.yourdomain.yourtopleveldomain
        # ...sure more config lines
</VirtualHost>
]]></screen><para>This should result after restart in e.g.</para><screen>
<![CDATA[# netstat -lnptu |grep "httpd2\W*$" 
tcp 0 0 1.2.3.4:80          0.0.0.0:* LISTEN 12345/httpd2 
tcp 0 0 2001:0db8:100::1:80 :::*      LISTEN 12345/httpd2 
tcp 0 0 2001:0db8:100::2:80 :::*      LISTEN 12345/httpd2
]]></screen><para>For simple tests use the telnet example already shown.</para></sect3><sect3>
<title>Additional notes</title>
<itemizedlist>
<listitem><para>Apache2 supports a method called &rdquo;sendfile&rdquo; to speedup serving data. Some NIC drivers also support offline checksumming. In some cases, this can lead to connection problems and invalid TCP checksums. In this cases, disable &rdquo;sendfile&rdquo; either by recompiling using configure option &rdquo;--without-sendfile&rdquo; or by using the "EnableSendfile off" directive in configuration file.</para></listitem></itemizedlist></sect3></sect2></sect1><sect1 id='hints-daemons-radvd' >
<title><!-- anchor id="hints-daemons-radvd" -->Router Advertisement Daemon (radvd)</title>
<para>The router advertisement daemon is very useful on a LAN, if clients should be auto-configured. The daemon itself should run on the Linux default IPv6 gateway router (it's not required that this is also the default IPv4 gateway, so pay attention who on your LAN is sending router advertisements). </para>
<para>You can specify some information and flags which should be contained in the advertisement. Common used are</para><itemizedlist>
<listitem><para>Prefix (needed)</para></listitem><listitem><para>Lifetime of the prefix</para></listitem><listitem><para>Frequency of sending advertisements (optional)</para></listitem></itemizedlist><para>After a proper configuration, the daemon sends advertisements through specified interfaces and clients are hopefully receive them and auto-magically configure addresses with received prefix and the default route.</para><sect2>
<title>Configuring radvd</title>
<sect3>
<title>Simple configuration</title>
<para>Radvd's config file is normally /etc/radvd.conf. An simple example looks like following:</para><screen>
<![CDATA[interface eth0 { 
        AdvSendAdvert on;
        MinRtrAdvInterval 3; 
        MaxRtrAdvInterval 10;
        prefix 2001:0db8:0100:f101::/64 { 
                AdvOnLink on; 
                AdvAutonomous on; 
                AdvRouterAddr on; 
        };
};
]]></screen><para>This results on client side in</para><screen>
<![CDATA[# ip -6 addr show eth0 
3: eth0: <BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast qlen 100 
    inet6 2001:0db8:100:f101:2e0:12ff:fe34:1234/64 scope global dynamic 
       valid_lft 2591992sec preferred_lft 604792sec 
    inet6 fe80::2e0:12ff:fe34:1234/10 scope link
]]></screen><para>Because no lifetime was defined, a very high value was used.</para></sect3><sect3>
<title>Special 6to4 configuration</title>
<para>Version since 0.6.2pl3 support the automatic (re)-generation of the prefix depending on an IPv4 address of a specified interface. This can be used to distribute advertisements in a LAN after the 6to4 tunneling has changed. Mostly used behind a dynamic dial-on-demand Linux router. Because of the sure shorter lifetime of such prefix (after each dial-up, another prefix is valid), the lifetime configured to minimal values:</para><screen>
<![CDATA[interface eth0 { 
        AdvSendAdvert on;
        MinRtrAdvInterval 3; 
        MaxRtrAdvInterval 10;
        prefix 0:0:0:f101::/64 { 
                AdvOnLink off; 
                AdvAutonomous on; 
                AdvRouterAddr on; 
                Base6to4Interface ppp0;
                AdvPreferredLifetime 20; 
                AdvValidLifetime 30;
        };
};
]]></screen><para>This results on client side in (assuming, ppp0 has currently 1.2.3.4 as local IPv4 address):</para><screen>
<![CDATA[# /sbin/ip -6 addr show eth0 
3: eth0: <BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast qlen 100 
   inet6 2002:0102:0304:f101:2e0:12ff:fe34:1234/64 scope global dynamic 
      valid_lft 22sec preferred_lft 12sec
   inet6 fe80::2e0:12ff:fe34:1234/10 scope link
]]></screen><para>Because a small lifetime was defined, such prefix will be thrown away quickly, if no related advertisement was received.</para>
<para>Additional note: if you do not used special 6to4 support in initscripts, you have to setup a special route on the internal interface on the router, otherwise you will get some backrouting problems. for the example showh here:</para><screen>
<![CDATA[# /sbin/ip -6 route add 2002:0102:0304:f101::/64 dev eth0 metric 1
]]></screen><para>This route needs to be replaced every time the prefix changes, which is the case after a new IPv4 address was assigned to the dial-up interface.</para></sect3></sect2><sect2>
<title>Debugging</title>
<para>A program called &rdquo;radvdump&rdquo; can help you looking into sent or received advertisements. Simple to use:</para><screen>
<![CDATA[# radvdump 
Router advertisement from fe80::280:c8ff:feb9:cef9 (hoplimit 255) 
        AdvCurHopLimit: 64 
        AdvManagedFlag: off 
        AdvOtherConfigFlag: off 
        AdvHomeAgentFlag: off 
        AdvReachableTime: 0 
        AdvRetransTimer: 0 
        Prefix 2002:0102:0304:f101::/64 
                AdvValidLifetime: 30 
                AdvPreferredLifetime: 20 
                AdvOnLink: off 
                AdvAutonomous: on 
                AdvRouterAddr: on 
        Prefix 2001:0db8:100:f101::/64 
                AdvValidLifetime: 2592000 
                AdvPreferredLifetime: 604800 
                AdvOnLink: on 
                AdvAutonomous: on 
                AdvRouterAddr: on 
        AdvSourceLLAddress: 00 80 12 34 56 78
]]></screen><para>Output shows you each advertisement package in readable format. You should see your configured values here again, if not, perhaps it's not your radvd which sends the advertisement...look for another router on the link (and take the LLAddress, which is the MAC address for tracing).</para></sect2></sect1><sect1 id='hints-daemons-dhcpv6.' >
<title><!-- anchor id="hints-daemons-dhcpv6." -->Dynamic Host Configuration v6 Server (dhcp6s)</title>
<para>DHCPv6 can be used for stateful configurations. The daemon itself need not necessary run on the Linux default IPv6 gateway router. </para>
<para>You can specify more information than by using radvd. The are most similar to IPv4 DHCP server.</para>
<para>After a proper configuration, the daemon reacts on received ICMPv6 multicast packets sent by a client to address ff02::1:2</para><sect2>
<title>Configuration of the DHCPv6 server (dhcp6s)</title>
<sect3>
<title>Simple configuration</title>
<para>dhcp6s's config file is normally /etc/dhcp6s.conf. An simple example looks like following:</para><screen>
<![CDATA[interface eth0 {
        server-preference 255;
        renew-time 60;
        rebind-time 90;
        prefer-life-time 130;
        valid-life-time 200;
        allow rapid-commit;
        option dns_servers 2001:db8:0:f101::1 sub.domain.example;
        link AAA {
                range 2001:db8:0:f101::1000 to 2001:db8:0:f101::ffff/64;
                prefix 2001:db8:0:f101::/64;
        };
};
]]></screen></sect3></sect2><sect2>
<title>Configuration of the DHCPv6 client (dhcp6c)</title>
<sect3>
<title>Simple configuration</title>
<para>dhcp6c's config file is normally /etc/dhcp6c.conf. An simple example looks like following:</para><screen>
<![CDATA[interface eth0 {
        send rapid-commit;
        request domain-name-servers;
}; 
]]></screen></sect3></sect2><sect2>
<title>Usage</title>
<sect3>
<title>dhcpv6_server</title>
<para>Start server, e.g.</para><screen>
<![CDATA[# service dhcp6s start
]]></screen></sect3><sect3>
<title>dhcpv6_client</title>
<para>Start client in foreground, e.g.</para><screen>
<![CDATA[# dhcp6c -f eth0
]]></screen></sect3></sect2><sect2>
<title>Debugging</title>
<sect3>
<title>dhcpv6_server</title>
<para>The server has one foreground and two debug toggles (both should be used for debugging), here is an example:</para><screen>
<![CDATA[# dhcp6s -d -D -f eth0
]]></screen></sect3><sect3>
<title>dhcpv6_client</title>
<para>As general debugging for test whether the IPv6 DHCP server is reable on the link use an IPv6 ping to the DHCP multicast address:</para><screen>
<![CDATA[# ping6 -I eth0 ff02::1:2
]]></screen><para>The client has one foreground and two debug toggles, here is an example:</para><screen>
<![CDATA[# dhcp6c -d -f eth0
Oct/03/2005 17:18:16 dhcpv6 doesn't support hardware type 776 
Oct/03/2005 17:18:16 doesn't support sit0 address family 0 
Oct/03/2005 17:18:16 netlink_recv_rtgenmsg error 
Oct/03/2005 17:18:16 netlink_recv_rtgenmsg error 
Oct/03/2005 17:18:17 status code for this address is: success 
Oct/03/2005 17:18:17 status code: success 
Oct/03/2005 17:18:17 netlink_recv_rtgenmsg error 
Oct/03/2005 17:18:17 netlink_recv_rtgenmsg error 
Oct/03/2005 17:18:17 assigned address 2001:db8:0:f101::1002 prefix len is not
¬ in any RAs prefix length using 64 bit instead 
Oct/03/2005 17:18:17 renew time 60, rebind time 9
]]></screen><para>Note that the netlink error messages have no impact.</para></sect3></sect2></sect1><sect1 id='hints-daemons-isc-dhcp' >
<title><!-- anchor id="hints-daemons-isc-dhcp" -->ISC Dynamic Host Configuration Server (dhcpd)</title>
<para>ISC DHCP supports IPv6 since version 4.x.</para><sect2>
<title>Configuration of the ISC DHCP server for IPv6 (dhcpd)</title>
<para>Note that currently, the ISC DHCP server can only serve IPv4 or IPv6, means you have to start the daemon twice (for IPv6 with option &rdquo;-6&rdquo;) to support both protocols.</para><sect3>
<title>Simple configuration</title>
<para>Create a dedicated configuration file /etc/dhcp/dhcpd6.conf for the IPv6 part of the dhcpd. Note, that the router requires to have a interface configured with an IPv6 address out of the defined subnet.</para><screen>
<![CDATA[default-lease-time 600;
max-lease-time 7200; 
log-facility local7; 
subnet6 2001:db8:0:1::/64 {
        # Range for clients
        range6 2001:db8:0:1::129 2001:db8:0:1::254;

        # Range for clients requesting a temporary address
        range6 2001:db8:0:1::/64 temporary;

        # Additional options
        option dhcp6.name-servers fec0:0:0:1::1;
        option dhcp6.domain-search "domain.example";

        # Prefix range for delegation to sub-routers
        prefix6 2001:db8:0:100:: 2001:db8:0:f00:: /56;

        # Example for a fixed host address
        host specialclient {
    		host-identifier option dhcp6.client-id 00:01:00:01:4a:1f:ba:e3:60:b9:1f:01:23:45;
        	fixed-address6 2001:db8:0:1::127;
    	} 
} 
]]></screen><para>Note that the &rdquo;dhcp.client-id&rdquo; no longer belongs to a MAC address, an unique ID is used instead! &rdquo;dhcp6c&rdquo; (see above) uses the file /var/lib/dhcpv6/dhcp6c_duid (would be created during first start, if not existing) as unique identity. It's a 14 byte long identifier, starting with a 2 byte length information (usually &rdquo;0x000e&rdquo;):</para><screen>
<![CDATA[# hexdump -e '"%07.7_ax " 1/2 "%04x" " " 14/1 "%02x:" "\n"' /var/lib/dhcpv6/dhcp6c_duid 0000000 000e 00:01:00:01:4a:1f:ba:e3:60:b9:1f:01:23:45:
]]></screen></sect3></sect2><sect2>
<title>Usage</title>
<sect3>
<title>dhcpd</title>
<para>Start server in foreground:</para><screen>
<![CDATA[# /usr/sbin/dhcpd -6 -d -cf /etc/dhcp/dhcpd6.conf eth1 
Internet Systems Consortium DHCP Server 4.1.0 
Copyright 2004-2008 Internet Systems Consortium. 
All rights reserved. 
For info, please visit http://www.isc.org/sw/dhcp/ 
Not searching LDAP since ldap-server, ldap-port and ldap-base-dn were not specified in the config file 
Wrote 0 leases to leases file. 
Bound to *:547 
Listening on Socket/5/eth1/2001:db8:0:1::/64 
Sending on   Socket/5/eth1/2001:db8:0:1::/64
]]></screen></sect3></sect2></sect1><sect1 id='hints-daemons-dibbler' >
<title><!-- anchor id="hints-daemons-dibbler" -->DHCP Server Dibbler</title>
<para>Dibbler is also a DHCP server</para><sect2>
<title>Configuration of the Dibbler DHCP server for IPv6</title>
<sect3>
<title>Simple configuration</title>
<para>Create a dedicated configuration file /etc/dibbler/server.conf . Note, that the router requires to have a interface configured with an IPv6 address out of the defined subnet.</para><screen>
<![CDATA[log-level 8 
log-mode short 
preference 0 
iface "eth1" {
 // also ranges can be defines, instead of exact values  t1 1800-2000  t2 2700-3000
  prefered-lifetime 3600
  valid-lifetime 7200
  class {
    pool 2001:6f8:12d8:1::/64
  }
  option dns-server fec0:0:0:1::1
  option domain domain.example
} 
]]></screen></sect3></sect2><sect2>
<title>Usage</title>
<sect3>
<title>dibbler-server</title>
<para>Start server in foreground:</para><screen>
<![CDATA[# dibbler-server run 
| Dibbler - a portable DHCPv6, version 0.7.3 (SERVER, Linux port) 
| Authors : Tomasz Mrugalski<thomson(at)klub.com.pl>,Marek Senderski<msend(at)o2.pl> 
| Licence : GNU GPL v2 only. Developed at Gdansk University of Technology. 
| Homepage: http://klub.com.pl/dhcpv6/ 
2009.05.28 10:18:48 Server Notice    My pid (1789) is stored in /var/lib/dibbler/server.pid 
2009.05.28 10:18:48 Server Notice    Detected iface eth0/3, MAC=54:52:00:01:23:45. 
2009.05.28 10:18:48 Server Notice    Detected iface eth1/2, MAC=54:52:00:67:89:ab. 
2009.05.28 10:18:48 Server Notice    Detected iface lo/1, MAC=00:00:00:00:00:00. 
2009.05.28 10:18:48 Server Debug     Skipping database loading. 
2009.05.28 10:18:48 Server Debug     Cache:server-cache.xml file: parsing started, expecting 0 entries. 
2009.05.28 10:18:48 Server Notice    Parsing /etc/dibbler/server.conf config file... 
18:48 Server Debug     Setting 0 generic option(s). 
18:48 Server Debug     0 per-client configurations (exceptions) added. 
18:48 Server Debug     Parsing /etc/dibbler/server.conf done. 
18:48 Server Info      0 client class(es) defined. 
18:48 Server Debug     1 interface(s) specified in /etc/dibbler/server.conf 
18:48 Server Info      Mapping allow, deny list to class 0:0 allow/deny entries in total. 
18:48 Server Info      Interface eth1/2 configuration has been loaded. 
18:48 Server Notice    Running in stateful mode. 
18:48 Server Info      My DUID is 00:01:00:01:11:aa:6d:a7:54:52:00:67:89:ab. 
18:48 Server Notice    Creating multicast (ff02::1:2) socket on eth1/2 (eth1/2) interface. 
18:48 Server Debug     Cache: size set to 1048576 bytes, 1 cache entry size is 87 bytes, so maximum 12052 address-client pair(s) may be cached. 
18:48 Server Notice    Accepting connections. Next event in 4294967295 second(s).
]]></screen></sect3></sect2></sect1><sect1 id='hints-daemons-tcpwrapper' >
<title><!-- anchor id="hints-daemons-tcpwrapper" -->tcp_wrapper</title>
<para>tcp_wrapper is a library which can help you to protect service against misuse.</para><sect2>
<title>Filtering capabilities</title>
<para>You can use tcp_wrapper for</para><itemizedlist>
<listitem><para>Filtering against source addresses (IPv4 or IPv6)</para></listitem><listitem><para>Filtering against users (requires a running ident daemon on the client)</para></listitem></itemizedlist></sect2><sect2>
<title>Which program uses tcp_wrapper</title>
<para>Following are known:</para><itemizedlist>
<listitem><para>Each service which is called by xinetd (if xinetd is compiled using tcp_wrapper library)</para></listitem><listitem><para>sshd (if compiled using tcp_wrapper)</para></listitem></itemizedlist></sect2><sect2>
<title>Usage</title>
<para>tcp_wrapper is controlled by two files name /etc/hosts.allow and /etc/hosts.deny. For more information see</para><screen>
<![CDATA[$ man hosts.allow
]]></screen><sect3>
<title>Example for /etc/hosts.allow</title>
<para>In this file, each service which should be positive filtered (means connects are accepted) need a line.</para><screen>
<![CDATA[sshd:           1.2.3. [2001:0db8:100:200::]/64
daytime-stream: 1.2.3. [2001:0db8:100:200::]/64
]]></screen><para>Note: there are broken implementations around, which uses following broken IPv6 network description: [2001:0db8:100:200::/64]. Hopefully, such versions will be fixed soon.</para></sect3><sect3>
<title>Example for /etc/hosts.deny</title>
<para>This file contains all negative filter entries and should normally deny the rest using</para><screen>
<![CDATA[ALL: ALL
]]></screen><para>If this node is a more sensible one you can replace the standard line above with this one, but this can cause a DoS attack (load of mailer and spool directory), if too many connects were made in short time. Perhaps a logwatch is better for such issues.</para><screen>
<![CDATA[ALL: ALL: spawn (echo "Attempt from %h %a to %d at `date`" 
 | tee -a /var/log/tcp.deny.log | mail root@localhost)
]]></screen></sect3></sect2><sect2>
<title>Logging</title>
<para>Depending on the entry in the syslog daemon configuration file /etc/syslog.conf the tcp_wrapper logs normally into /var/log/secure.</para><sect3>
<title>Refused connection</title>
<para>A refused connection via IPv4 to an xinetd covered daytime service produces a line like following example</para><screen>
<![CDATA[Jan 2 20:40:44 gate xinetd-ipv6[12346]: FAIL: daytime-stream libwrap
¬ from=::ffff:1.2.3.4
Jan 2 20:32:06 gate xinetd-ipv6[12346]: FAIL: daytime-stream libwrap 
 from=2001:0db8:100:200::212:34ff:fe12:3456
]]></screen><para>A refused connection via IPv4 to an dual-listen sshd produces a line like following example</para><screen>
<![CDATA[Jan 2 20:24:17 gate sshd[12345]: refused connect from ::ffff:1.2.3.4
¬ (::ffff:1.2.3.4)
Jan 2 20:39:33 gate sshd[12345]: refused connect 
 from 2001:0db8:100:200::212:34ff:fe12:3456
¬ (2001:0db8:100:200::212:34ff:fe12:3456)
]]></screen></sect3><sect3>
<title>Permitted connection</title>
<para>A permitted connection via IPv4 to an xinetd covered daytime service produces a line like following example</para><screen>
<![CDATA[Jan 2 20:37:50 gate xinetd-ipv6[12346]: START: daytime-stream pid=0
¬ from=::ffff:1.2.3.4 
Jan 2 20:37:56 gate xinetd-ipv6[12346]: START: daytime-stream pid=0 
 from=2001:0db8:100:200::212:34ff:fe12:3456
]]></screen><para>A permitted connection via IPv4 to an dual-listen sshd produces a line like following example</para><screen>
<![CDATA[Jan 2 20:43:10 gate sshd[21975]: Accepted password for user from ::ffff:1.2.3.4
¬ port 33381 ssh2
Jan 2 20:42:19 gate sshd[12345]: Accepted password for user 
 from 2001:0db8:100:200::212:34ff:fe12:3456 port 33380 ssh2
]]></screen></sect3></sect2></sect1><sect1 id='hints-daemons-vsftpd' >
<title><!-- anchor id="hints-daemons-vsftpd" -->vsftpd</title>
<sect2>
<title>Listening on IPv6 addresses</title>
<para>Edit the configuration file, ususally /etc/vsftpd/vsftpd.conf, and adjust the listen option like</para><screen>
<![CDATA[listen_ipv6=yes
]]></screen><para>That's all.</para></sect2></sect1><sect1 id='hints-daemons-proftpd' >
<title><!-- anchor id="hints-daemons-proftpd" -->proftpd</title>
<sect2>
<title>Listening on IPv6 addresses</title>
<para>Edit the configuration file, ususally /etc/proftpd.conf, but take care, not 100% logical in virtual host setup</para><screen>
<![CDATA[<VirtualHost 192.0.2.1>
        ...
        Bind 2001:0DB8::1
        ...
</VirtualHost>
]]></screen><para>That's all.</para></sect2></sect1><sect1 id='hints-daemons-others' >
<title><!-- anchor id="hints-daemons-others" -->Other daemons</title>
<para>Nowadays it's mostly simple, look for either a command line option or a configuration value to enable IPv6 listening. See manual page of the daemon or check related FAQs. It can happen that you can bind a daemon only to the IPv6-&rdquo;any&rdquo;-address (::) and not to bind to a dedicated IPv6 address, because the lack of support (depends on that what the programmer has implemented so far...).</para></sect1></chapter><chapter id='chapter-programming' >
<title><!-- anchor id="chapter-programming" -->Programming</title>
<sect1 id='chapter-section-using-API' >
<title><!-- anchor id="chapter-section-using-API" --><!-- anchor id="chapter-programming-using-API" -->Programming using C-API</title>
<para>Related RFCs:</para><itemizedlist>
<listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3493.html">RFC 3493 / Basic Socket Interface Extensions for IPv6</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3542.html">RFC 3542 / Advanced Sockets Application Program Interface (API) for IPv6</ulink></para></listitem></itemizedlist><para>Following contents of this section is contributed by John Wenker, Sr. Software Engineer Performance Technologies San Diego, CA USA <ulink url="http://www.pt.com/">http://www.pt.com/</ulink>.</para>
<para>
</para>
<para>This section describes how to write IPv6 client-server applications under the Linux operating system. First thing's first, and credit must be given where it is due. The information contained in this section is derived from Chapters 2 through 4 of IPv6 Network Programming by Jun-ichiro itojun Hagino (ISBN 1-55558-318-0). The reader is encouraged to consult that book for more detailed information. It describes how to convert IPv4 applications to be IPv6 compatible in a protocol-independent way, and describes some of the common problems encountered during the conversion along with suggested solutions. At the time of this writing, this is the only book of which the author is aware that specifically addresses how to program IPv6 applications [since writing this section, the author has also become aware of the Porting applications to IPv6 HowTo by Eva M. Castro at <ulink url="http://jungla.dit.upm.es/~ecastro/IPv6-web/ipv6.html">http://jungla.dit.upm.es/~ecastro/IPv6-web/ipv6.html</ulink>]. Unfortunately, of the almost 360 pages in the book, maybe 60 are actually useful (the chapters mentioned). Nevertheless, without the guidance of that book, the author would have been unable to perform his job duties or compose this HowTo. While most (but certainly not all) of the information in the Hagino book is available via the Linux 'man' pages, application programmers will save a significant amount of time and frustration by reading the indicated chapters of the book rather than searching through the 'man' pages and online documentation.</para>
<para>Other than the Hagino book, any other information presented in this HowTo was obtained through trial and error. Some items or explanations may not be entirely &rdquo;correct&rdquo; in the grand IPv6 scheme, but seem to work in practical application.</para>
<para>The discussion that follows assumes the reader is already experienced with the traditional TCP/IP socket API. For more information on traditional socket programming, the Internetworking with TCP/IP series of textbooks by Comer &amp; Stevens is hard to beat, specifically Volume III: Client-Server Programming and Applications, Linux/POSIX Sockets Version (ISBN 0-13-032071-4). This HowTo also assumes that the reader has had at least a bare basic introduction to IPv6 and in particular the addressing scheme for network addresses (see Section 2.3).</para><sect2>
<title>Address Structures</title>
<para>This section provides a brief overview of the structures provided in the socket API to represent network addresses (or more specifically transport endpoints) when using the Internet protocols in a client-server application.</para><sect3>
<title>IPv4 sockaddr_in</title>
<para>In IPv4, network addresses are 32 bits long and define a network node. Addresses are written in dotted decimal notation, such as 192.0.2.1, where each number represents eight bits of the address. Such an IPv4 address is represented by the struct sockaddr_in data type, which is defined in &lt;netinet/in.h&gt;.</para><screen>
<![CDATA[struct sockaddr_in
{
   sa_family_t    sin_family;
   in_port_t      sin_port;
   struct in_addr sin_addr;
   /* Plus some padding for alignment */
};
]]></screen><para>The sin_family component indicates the address family. For IPv4 addresses, this is always set to AF_INET. The sin_addr field contains the 32-bit network address (in network byte order). Finally, the sin_port component represents the transport layer port number (in network byte order). Readers should already be familiar with this structure, as this is the standard IPv4 address structure.</para></sect3><sect3>
<title>IPv6 sockaddr_in6</title>
<para>The biggest feature of IPv6 is its increased address space. Instead of 32-bit network addresses, IPv6 allots 128 bits to an address. Addresses are written in colon-hex notation of the form fe80::2c0:8cff:fe01:2345, where each hex number separated by colons represents 16 bits of the address. Two consecutive colons indicate a string of consecutive zeros for brevity, and at most only one double-colon may appear in the address. IPv6 addresses are represented by the struct sockaddr_in6 data type, also defined in &lt;netinet/in.h&gt;.</para><screen>
<![CDATA[struct sockaddr_in6
{
   sa_family_t     sin6_family;
   in_port_t       sin6_port;
   uint32_t        sin6_flowinfo;
   struct in6_addr sin6_addr;
   uint32_t        sin6_scope_id;
};
]]></screen><para>The sin6_family, sin6_port, and sin6_addr components of the structure have the same meaning as the corresponding fields in the sockaddr_in structure. However, the sin6_family member is set to AF_INET6 for IPv6 addresses, and the sin6_addr field holds a 128-bit address instead of only 32 bits.</para>
<para>The sin6_flowinfo field is used for flow control, but is not yet standardized and can be ignored.</para>
<para>The sin6_scope_id field has an odd use, and it seems (at least to this naïve author) that the IPv6 designers took a huge step backwards when devising this. Apparently, 128-bit IPv6 network addresses are not unique. For example, it is possible to have two hosts, on separate networks, with the same link-local address (see Figure 1). In order to pass information to a specific host, more than just the network address is required; the scope identifier must also be specified. In Linux, the network interface name is used for the scope identifier (e.g. &rdquo;eth0&rdquo;) [be warned that the scope identifier is implementation dependent!]. Use the ifconfig(1M) command to display a list of active network interfaces.</para>
<para>A colon-hex network address can be augmented with the scope identifier to produce a "scoped address&rdquo;. The percent sign ('%') is used to delimit the network address from the scope identifier. For example, fe80::1%eth0 is a scoped IPv6 address where fe80::1 represents the 128-bit network address and eth0 is the network interface (i.e. the scope identifier). Thus, if a host resides on two networks, such as Host B in example below, the user now has to know which path to take in order to get to a particular host. In Figure 1, Host B addresses Host A using the scoped address fe80::1%eth0, while Host C is addressed with fe80::1%eth1.</para><screen>
<![CDATA[Host A (fe80::1) ---- eth0 ---- Host B ---- eth1 ---- Host C (fe80::1)
]]></screen><para>Getting back to the sockaddr_in6 structure, its sin6_scope_id field contains the index of the network interface on which a host may be found. Server applications will have this field set automatically by the socket API when they accept a connection or receive a datagram. For client applications, if a scoped address is passed as the node parameter to getaddrinfo(3) (described later in this HowTo), then the sin6_scope_id field will be filled in correctly by the system upon return from the function; if a scoped address is not supplied, then the sin6_scope_id field must be explicitly set by the client software prior to attempting to communicate with the remote server. The if_nametoindex(3) function is used to translate a network interface name into its corresponding index. It is declared in &lt;net/if.h&gt;.</para></sect3><sect3>
<title>Generic Addresses</title>
<para>As any programmer familiar with the traditional TCP/IP socket API knows, several socket functions deal with "generic" pointers. For example, a pointer to a generic struct sockaddr data type is passed as a parameter to some socket functions (such as connect(2) or bind(2)) rather than a pointer to a specific address type. Be careful&hellip; the sockaddr_in6 structure is larger than the generic sockaddr structure! Thus, if your program receives a generic address whose actual type is unknown (e.g. it could be an IPv4 address structure or an IPv6 address structure), you must supply sufficient storage to hold the entire address. The struct sockaddr_storage data type is defined in &lt;bits/socket.h&gt; for this purpose [do not #include this file directly within an application; use &lt;sys/socket.h&gt; as usual, and &lt;bits/socket.h&gt; will be implicitly included].</para>
<para>For example, consider the recvfrom(2) system call, which is used to receive a message from a remote peer. Its function prototype is:</para><screen>
<![CDATA[ssize_t recvfrom( int              s,
                  void            *buf,
                  size_t           len,
                  int              flags,
                  struct sockaddr *from,
                  socklen_t       *fromlen );
]]></screen><para>The from parameter points to a generic sockaddr structure. If data can be received from an IPv6 peer on the socket referenced by s, then from should point to a data type of struct sockaddr_storage, as in the following dummy example:</para><screen>
<![CDATA[/*
** Read a message from a remote peer, and return a buffer pointer to
** the caller.
**
** 's' is the file descriptor for the socket.
*/
char *rcvMsg( int s )
{
   static char             bfr[ 1025 ];  /* Where the msg is stored. */
   ssize_t                 count;
   struct sockaddr_storage ss;           /* Where the peer adr goes. */
   socklen_t               sslen;
   sslen = sizeof( ss );
   count = recvfrom( s,
                     bfr,
                     sizeof( bfr ) - 1,
                     0,
                     (struct sockaddr*) &ss,
                     &sslen );
   bfr[ count ] = '\0';   /* Null-terminates the message. */
   return bfr;
}  /* End rcvMsg() */
]]></screen><para>As seen in the above example, ss (a struct sockaddr_storage data object) is used to receive the peer address information, but it's address is typecast to a generic struct sockaddr* pointer in the call to recvfrom(2). </para></sect3></sect2><sect2>
<title>Lookup Functions</title>
<para>Traditionally, hostname and service name resolution were performed by functions such as gethostbyname(3) and getservbyname(3). These traditional lookup functions are still available, but they are not forward compatible to IPv6. Instead, the IPv6 socket API provides new lookup functions that consolidate the functionality of several traditional functions. These new lookup functions are also backward compatible with IPv4, so a programmer can use the same translation algorithm in an application for both the IPv4 and IPv6 protocols. This is an important feature, because obviously a global IPv6 infrastructure isn't going to be put in place overnight. Thus, during the transition period from IPv4 to IPv6, client-server applications should be designed with the flexibility to handle both protocols simultaneously. The example programs at the end of this chapter do just that.</para>
<para>The primary lookup function in the new socket API is getaddrinfo(3). Its prototype is as follows. </para><screen>
<![CDATA[int getaddrinfo( const char             *node,
                 const char             *service,
                 const struct addrinfo  *hints,
                 struct addrinfo       **res );
]]></screen><para>The node parameter is a pointer to the hostname or IP address being translated. The referenced string can be a hostname, IPv4 dotted decimal address, or IPv6 colon-hex address (possibly scoped). The service parameter is a pointer to the transport layer's service name or port number. It can be specified as a name found in /etc/services or a decimal number. getaddrinfo(3) resolves the host/service combination and returns a list of address records; a pointer to the list is placed in the location pointed at by res. For example, suppose a host can be identified by both an IPv4 and IPv6 address, and that the indicated service has both a TCP entry and UDP entry in /etc/services. In such a scenario, it is not inconceivable that four address records are returned; one for TCP/IPv6, one for UDP/IPv6, one for TCP/IPv4, and one for UDP/IPv4.</para>
<para>The definition for struct addrinfo is found in &lt;netdb.h&gt; (as is the declaration for getaddrinfo(3) and the other functions described in this section). The structure has the following format:</para><screen>
<![CDATA[struct addrinfo
{
   int              ai_flags;
   int              ai_family;
   int              ai_socktype;
   int              ai_protocol;
   socklen_t        ai_addrlen;
   struct sockaddr *ai_addr;
   char            *ai_canonname;
   struct addrinfo *ai_next;
};
]]></screen><para>Consult the 'man' page for getaddrinfo(3) for detailed information about the various fields; this HowTo only describes a subset of them, and only to the extent necessary for normal IPv6 programming.</para>
<para>The ai_family, ai_socktype, and ai_protocol fields have the exact same meaning as the parameters to the socket(2) system call. The ai_family field indicates the protocol family (not the address family) associated with the record, and will be PF_INET6 for IPv6 or PF_INET for IPv4. The ai_socktype parameter indicates the type of socket to which the record corresponds; SOCK_STREAM for a reliable connection-oriented byte-stream or SOCK_DGRAM for connectionless communication. The ai_protocol field specifies the underlying transport protocol for the record.</para>
<para>The ai_addr field points to a generic struct sockaddr object. Depending on the value in the ai_family field, it will point to either a struct sockaddr_in (PF_INET) or a struct sockaddr_in6 (PF_INET6). The ai_addrlen field contains the size of the object pointed at by the ai_addr field.</para>
<para>As mentioned, getaddrinfo(3) returns a list of address records. The ai_next field points to the next record in the list.</para>
<para>The hints parameter to getaddrinfo(3) is also of type struct addrinfo and acts as a filter for the address records returned in res. If hints is NULL, all matching records are returned; but if hints is non-NULL, the referenced structure gives "hints" to getaddrinfo(3) about which records to return. Only the ai_flags, ai_family, ai_socktype, and ai_protocol fields are significant in the hints structure, and all other fields should be set to zero.</para>
<para>Programs can use hints-&gt;ai_family to specify the protocol family. For example, if it is set to PF_INET6, then only IPv6 address records are returned. Likewise, setting hints-&gt;ai_family to PF_INET results in only IPv4 address records being returned. If an application wants both IPv4 and IPv6 records, the field should be set to PF_UNSPEC.</para>
<para>The hints-&gt;socktype field can be set to SOCK_STREAM to return only records that correspond to connection-oriented byte streams, SOCK_DGRAM to return only records corresponding to connectionless communication, or 0 to return both.</para>
<para>For the Internet protocols, there is only one protocol associated with connection-oriented sockets (TCP) and one protocol associated with connectionless sockets (UDP), so setting hints-&gt;ai_socktype to SOCK_STREAM or SOCK_DGRAM is the same as saying, "Give me only TCP records," or "Give me only UDP records," respectively. With that in mind, the hints-&gt;ai_protocol field isn't really that important with the Internet protocols, and pretty much mirrors the hints-&gt;ai_socktype field. Nevertheless, hints-&gt;ai_protocol can be set to IPPROTO_TCP to return only TCP records, IPPROTO_UDP to return only UDP records, or 0 for both.</para>
<para>The node or service parameter to gethostbyname(3) can be NULL, but not both. If node is NULL, then the ai_flags field of the hints parameter specifies how the network address in a returned record is set (i.e. the sin_addr or sin6_addr field of the object pointed at by the ai_addr component in a returned record). If the AI_PASSIVE flag is set in hints, then the returned network addresses are left unresolved (all zeros). This is how server applications would use getaddrinfo(3). If the flag is not set, then the address is set to the local loopback address (::1 for IPv6 or 127.0.0.1 for IPv4). This is one way a client application can specify that the target server is running on the same machine as the client. If the service parameter is NULL, the port number in the returned address records remains unresolved.</para>
<para>The getaddrinfo(3) function returns zero on success, or an error code. In the case of an error, the gai_strerror(3) function is used to obtain a character pointer to an error message corresponding to the error code, just like strerror(3) does in the standard 'C' library.</para>
<para>Once the address list is no longer needed, it must be freed by the application. This is done with the freeaddrinfo(3) function.</para>
<para>The last function that will be mentioned in this section is getnameinfo(3). This function is the inverse of getaddrinfo(3); it is used to create a string representation of the hostname and service from a generic struct sockaddr data object. It has the following prototype. </para><screen>
<![CDATA[int getnameinfo( const struct sockaddr *sa,
                 socklen_t              salen,
                 char                  *host,
                 size_t                 hostlen,
                 char                  *serv,
                 size_t                 servlen,
                 int                    flags );
]]></screen><para>The sa parameter points to the address structure in question, and salen contains its size. The host parameter points to a buffer where the null-terminated hostname string is placed, and the hostlen parameter is the size of that buffer. If there is no hostname that corresponds to the address, then the network address (dotted decimal or colon-hex) is placed in host. Likewise, the serv parameter points to a buffer where the null-terminated service name string (or port number) is placed, and the servlen parameter is the size of that buffer. The flags parameter modifies the function's behavior; in particular, the NI_NUMERICHOST flag indicates that the converted hostname should always be formatted in numeric form (i.e. dotted decimal or colon-hex), and the NI_NUMERICSERV flag indicates that the converted service should always be in numeric form (i.e. the port number).</para>
<para>The symbols NI_MAXHOST and NI_MAXSERV are available to applications and represent the maximum size of any converted hostname or service name, respectively. Use these when declaring output buffers for getnameinfo(3).</para></sect2><sect2>
<title>Quirks Encountered</title>
<para>Before jumping into the programming examples, there are several quirks in IPv6 of which the reader should be aware. The more significant ones (in addition to the non-uniqueness of IPv6 network addresses already discussed) are described in the paragraphs below. </para><sect3>
<title>IPv4 Mapped Addresses</title>
<para>For security reasons that this author won't pretend to understand, "IPv4 mapped addresses" should not be allowed in IPv6-capable server applications. To put it in terms that everyone can understand, this simply means that a server should not accept IPv4 traffic on an IPv6 socket (an otherwise legal operation). An IPv4 mapped address is a mixed-format address of the form:</para><screen>
<![CDATA[::ffff:192.0.2.1
]]></screen><para>where the first portion is in IPv6 colon-hex format and the last portion is in IPv4 dotted decimal notation. The dotted decimal IPv4 address is the actual network address, but it is being mapped into an IPv6 compatible format.</para>
<para>To prevent IPv4 mapped addresses from being accepted on an IPv6 socket, server applications must explicitly set the IPV6_V6ONLY socket option on all IPv6 sockets created [the Hagino book implies that this is only a concern with server applications. However, it has been observed during testing that if a client application uses an IPv4 mapped address to specify the target server, and the target server has IPv4 mapped addresses disabled, the connection still completes regardless. On the server side, the connection endpoint is an IPv4 socket as desired; but on the client side, the connection endpoint is an IPv6 socket. Setting the IPV6_V6ONLY socket option on the client side as well as the server side prevents any connection from being established at all.]. There's only one problem. Apparently, IPV6_V6ONLY isn't defined on all systems [or at least it wasn't in 2005 when the Hagino book was written]. The server example at the end of this chapter provides a method for handling this problem.</para>
<para>If IPv4 traffic cannot be handled on IPv6 sockets, then that implies that server applications must open both an IPv4 and IPv6 socket for a particular network service if it wants to handle requests from either protocol. This goes back to the flexibility issue mentioned earlier. If getaddrinfo(3) returns multiple address records, then server applications should traverse the list and open a passive socket for each address provided. </para></sect3><sect3>
<title>Cannot Specify the Scope Identifier in /etc/hosts</title>
<para>It is possible to assign a hostname to an IPv6 network address in /etc/hosts. For example, the following is an excerpt from the /etc/hosts file on the author's development system. </para><screen>
<![CDATA[        ::1                        localhost
        127.0.0.1                  localhost
        fe80::2c0:8cff:fe01:2345   pt141
        192.0.2.1                  pt141
]]></screen><para>The "localhost" and "pt141" hostnames can be translated to either an IPv4 or IPv6 network address. So, for example, if "pt141" is passed as the node parameter to getaddrinfo(3), the function returns both an IPv4 and IPv6 address record for the host (assuming the behavior hasn't been modified by the hints parameter). Unfortunately, a scoped address cannot be used in /etc/hosts. Doing so results in getaddrinfo(3) returning only the IPv4 record.</para></sect3><sect3>
<title>Client &amp; Server Residing on the Same Machine</title>
<para>Suppose a machine has the IPv4 address 192.0.2.1. A client application running on that machine can connect to a server application on the same machine by using either the local loopback address (127.0.0.1) or the network address (192.0.2.1) as the target server. Much to this author's surprise (and dismay), it turns out that an IPv6 client application cannot connect to a server application on the same machine if it uses the network address of that machine as the target; it must use the local loopback address (::1). </para></sect3></sect2><sect2>
<title>Putting It All Together (A Client-Server Programming Example)</title>
<para>Now it's time to put everything discussed thus far together into a sample client-server application. The remainder of this section is devoted to a remote time-of-day application (the 'daytime' Internet service) [I noticed that Ms. Castro used a 'daytime' example in her <emphasis>Porting applications to IPv6 HowTo</emphasis>. For the record, the source code presented here is original, developed from scratch, and any similarity between it and any other publicly available 'daytime' example is purely coincidental.]. The source code presented in this section was developed and tested on a RedHat Linux release using the 2.6 kernel (2.6.9 to be specific). Readers may use the source code freely, so long as proper credit is attributed; but of course the standard disclaimer must be given first: </para><blockquote>
<para>Although the sample source code is believed to be free of errors, the author makes no guarantees as to its reliability, especially considering that some error paths were intentionally omitted for brevity. Use it at your own risk!</para>
</blockquote><para>When you get right down to it, there really aren't that many differences between IPv4 and IPv6 applications. The trick is to code IPv6 applications in a protocol-independent manner, such that they can handle both IPv4 and IPv6 simultaneously and transparently. This sample application does just that. The only protocol-dependent code in the example occurs when printing network addresses in verbose mode; but only after the ai_family field in the addrinfo structure has been checked, so the programs know exactly what type of address they're handling at the time.</para><sect3>
<title>'Daytime' Server Code</title>
<para>The server code is found in file tod6d.c (time-of-day IPv6 daemon). Once built, the server may be started using the following command syntax (assuming tod6d is the executable file):</para><screen>
<![CDATA[tod6d [-v] [service]
]]></screen><para>ARGUMENTS: </para><variablelist>
<varlistentry><term>service</term><listitem><para>The service (or well-known port) on which to listen. Default is "daytime".</para></listitem></varlistentry></variablelist><para>OPTIONS:</para><variablelist>
<varlistentry><term>-v</term><listitem><para>Turn on verbose mode.</para></listitem></varlistentry></variablelist><para>The server handles both TCP and UDP requests on the network. The server source code contained in tod6d.c follows:</para><screen>
<![CDATA[/******************************************************************************
* File: tod6d.c
* Description: Contains source code for an IPv6-capable 'daytime' server.
* Author: John Wenker, Sr. Software Engineer,
*         Performance Technologies, San Diego, USA
******************************************************************************/
/*
** System header files.
*/
#include <errno.h>        /* errno declaration & error codes.            */
#include <netdb.h>        /* getaddrinfo(3) et al.                       */
#include <netinet/in.h>   /* sockaddr_in & sockaddr_in6 definition.      */
#include <stdio.h>        /* printf(3) et al.                            */
#include <stdlib.h>       /* exit(2).                                    */
#include <string.h>       /* String manipulation & memory functions.     */
#include <sys/poll.h>     /* poll(2) and related definitions.            */
#include <sys/socket.h>   /* Socket functions (socket(2), bind(2), etc). */
#include <time.h>         /* time(2) & ctime(3).                         */
#include <unistd.h>       /* getopt(3), read(2), etc.                    */
/*
** Constants.
*/
#define DFLT_SERVICE "daytime"   /* Default service name.                    */
#define INVALID_DESC -1          /* Invalid file descriptor.                 */
#define MAXCONNQLEN  3           /* Max nbr of connection requests to queue. */
#define MAXTCPSCKTS  2           /* One TCP socket for IPv4 & one for IPv6.  */
#define MAXUDPSCKTS  2           /* One UDP socket for IPv4 & one for IPv6.  */
#define VALIDOPTS    "v"         /* Valid command options.                   */
/*
** Simple boolean type definition.
*/
typedef enum { false = 0, true } boolean;
/*
** Prototypes for internal helper functions.
*/
static int  openSckt( const char *service,
                      const char *protocol,
                      int         desc[ ],
                      size_t     *descSize );
static void tod( int    tSckt[ ],
                 size_t tScktSize,
                 int    uSckt[ ],
                 size_t uScktSize );
/*
** Global (within this file only) data objects.
*/
static char        hostBfr[ NI_MAXHOST ];   /* For use w/getnameinfo(3).    */
static const char *pgmName;                 /* Program name w/o dir prefix. */
static char        servBfr[ NI_MAXSERV ];   /* For use w/getnameinfo(3).    */
static boolean     verbose = false;         /* Verbose mode indication.     */
/*
** Usage macro for command syntax violations.
*/
#define USAGE                                       \
        {                                           \
           fprintf( stderr,                         \
                    "Usage: %s [-v] [service]\n",   \
                    pgmName );                      \
           exit( 127 );                             \
        }  /* End USAGE macro. */
/*
** Macro to terminate the program if a system call error occurs.  The system
** call must be one of the usual type that returns -1 on error.  This macro is
** a modified version of a macro authored by Dr. V. Vinge, SDSU Dept. of
** Computer Science (retired)... best professor I ever had.  I hear he writes
** great science fiction in addition to robust code, too.
*/
#define CHK(expr)                                                   \
        do                                                          \
        {                                                           \
           if ( (expr) == -1 )                                      \
           {                                                        \
              fprintf( stderr,                                      \
                       "%s (line %d): System call ERROR - %s.\n",   \
                       pgmName,                                     \
                       __LINE__,                                    \
                       strerror( errno ) );                         \
              exit( 1 );                                            \
           }   /* End IF system call failed. */                     \
        } while ( false )
/******************************************************************************
* Function: main
*
* Description:
*    Set up a time-of-day server and handle network requests.  This server
*    handles both TCP and UDP requests.
*
* Parameters:
*    The usual argc and argv parameters to a main() function.
*
* Return Value:
*    This is a daemon program and never returns.  However, in the degenerate
*    case where no sockets are created, the function returns zero.
******************************************************************************/
int main( int   argc,
          char *argv[ ] )
{
   int         opt;
   const char *service   = DFLT_SERVICE;
   int         tSckt[ MAXTCPSCKTS ];     /* Array of TCP socket descriptors. */
   size_t      tScktSize = MAXTCPSCKTS;  /* Size of uSckt (# of elements).   */
   int         uSckt[ MAXUDPSCKTS ];     /* Array of UDP socket descriptors. */
   size_t      uScktSize = MAXUDPSCKTS;  /* Size of uSckt (# of elements).   */
   /*
   ** Set the program name (w/o directory prefix).
   */
   pgmName = strrchr( argv[ 0 ], '/' );
   pgmName = pgmName == NULL  ?  argv[ 0 ]  :  pgmName + 1;
   /*
   ** Process command options.
   */
   opterr = 0;   /* Turns off "invalid option" error messages. */
   while ( ( opt = getopt( argc, argv, VALIDOPTS ) ) >= 0 )
   {
      switch ( opt )
      {
         case 'v':   /* Verbose mode. */
         {
            verbose = true;
            break;
         }
         default:
         {
            USAGE;
         }
      }  /* End SWITCH on command option. */
   }  /* End WHILE processing options. */
   /*
   ** Process command line arguments.
   */
   switch ( argc - optind )
   {
      case 0:  break;
      case 1:  service = argv[ optind ]; break;
      default: USAGE;
   }  /* End SWITCH on number of command line arguments. */
   /*
   ** Open both a TCP and UDP socket, for both IPv4 & IPv6, on which to receive
   ** service requests.
   */
   if ( ( openSckt( service, "tcp", tSckt, &tScktSize ) < 0 ) ||
        ( openSckt( service, "udp", uSckt, &uScktSize ) < 0 ) )
   {
      exit( 1 );
   }
   /*
   ** Run the time-of-day server.
   */
   if ( ( tScktSize > 0 ) || ( uScktSize > 0 ) )
   {
      tod( tSckt,         /* tod() never returns. */
           tScktSize,
           uSckt,
           uScktSize );
   }
   /*
   ** Since tod() never returns, execution only gets here if no sockets were
   ** created.
   */
   if ( verbose )
   {
      fprintf( stderr,
               "%s: No sockets opened... terminating.\n",
               pgmName );
   }
   return 0;
}  /* End main() */
/******************************************************************************
* Function: openSckt
*
* Description:
*    Open passive (server) sockets for the indicated inet service & protocol.
*    Notice in the last sentence that "sockets" is plural.  During the interim
*    transition period while everyone is switching over to IPv6, the server
*    application has to open two sockets on which to listen for connections...
*    one for IPv4 traffic and one for IPv6 traffic.
*
* Parameters:
*    service  - Pointer to a character string representing the well-known port
*               on which to listen (can be a service name or a decimal number).
*    protocol - Pointer to a character string representing the transport layer
*               protocol (only "tcp" or "udp" are valid).
*    desc     - Pointer to an array into which the socket descriptors are
*               placed when opened.
*    descSize - This is a value-result parameter.  On input, it contains the
*               max number of descriptors that can be put into 'desc' (i.e. the
*               number of elements in the array).  Upon return, it will contain
*               the number of descriptors actually opened.  Any unused slots in
*               'desc' are set to INVALID_DESC.
*
* Return Value:
*    0 on success, -1 on error.
******************************************************************************/
static int openSckt( const char *service,
                     const char *protocol,
                     int         desc[ ],
                     size_t     *descSize )
{
   struct addrinfo *ai;
   int              aiErr;
   struct addrinfo *aiHead;
   struct addrinfo  hints    = { .ai_flags  = AI_PASSIVE,    /* Server mode. 
¬ */
                                 .ai_family = PF_UNSPEC };   /* IPv4 or IPv6.
¬ */
   size_t           maxDescs = *descSize;
   /*
   ** Initialize output parameters.  When the loop completes, *descSize is 0.
   */
   while ( *descSize > 0 )
   {
      desc[ --( *descSize ) ] = INVALID_DESC;
   }
   /*
   ** Check which protocol is selected (only TCP and UDP are valid).
   */
   if ( strcmp( protocol, "tcp" ) == 0 )        /* TCP protocol.     */
   {
      hints.ai_socktype = SOCK_STREAM;
      hints.ai_protocol = IPPROTO_TCP;
   }
   else if ( strcmp( protocol, "udp" ) == 0 )   /* UDP protocol.     */
   {
      hints.ai_socktype = SOCK_DGRAM;
      hints.ai_protocol = IPPROTO_UDP;
   }
   else                                         /* Invalid protocol. */
   {
      fprintf( stderr,
               "%s (line %d): ERROR - Unknown transport "
               "layer protocol \"%s\".\n",
               pgmName,
               __LINE__,
               protocol );
      return -1;
   }
   /*
   ** Look up the service's well-known port number.  Notice that NULL is being
   ** passed for the 'node' parameter, and that the AI_PASSIVE flag is set in
   ** 'hints'.  Thus, the program is requesting passive address information.
   ** The network address is initialized to :: (all zeros) for IPv6 records, or
   ** 0.0.0.0 for IPv4 records.
   */
   if ( ( aiErr = getaddrinfo( NULL,
                               service,
                               &hints,
                               &aiHead ) ) != 0 )
   {
      fprintf( stderr,
               "%s (line %d): ERROR - %s.\n",
               pgmName,
               __LINE__,
               gai_strerror( aiErr ) );
      return -1;
   }
   /*
   ** For each of the address records returned, attempt to set up a passive
   ** socket.
   */
   for ( ai = aiHead;
         ( ai != NULL ) && ( *descSize < maxDescs );
         ai = ai->ai_next )
   {
      if ( verbose )
      {
         /*
         ** Display the current address info.   Start with the protocol-
         ** independent fields first.
         */
         fprintf( stderr,
                  "Setting up a passive socket based on the "
                  "following address info:\n"
                  "   ai_flags     = 0x%02X\n"
                  "   ai_family    = %d (PF_INET = %d, PF_INET6 = %d)\n"
                  "   ai_socktype  = %d (SOCK_STREAM = %d, SOCK_DGRAM = %d)\n"
                  "   ai_protocol  = %d (IPPROTO_TCP = %d, IPPROTO_UDP = %d)\n"
                  "   ai_addrlen   = %d (sockaddr_in = %d, "
                  "sockaddr_in6 = %d)\n",
                  ai->ai_flags,
                  ai->ai_family,
                  PF_INET,
                  PF_INET6,
                  ai->ai_socktype,
                  SOCK_STREAM,
                  SOCK_DGRAM,
                  ai->ai_protocol,
                  IPPROTO_TCP,
                  IPPROTO_UDP,
                  ai->ai_addrlen,
                  sizeof( struct sockaddr_in ),
                  sizeof( struct sockaddr_in6 ) );
         /*
         ** Now display the protocol-specific formatted socket address.  Note
         ** that the program is requesting that getnameinfo(3) convert the
         ** host & service into numeric strings.
         */
         getnameinfo( ai->ai_addr,
                      ai->ai_addrlen,
                      hostBfr,
                      sizeof( hostBfr ),
                      servBfr,
                      sizeof( servBfr ),
                      NI_NUMERICHOST | NI_NUMERICSERV );
         switch ( ai->ai_family )
         {
            case PF_INET:   /* IPv4 address record. */
            {
               struct sockaddr_in *p = (struct sockaddr_in*) ai->ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin_family:   %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin_addr:     %s\n"
                        "                  sin_port:     %s\n",
                        p->sin_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr );
               break;
            }  /* End CASE of IPv4. */
            case PF_INET6:   /* IPv6 address record. */
            {
               struct sockaddr_in6 *p = (struct sockaddr_in6*) ai->ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin6_family:   %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin6_addr:     %s\n"
                        "                  sin6_port:     %s\n"
                        "                  sin6_flowinfo: %d\n"
                        "                  sin6_scope_id: %d\n",
                        p->sin6_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr,
                        p->sin6_flowinfo,
                        p->sin6_scope_id );
               break;
            }  /* End CASE of IPv6. */
            default:   /* Can never get here, but just for completeness. */
            {
               fprintf( stderr,
                        "%s (line %d): ERROR - Unknown protocol family (%d).\n",
                        pgmName,
                        __LINE__,
                        ai->ai_family );
               freeaddrinfo( aiHead );
               return -1;
            }  /* End DEFAULT case (unknown protocol family). */
         }  /* End SWITCH on protocol family. */
      }  /* End IF verbose mode. */
      /*
      ** Create a socket using the info in the addrinfo structure.
      */
      CHK( desc[ *descSize ] = socket( ai->ai_family,
                                       ai->ai_socktype,
                                       ai->ai_protocol ) );
      /*
      ** Here is the code that prevents "IPv4 mapped addresses", as discussed
      ** in Section 22.1.3.1.  If an IPv6 socket was just created, then set the
      ** IPV6_V6ONLY socket option.
      */
      if ( ai->ai_family == PF_INET6 )
      {
#if defined( IPV6_V6ONLY )
         /*
         ** Disable IPv4 mapped addresses.
         */
         int v6Only = 1;
         CHK( setsockopt( desc[ *descSize ],
                          IPPROTO_IPV6,
                          IPV6_V6ONLY,
                          &v6Only,
                          sizeof( v6Only ) ) );
#else
         /*
         ** IPV6_V6ONLY is not defined, so the socket option can't be set and
         ** thus IPv4 mapped addresses can't be disabled.  Print a warning
         ** message and close the socket.  Design note: If the
         ** #if...#else...#endif construct were removed, then this program
         ** would not compile (because IPV6_V6ONLY isn't defined).  That's an
         ** acceptable approach; IPv4 mapped addresses are certainly disabled
         ** if the program can't build!  However, since this program is also
         ** designed to work for IPv4 sockets as well as IPv6, I decided to
         ** allow the program to compile when IPV6_V6ONLY is not defined, and
         ** turn it into a run-time warning rather than a compile-time error.
         ** IPv4 mapped addresses are still disabled because _all_ IPv6 traffic
         ** is disabled (all IPv6 sockets are closed here), but at least this
         ** way the server can still service IPv4 network traffic.
         */
         fprintf( stderr,
                  "%s (line %d): WARNING - Cannot set IPV6_V6ONLY socket "
                  "option.  Closing IPv6 %s socket.\n",
                  pgmName,
                  __LINE__,
                  ai->ai_protocol == IPPROTO_TCP  ?  "TCP"  :  "UDP" );
         CHK( close( desc[ *descSize ] ) );
         continue;   /* Go to top of FOR loop w/o updating *descSize! */
#endif /* IPV6_V6ONLY */
      }  /* End IF this is an IPv6 socket. */
      /*
      ** Bind the socket.  Again, the info from the addrinfo structure is used.
      */
      CHK( bind( desc[ *descSize ],
                 ai->ai_addr,
                 ai->ai_addrlen ) );
      /*
      ** If this is a TCP socket, put the socket into passive listening mode
      ** (listen is only valid on connection-oriented sockets).
      */
      if ( ai->ai_socktype == SOCK_STREAM )
      {
         CHK( listen( desc[ *descSize ],
                      MAXCONNQLEN ) );
      }
      /*
      ** Socket set up okay.  Bump index to next descriptor array element.
      */
      *descSize += 1;
   }  /* End FOR each address info structure returned. */
   /*
   ** Dummy check for unused address records.
   */
   if ( verbose && ( ai != NULL ) )
   {
      fprintf( stderr,
               "%s (line %d): WARNING - Some address records were "
               "not processed due to insufficient array space.\n",
               pgmName,
               __LINE__ );
   }  /* End IF verbose and some address records remain unprocessed. */
   /*
   ** Clean up.
   */
   freeaddrinfo( aiHead );
   return 0;
}  /* End openSckt() */
/******************************************************************************
* Function: tod
*
* Description:
*    Listen on a set of sockets and send the current time-of-day to any
*    clients.  This function never returns.
*
* Parameters:
*    tSckt     - Array of TCP socket descriptors on which to listen.
*    tScktSize - Size of the tSckt array (nbr of elements).
*    uSckt     - Array of UDP socket descriptors on which to listen.
*    uScktSize - Size of the uSckt array (nbr of elements).
*
* Return Value: None.
******************************************************************************/
static void tod( int    tSckt[ ],
                 size_t tScktSize,
                 int    uSckt[ ],
                 size_t uScktSize )
{
   char                     bfr[ 256 ];
   ssize_t                  count;
   struct pollfd           *desc;
   size_t                   descSize = tScktSize + uScktSize;
   int                      idx;
   int                      newSckt;
   struct sockaddr         *sadr;
   socklen_t                sadrLen;
   struct sockaddr_storage  sockStor;
   int                      status;
   size_t                   timeLen;
   char                    *timeStr;
   time_t                   timeVal;
   ssize_t                  wBytes;
   /*
   ** Allocate memory for the poll(2) array.
   */
   desc = malloc( descSize * sizeof( struct pollfd ) );
   if ( desc == NULL )
   {
      fprintf( stderr,
               "%s (line %d): ERROR - %s.\n",
               pgmName,
               __LINE__,
               strerror( ENOMEM ) );
      exit( 1 );
   }
   /*
   ** Initialize the poll(2) array.
   */
   for ( idx = 0;     idx < descSize;     idx++ )
   {
      desc[ idx ].fd      = idx < tScktSize  ?  tSckt[ idx ]
                                             :  uSckt[ idx - tScktSize ];
      desc[ idx ].events  = POLLIN;
      desc[ idx ].revents = 0;
   }
   /*
   ** Main time-of-day server loop.  Handles both TCP & UDP requests.  This is
   ** an interative server, and all requests are handled directly within the
   ** main loop.
   */
   while ( true )   /* Do forever. */
   {
      /*
      ** Wait for activity on one of the sockets.  The DO..WHILE construct is
      ** used to restart the system call in the event the process is
      ** interrupted by a signal.
      */
      do
      {
         status = poll( desc,
                        descSize,
                        -1 /* Wait indefinitely for input. */ );
      } while ( ( status < 0 ) && ( errno == EINTR ) );
      CHK( status );   /* Check for a bona fide system call error. */
      /*
      ** Get the current time.
      */
      timeVal = time( NULL );
      timeStr = ctime( &timeVal );
      timeLen = strlen( timeStr );
      /*
      ** Indicate that there is new network activity.
      */
      if ( verbose )
      {
         char *s = malloc( timeLen+1 );
         strcpy( s, timeStr );
         s[ timeLen-1 ] = '\0';   /* Overwrite '\n' in date string. */
         fprintf( stderr,
                  "%s: New network activity on %s.\n",
                  pgmName,
                  s );
         free( s );
      }  /* End IF verbose. */
      /*
      ** Process sockets with input available.
      */
      for ( idx = 0;     idx < descSize;     idx++ )
      {
         switch ( desc[ idx ].revents )
         {
            case 0:        /* No activity on this socket; try the next. */
               continue;
            case POLLIN:   /* Network activity.  Go process it.         */
               break;
            default:       /* Invalid poll events.                      */
            {
               fprintf( stderr,
                        "%s (line %d): ERROR - Invalid poll event (0x%02X).\n",
                        pgmName,
                        __LINE__,
                        desc[ idx ].revents );
               exit( 1 );
            }
         }  /* End SWITCH on returned poll events. */
         /*
         ** Determine if this is a TCP request or UDP request.
         */
         if ( idx < tScktSize )
         {
            /*
            ** TCP connection requested.  Accept it.  Notice the use of
            ** the sockaddr_storage data type.
            */
            sadrLen = sizeof( sockStor );
            sadr    = (struct sockaddr*) &sockStor;
            CHK( newSckt = accept( desc[ idx ].fd,
                                   sadr,
                                   &sadrLen ) );
            CHK( shutdown( newSckt,       /* Server never recv's anything. */
                           SHUT_RD ) );
            if ( verbose )
            {
               /*
               ** Display the socket address of the remote client.  Begin with
               ** the address-independent fields.
               */
               fprintf( stderr,
                        "Sockaddr info for new TCP client:\n"
                        "   sa_family = %d (AF_INET = %d, AF_INET6 = %d)\n"
                        "   addr len  = %d (sockaddr_in = %d, "
                        "sockaddr_in6 = %d)\n",
                        sadr->sa_family,
                        AF_INET,
                        AF_INET6,
                        sadrLen,
                        sizeof( struct sockaddr_in ),
                        sizeof( struct sockaddr_in6 ) );
               /*
               ** Display the address-specific fields.
               */
               getnameinfo( sadr,
                            sadrLen,
                            hostBfr,
                            sizeof( hostBfr ),
                            servBfr,
                            sizeof( servBfr ),
                            NI_NUMERICHOST | NI_NUMERICSERV );
               /*
               ** Notice that we're switching on an address family now, not a
               ** protocol family.
               */
               switch ( sadr->sa_family )
               {
                  case AF_INET:   /* IPv4 address. */
                  {
                     struct sockaddr_in *p = (struct sockaddr_in*) sadr;
                     fprintf( stderr,
                              "   sin_addr  = sin_family: %d\n"
                              "               sin_addr:   %s\n"
                              "               sin_port:   %s\n",
                              p->sin_family,
                              hostBfr,
                              servBfr );
                     break;
                  }  /* End CASE of IPv4. */
                  case AF_INET6:   /* IPv6 address. */
                  {
                     struct sockaddr_in6 *p = (struct sockaddr_in6*) sadr;
                     fprintf( stderr,
                              "   sin6_addr = sin6_family:   %d\n"
                              "               sin6_addr:     %s\n"
                              "               sin6_port:     %s\n"
                              "               sin6_flowinfo: %d\n"
                              "               sin6_scope_id: %d\n",
                              p->sin6_family,
                              hostBfr,
                              servBfr,
                              p->sin6_flowinfo,
                              p->sin6_scope_id );
                     break;
                  }  /* End CASE of IPv6. */
                  default:   /* Can never get here, but for completeness. */
                  {
                     fprintf( stderr,
                              "%s (line %d): ERROR - Unknown address "
                              "family (%d).\n",
                              pgmName,
                              __LINE__,
                              sadr->sa_family );
                     break;
                  }  /* End DEFAULT case (unknown address family). */
               }  /* End SWITCH on address family. */
            }  /* End IF verbose mode. */
            /*
            ** Send the TOD to the client.
            */
            wBytes = timeLen;
            while ( wBytes > 0 )
            {
               do
               {
                  count = write( newSckt,
                                 timeStr,
                                 wBytes );
               } while ( ( count < 0 ) && ( errno == EINTR ) );
               CHK( count );   /* Check for a bona fide error. */
               wBytes -= count;
            }  /* End WHILE there is data to send. */
            CHK( close( newSckt ) );
         }  /* End IF this was a TCP connection request. */
         else
         {
            /*
            ** This is a UDP socket, and a datagram is available.  The funny
            ** thing about UDP requests is that this server doesn't require any
            ** client input; but it can't send the TOD unless it knows a client
            ** wants the data, and the only way that can occur with UDP is if
            ** the server receives a datagram from the client.  Thus, the
            ** server must receive _something_, but the content of the datagram
            ** is irrelevant.  Read in the datagram.  Again note the use of
            ** sockaddr_storage to receive the address.
            */
            sadrLen = sizeof( sockStor );
            sadr    = (struct sockaddr*) &sockStor;
            CHK( count = recvfrom( desc[ idx ].fd,
                                   bfr,
                                   sizeof( bfr ),
                                   0,
                                   sadr,
                                   &sadrLen ) );
            /*
            ** Display whatever was received on stdout.
            */
            if ( verbose )
            {
               ssize_t rBytes = count;
               fprintf( stderr,
                        "%s: UDP datagram received (%d bytes).\n",
                        pgmName,
                        count );
               while ( count > 0 )
               {
                  fputc( bfr[ rBytes - count-- ],
                         stdout );
               }
               if ( bfr[ rBytes-1 ] != '\n' )
                  fputc( '\n', stdout );   /* Newline also flushes stdout. */
               /*
               ** Display the socket address of the remote client.  Address-
               ** independent fields first.
               */
               fprintf( stderr,
                        "Remote client's sockaddr info:\n"
                        "   sa_family = %d (AF_INET = %d, AF_INET6 = %d)\n"
                        "   addr len  = %d (sockaddr_in = %d, "
                        "sockaddr_in6 = %d)\n",
                        sadr->sa_family,
                        AF_INET,
                        AF_INET6,
                        sadrLen,
                        sizeof( struct sockaddr_in ),
                        sizeof( struct sockaddr_in6 ) );
               /*
               ** Display the address-specific information.
               */
               getnameinfo( sadr,
                            sadrLen,
                            hostBfr,
                            sizeof( hostBfr ),
                            servBfr,
                            sizeof( servBfr ),
                            NI_NUMERICHOST | NI_NUMERICSERV );
               switch ( sadr->sa_family )
               {
                  case AF_INET:   /* IPv4 address. */
                  {
                     struct sockaddr_in *p = (struct sockaddr_in*) sadr;
                     fprintf( stderr,
                              "   sin_addr  = sin_family: %d\n"
                              "               sin_addr:   %s\n"
                              "               sin_port:   %s\n",
                              p->sin_family,
                              hostBfr,
                              servBfr );
                     break;
                  }  /* End CASE of IPv4 address. */
                  case AF_INET6:   /* IPv6 address. */
                  {
                     struct sockaddr_in6 *p = (struct sockaddr_in6*) sadr;
                     fprintf( stderr,
                              "   sin6_addr = sin6_family:   %d\n"
                              "               sin6_addr:     %s\n"
                              "               sin6_port:     %s\n"
                              "               sin6_flowinfo: %d\n"
                              "               sin6_scope_id: %d\n",
                              p->sin6_family,
                              hostBfr,
                              servBfr,
                              p->sin6_flowinfo,
                              p->sin6_scope_id );
                     break;
                  }  /* End CASE of IPv6 address. */
                  default:   /* Can never get here, but for completeness. */
                  {
                     fprintf( stderr,
                              "%s (line %d): ERROR - Unknown address "
                              "family (%d).\n",
                              pgmName,
                              __LINE__,
                              sadr->sa_family );
                     break;
                  }  /* End DEFAULT case (unknown address family). */
               }  /* End SWITCH on address family. */
            }  /* End IF verbose mode. */
            /*
            ** Send the time-of-day to the client.
            */
            wBytes = timeLen;
            while ( wBytes > 0 )
            {
               do
               {
                  count = sendto( desc[ idx ].fd,
                                  timeStr,
                                  wBytes,
                                  0,
                                  sadr,        /* Address & address length   */
                                  sadrLen );   /*    received in recvfrom(). */
               } while ( ( count < 0 ) && ( errno == EINTR ) );
               CHK( count );   /* Check for a bona fide error. */
               wBytes -= count;
            }  /* End WHILE there is data to send. */
         }  /* End ELSE a UDP datagram is available. */
         desc[ idx ].revents = 0;   /* Clear the returned poll events. */
      }  /* End FOR each socket descriptor. */
   }  /* End WHILE forever. */
}  /* End tod() */
]]></screen></sect3><sect3>
<title>'Daytime' TCP Client Code</title>
<para>The TCP client code is found in file tod6tc.c (time-of-day IPv6 TCP client). Once built, the TCP client may be started using the following command syntax (assuming tod6tc is the executable file):</para><screen>
<![CDATA[tod6tc [-v] [-s scope_id] [host [service]]
]]></screen><para>ARGUMENTS:</para><variablelist>
<varlistentry><term>host</term><listitem><para>The hostname or IP address (dotted decimal or colon-hex) of the remote host providing the service. Default is "localhost".</para></listitem></varlistentry><varlistentry><term>service</term><listitem><para>The TCP service (or well-known port number) to which a connection attempt is made. Default is "daytime".</para></listitem></varlistentry></variablelist><para>OPTIONS:</para><variablelist>
<varlistentry><term>-s</term><listitem><para>This option is only meaningful for IPv6 addresses, and is used to set the scope identifier (i.e. the network interface on which to establish the connection). Default is "eth0". If host is a scoped address, this option is ignored.</para></listitem></varlistentry><varlistentry><term>-v</term><listitem><para>Turn on verbose mode.</para></listitem></varlistentry></variablelist><para>The TCP client source code contained in tod6tc.c follows:</para><screen>
<![CDATA[/******************************************************************************
* File: tod6tc.c
* Description: Contains source code for an IPv6-capable 'daytime' TCP client.
* Author: John Wenker, Sr. Software Engineer
*         Performance Technologies, San Diego, USA
******************************************************************************/
/*
** System header files.
*/
#include <errno.h>        /* errno declaration and error codes.             */
#include <net/if.h>       /* if_nametoindex(3).                             */
#include <netdb.h>        /* getaddrinfo(3) and associated definitions.     */
#include <netinet/in.h>   /* sockaddr_in and sockaddr_in6 definitions.      */
#include <stdio.h>        /* printf(3) et al.                               */
#include <stdlib.h>       /* exit(2).                                       */
#include <string.h>       /* String manipulation and memory functions.      */
#include <sys/socket.h>   /* Socket functions (socket(2), connect(2), etc). */
#include <unistd.h>       /* getopt(3), read(2), etc.                       */
/*
** Constants & macros.
*/
#define DFLT_HOST      "localhost"   /* Default server name.              */
#define DFLT_SCOPE_ID  "eth0"        /* Default scope identifier.         */
#define DFLT_SERVICE   "daytime"     /* Default service name.             */
#define INVALID_DESC   -1            /* Invalid file (socket) descriptor. */
#define MAXBFRSIZE     256           /* Max bfr sz to read remote TOD.    */
#define VALIDOPTS      "s:v"         /* Valid command options.            */
/*
** Type definitions (for convenience).
*/
typedef enum { false = 0, true } boolean;
typedef struct sockaddr_in       sockaddr_in_t;
typedef struct sockaddr_in6      sockaddr_in6_t;
/*
** Prototypes for internal helper functions.
*/
static int  openSckt( const char   *host,
                      const char   *service,
                      unsigned int  scopeId );
static void tod( int sckt );
/*
** Global (within this file only) data objects.
*/
static const char *pgmName;           /* Program name (w/o directory). */
static boolean     verbose = false;   /* Verbose mode.                 */
/*
** Usage macro.
*/
#define USAGE                                                            \
        {                                                                \
           fprintf( stderr,                                              \
                    "Usage: %s [-v] [-s scope_id] [host [service]]\n",   \
                    pgmName );                                           \
           exit( 127 );                                                  \
        }  /* End USAGE macro. */
/*
** This "macro" (even though it's really a function) is loosely based on the
** CHK() macro by Dr. V. Vinge (see server code).  The status parameter is
** a boolean expression indicating the return code from one of the usual system
** calls that returns -1 on error.  If a system call error occurred, an alert
** is written to stderr.  It returns a boolean value indicating success/failure
** of the system call.
**
** Example: if ( !SYSCALL( "write",
**                         count = write( fd, bfr, size ) ) )
**          {
**             // Error processing... but SYSCALL() will have already taken
**             // care of dumping an error alert to stderr.
**          }
*/
static __inline boolean SYSCALL( const char *syscallName,
                                 int         lineNbr,
                                 int         status )
{
   if ( ( status == -1 ) && verbose )
   {
      fprintf( stderr,
               "%s (line %d): System call failed ('%s') - %s.\n",
               pgmName,
               lineNbr,
               syscallName,
               strerror( errno ) );
   }
   return status != -1;   /* True if the system call was successful. */
}  /* End SYSCALL() */
/******************************************************************************
* Function: main
*
* Description:
*    Connect to a remote time-of-day service and write the remote host's TOD to
*    stdout.
*
* Parameters:
*    The usual argc & argv parameters to a main() program.
*
* Return Value:
*    This function always returns zero.
******************************************************************************/
int main( int   argc,
          char *argv[ ] )
{
   const char   *host     = DFLT_HOST;
   int           opt;
   int           sckt;
   unsigned int  scopeId  = if_nametoindex( DFLT_SCOPE_ID );
   const char   *service  = DFLT_SERVICE;
   /*
   ** Determine the program name (w/o directory prefix).
   */
   pgmName = (const char*) strrchr( argv[ 0 ], '/' );
   pgmName = pgmName == NULL  ?  argv[ 0 ]  :  pgmName+1;
   /*
   ** Process command line options.
   */
   opterr = 0;   /* Turns off "invalid option" error messages. */
   while ( ( opt = getopt( argc, argv, VALIDOPTS ) ) != -1 )
   {
      switch ( opt )
      {
         case 's':   /* Scope identifier (IPv6 kluge). */
         {
            scopeId = if_nametoindex( optarg );
            if ( scopeId == 0 )
            {
               fprintf( stderr,
                        "%s: Unknown network interface (%s).\n",
                        pgmName,
                        optarg );
               USAGE;
            }
            break;
         }
         case 'v':   /* Verbose mode. */
         {
            verbose = true;
            break;
         }
         default:
         {
            USAGE;
         }
      }  /* End SWITCH on command option. */
   } /* End WHILE processing command options. */
   /*
   ** Process command arguments.  At the end of the above loop, optind is the
   ** index of the first NON-option argv element.
   */
   switch ( argc - optind )
   {
      case 2:   /* Both host & service are specified on the command line. */
      {
          service = argv[ optind + 1 ];
          /***** Fall through *****/
      }
      case 1:   /* Host is specified on the command line. */
      {
          host = argv[ optind ];
          /***** Fall through *****/
      }
      case 0:   /* Use default host & service. */
      {
          break;
      }
      default:
      {
         USAGE;
      }
   }  /* End SWITCH on number of command arguments. */
   /*
   ** Open a connection to the indicated host/service.
   **
   ** Note that if all three of the following conditions are met, then the
   ** scope identifier remains unresolved at this point.
   **    1) The default network interface is unknown for some reason.
   **    2) The -s option was not used on the command line.
   **    3) An IPv6 "scoped address" was not specified for the hostname on the
   **       command line.
   ** If the above three conditions are met, then only an IPv4 socket can be
   ** opened (connect(2) fails without the scope ID properly set for IPv6
   ** sockets).
   */
   if ( ( sckt = openSckt( host,
                           service,
                           scopeId ) ) == INVALID_DESC )
   {
      fprintf( stderr,
               "%s: Sorry... a connection could not be established.\n",
               pgmName );
      exit( 1 );
   }
   /*
   ** Get the remote time-of-day.
   */
   tod( sckt );
   /*
   ** Close the connection and terminate.
   */
   (void) SYSCALL( "close",
                   __LINE__,
                   close( sckt ) );
   return 0;
}  /* End main() */
/******************************************************************************
* Function: openSckt
*
* Description:
*    Sets up a TCP connection to a remote server.  Getaddrinfo(3) is used to
*    perform lookup functions and can return multiple address records (i.e. a
*    list of 'struct addrinfo' records).  This function traverses the list and
*    tries to establish a connection to the remote server.  The function ends
*    when either a connection has been established or all records in the list
*    have been processed.
*
* Parameters:
*    host    - A pointer to a character string representing the hostname or IP
*              address (IPv4 or IPv6) of the remote server.
*    service - A pointer to a character string representing the service name or
*              well-known port number.
*    scopeId - For IPv6 sockets only.  This is the index corresponding to the
*              network interface on which to set up the connection.  This
*              parameter is ignored for IPv4 sockets or when an IPv6 "scoped
*              address" is specified in 'host' (i.e. where the colon-hex
*              network address is augmented with the scope ID).
*
* Return Value:
*    Returns the socket descriptor for the connection, or INVALID_DESC if all
*    address records have been processed and a connection could not be
*    established.
******************************************************************************/
static int openSckt( const char   *host,
                     const char   *service,
                     unsigned int  scopeId )
{
   struct addrinfo *ai;
   int              aiErr;
   struct addrinfo *aiHead;
   struct addrinfo  hints;
   sockaddr_in6_t  *pSadrIn6;
   int              sckt;
   /*
   ** Initialize the 'hints' structure for getaddrinfo(3).
   **
   ** Notice that the 'ai_family' field is set to PF_UNSPEC, indicating to
   ** return both IPv4 and IPv6 address records for the host/service.  Most of
   ** the time, the user isn't going to care whether an IPv4 connection or an
   ** IPv6 connection is established; the user simply wants to exchange data
   ** with the remote host and doesn't care how it's done.  Sometimes, however,
   ** the user might want to explicitly specify the type of underlying socket.
   ** It is left as an exercise for the motivated reader to add a command line
   ** option allowing the user to specify the IP protocol, and then process the
   ** list of addresses accordingly (it's not that difficult).
   */
   memset( &hints, 0, sizeof( hints ) );
   hints.ai_family   = PF_UNSPEC;     /* IPv4 or IPv6 records (don't care). */
   hints.ai_socktype = SOCK_STREAM;   /* Connection-oriented byte stream.   */
   hints.ai_protocol = IPPROTO_TCP;   /* TCP transport layer protocol only. */
   /*
   ** Look up the host/service information.
   */
   if ( ( aiErr = getaddrinfo( host,
                               service,
                               &hints,
                               &aiHead ) ) != 0 )
   {
      fprintf( stderr,
               "%s (line %d): ERROR - %s.\n",
               pgmName,
               __LINE__,
               gai_strerror( aiErr ) );
      return INVALID_DESC;
   }
   /*
   ** Go through the list and try to open a connection.  Continue until either
   ** a connection is established or the entire list is exhausted.
   */
   for ( ai = aiHead,   sckt = INVALID_DESC;
         ( ai != NULL ) && ( sckt == INVALID_DESC );
         ai = ai->ai_next )
   {
      /*
      ** IPv6 kluge.  Make sure the scope ID is set.
      */
      if ( ai->ai_family == PF_INET6 )
      {
         pSadrIn6 = (sockaddr_in6_t*) ai->ai_addr;
         if ( pSadrIn6->sin6_scope_id == 0 )
         {
            pSadrIn6->sin6_scope_id = scopeId;
         }  /* End IF the scope ID wasn't set. */
      }  /* End IPv6 kluge. */
      /*
      ** Display the address info for the remote host.
      */
      if ( verbose )
      {
         /*
         ** Temporary character string buffers for host & service.
         */
         char hostBfr[ NI_MAXHOST ];
         char servBfr[ NI_MAXSERV ];
         /*
         ** Display the address information just fetched.  Start with the
         ** common (protocol-independent) stuff first.
         */
         fprintf( stderr,
                  "Address info:\n"
                  "   ai_flags     = 0x%02X\n"
                  "   ai_family    = %d (PF_INET = %d, PF_INET6 = %d)\n"
                  "   ai_socktype  = %d (SOCK_STREAM = %d, SOCK_DGRAM = %d)\n"
                  "   ai_protocol  = %d (IPPROTO_TCP = %d, IPPROTO_UDP = %d)\n"
                  "   ai_addrlen   = %d (sockaddr_in = %d, "
                  "sockaddr_in6 = %d)\n",
                  ai->ai_flags,
                  ai->ai_family,
                  PF_INET,
                  PF_INET6,
                  ai->ai_socktype,
                  SOCK_STREAM,
                  SOCK_DGRAM,
                  ai->ai_protocol,
                  IPPROTO_TCP,
                  IPPROTO_UDP,
                  ai->ai_addrlen,
                  sizeof( struct sockaddr_in ),
                  sizeof( struct sockaddr_in6 ) );
         /*
         ** Display the protocol-specific formatted address.
         */
         getnameinfo( ai->ai_addr,
                      ai->ai_addrlen,
                      hostBfr,
                      sizeof( hostBfr ),
                      servBfr,
                      sizeof( servBfr ),
                      NI_NUMERICHOST | NI_NUMERICSERV );
         switch ( ai->ai_family )
         {
            case PF_INET:   /* IPv4 address record. */
            {
               sockaddr_in_t *pSadrIn = (sockaddr_in_t*) ai->ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin_family: %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin_addr:   %s\n"
                        "                  sin_port:   %s\n",
                        pSadrIn->sin_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr );
               break;
            }  /* End CASE of IPv4 record. */
            case PF_INET6:   /* IPv6 address record. */
            {
               pSadrIn6 = (sockaddr_in6_t*) ai->ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin6_family:   %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin6_addr:     %s\n"
                        "                  sin6_port:     %s\n"
                        "                  sin6_flowinfo: %d\n"
                        "                  sin6_scope_id: %d\n",
                        pSadrIn6->sin6_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr,
                        pSadrIn6->sin6_flowinfo,
                        pSadrIn6->sin6_scope_id );
               break;
            }  /* End CASE of IPv6 record. */
            default:   /* Can never get here, but just for completeness. */
            {
               fprintf( stderr,
                        "%s (line %d): ERROR - Unknown protocol family (%d).\n",
                        pgmName,
                        __LINE__,
                        ai->ai_family );
               break;
            }  /* End DEFAULT case (unknown protocol family). */
         }  /* End SWITCH on protocol family. */
      }  /* End IF verbose mode. */
      /*
      ** Create a socket.
      */
      if ( !SYSCALL( "socket",
                     __LINE__,
                     sckt = socket( ai->ai_family,
                                    ai->ai_socktype,
                                    ai->ai_protocol ) ) )
      {
         sckt = INVALID_DESC;
         continue;   /* Try the next address record in the list. */
      }
      /*
      ** Connect to the remote host.
      */
      if ( !SYSCALL( "connect",
                     __LINE__,
                     connect( sckt,
                              ai->ai_addr,
                              ai->ai_addrlen ) ) )
      {
         (void) close( sckt );   /* Could use SYSCALL() again here, but why? */
         sckt = INVALID_DESC;
         continue;   /* Try the next address record in the list. */
      }
   }  /* End FOR each address record returned by getaddrinfo(3). */
   /*
   ** Clean up & return.
   */
   freeaddrinfo( aiHead );
   return sckt;
}  /* End openSckt() */
/******************************************************************************
* Function: tod
*
* Description:
*    Receive the time-of-day from the remote server and write it to stdout.
*
* Parameters:
*    sckt - The socket descriptor for the connection.
*
* Return Value: None.
******************************************************************************/
static void tod( int sckt )
{
   char bfr[ MAXBFRSIZE+1 ];
   int  inBytes;
   /*
   ** The client never sends anything, so shut down the write side of the
   ** connection.
   */
   if ( !SYSCALL( "shutdown",
                  __LINE__,
                  shutdown( sckt, SHUT_WR ) ) )
   {
      return;
   }
   /*
   ** Read the time-of-day from the remote host.
   */
   do
   {
      if ( !SYSCALL( "read",
                     __LINE__,
                     inBytes = read( sckt,
                                     bfr,
                                     MAXBFRSIZE ) ) )
      {
         return;
      }
      bfr[ inBytes ] = '\0';   /* Null-terminate the received string. */
      fputs( bfr, stdout );    /* Null string if EOF (inBytes == 0).  */
   } while ( inBytes > 0 );
   fflush( stdout );
}  /* End tod() */
]]></screen></sect3><sect3>
<title>'Daytime' UDP Client Code</title>
<para>The UDP client code is found in file tod6uc.c (time-of-day IPv6 UDP client). It is almost an exact duplicate of the TCP client (and in fact was derived from it), but is included in this HowTo for completeness. Once built, the UDP client may be started using the following command syntax (assuming tod6uc is the executable file):</para><screen>
<![CDATA[tod6uc [-v] [-s scope_id] [host [service]]
]]></screen><para>ARGUMENTS:</para><variablelist>
<varlistentry><term>host</term><listitem><para>The hostname or IP address (dotted decimal or colon-hex) of the remote host providing the service. Default is "localhost".</para></listitem></varlistentry><varlistentry><term>service</term><listitem><para>The UDP service (or well-known port number) to which datagrams are sent. Default is "daytime".</para></listitem></varlistentry></variablelist><para>OPTIONS:</para><variablelist>
<varlistentry><term>-s</term><listitem><para>This option is only meaningful for IPv6 addresses, and is used to set the scope identifier (i.e. the network interface on which to exchange datagrams). Default is "eth0". If host is a scoped address, this option is ignored.</para></listitem></varlistentry><varlistentry><term>-v</term><listitem><para>Turn on verbose mode.</para></listitem></varlistentry></variablelist><para>The UDP client source code contained in tod6uc.c follows:</para><screen>
<![CDATA[/******************************************************************************
* File: tod6uc.c
* Description: Contains source code for an IPv6-capable 'daytime' UDP client.
* Author: John Wenker, Sr. Software Engineer
*         Performance Technologies, San Diego, USA
******************************************************************************/
/*
** System header files.
*/
#include <errno.h>        /* errno declaration and error codes.             */
#include <net/if.h>       /* if_nametoindex(3).                             */
#include <netdb.h>        /* getaddrinfo(3) and associated definitions.     */
#include <netinet/in.h>   /* sockaddr_in and sockaddr_in6 definitions.      */
#include <stdio.h>        /* printf(3) et al.                               */
#include <stdlib.h>       /* exit(2).                                       */
#include <string.h>       /* String manipulation and memory functions.      */
#include <sys/socket.h>   /* Socket functions (socket(2), connect(2), etc). */
#include <unistd.h>       /* getopt(3), recvfrom(2), sendto(2), etc.        */
/*
** Constants & macros.
*/
#define DFLT_HOST      "localhost"   /* Default server name.              */
#define DFLT_SCOPE_ID  "eth0"        /* Default scope identifier.         */
#define DFLT_SERVICE   "daytime"     /* Default service name.             */
#define INVALID_DESC   -1            /* Invalid file (socket) descriptor. */
#define MAXBFRSIZE     256           /* Max bfr sz to read remote TOD.    */
#define VALIDOPTS      "s:v"         /* Valid command options.            */
/*
** Type definitions (for convenience).
*/
typedef enum { false = 0, true } boolean;
typedef struct sockaddr_in       sockaddr_in_t;
typedef struct sockaddr_in6      sockaddr_in6_t;
/*
** Prototypes for internal helper functions.
*/
static int  openSckt( const char   *host,
                      const char   *service,
                      unsigned int  scopeId );
static void tod( int sckt );
/*
** Global (within this file only) data objects.
*/
static const char *pgmName;           /* Program name (w/o directory). */
static boolean     verbose = false;   /* Verbose mode.                 */
/*
** Usage macro.
*/
#define USAGE                                                            \
        {                                                                \
           fprintf( stderr,                                              \
                    "Usage: %s [-v] [-s scope_id] [host [service]]\n",   \
                    pgmName );                                           \
           exit( 127 );                                                  \
        }  /* End USAGE macro. */
/*
** This "macro" (even though it's really a function) is loosely based on the
** CHK() macro by Dr. V. Vinge (see server code).  The status parameter is
** a boolean expression indicating the return code from one of the usual system
** calls that returns -1 on error.  If a system call error occurred, an alert
** is written to stderr.  It returns a boolean value indicating success/failure
** of the system call.
**
** Example: if ( !SYSCALL( "write",
**                         count = write( fd, bfr, size ) ) )
**          {
**             // Error processing... but SYSCALL() will have already taken
**             // care of dumping an error alert to stderr.
**          }
*/
static __inline boolean SYSCALL( const char *syscallName,
                                 int         lineNbr,
                                 int         status )
{
   if ( ( status == -1 ) && verbose )
   {
      fprintf( stderr,
               "%s (line %d): System call failed ('%s') - %s.\n",
               pgmName,
               lineNbr,
               syscallName,
               strerror( errno ) );
   }
   return status != -1;   /* True if the system call was successful. */
}  /* End SYSCALL() */
/******************************************************************************
* Function: main
*
* Description:
*    Connect to a remote time-of-day service and write the remote host's TOD to
*    stdout.
*
* Parameters:
*    The usual argc & argv parameters to a main() program.
*
* Return Value:
*    This function always returns zero.
******************************************************************************/
int main( int   argc,
          char *argv[ ] )
{
   const char   *host     = DFLT_HOST;
   int           opt;
   int           sckt;
   unsigned int  scopeId  = if_nametoindex( DFLT_SCOPE_ID );
   const char   *service  = DFLT_SERVICE;
   /*
   ** Determine the program name (w/o directory prefix).
   */
   pgmName = (const char*) strrchr( argv[ 0 ], '/' );
   pgmName = pgmName == NULL  ?  argv[ 0 ]  :  pgmName+1;
   /*
   ** Process command line options.
   */
   opterr = 0;   /* Turns off "invalid option" error messages. */
   while ( ( opt = getopt( argc, argv, VALIDOPTS ) ) != -1 )
   {
      switch ( opt )
      {
         case 's':   /* Scope identifier (IPv6 kluge). */
         {
            scopeId = if_nametoindex( optarg );
            if ( scopeId == 0 )
            {
               fprintf( stderr,
                        "%s: Unknown network interface (%s).\n",
                        pgmName,
                        optarg );
               USAGE;
            }
            break;
         }
         case 'v':   /* Verbose mode. */
         {
            verbose = true;
            break;
         }
         default:
         {
            USAGE;
         }
      }  /* End SWITCH on command option. */
   } /* End WHILE processing command options. */
   /*
   ** Process command arguments.  At the end of the above loop, optind is the
   ** index of the first NON-option argv element.
   */
   switch ( argc - optind )
   {
      case 2:   /* Both host & service are specified on the command line. */
      {
          service = argv[ optind + 1 ];
          /***** Fall through *****/
      }
      case 1:   /* Host is specified on the command line. */
      {
          host = argv[ optind ];
          /***** Fall through *****/
      }
      case 0:   /* Use default host & service. */
      {
          break;
      }
      default:
      {
         USAGE;
      }
   }  /* End SWITCH on number of command arguments. */
   /*
   ** Open a connection to the indicated host/service.
   **
   ** Note that if all three of the following conditions are met, then the
   ** scope identifier remains unresolved at this point.
   **    1) The default network interface is unknown for some reason.
   **    2) The -s option was not used on the command line.
   **    3) An IPv6 "scoped address" was not specified for the hostname on the
   **       command line.
   ** If the above three conditions are met, then only an IPv4 socket can be
   ** opened (connect(2) fails without the scope ID properly set for IPv6
   ** sockets).
   */
   if ( ( sckt = openSckt( host,
                           service,
                           scopeId ) ) == INVALID_DESC )
   {
      fprintf( stderr,
               "%s: Sorry... a connectionless socket could "
               "not be set up.\n",
               pgmName );
      exit( 1 );
   }
   /*
   ** Get the remote time-of-day.
   */
   tod( sckt );
   /*
   ** Close the connection and terminate.
   */
   (void) SYSCALL( "close",
                   __LINE__,
                   close( sckt ) );
   return 0;
}  /* End main() */
/******************************************************************************
* Function: openSckt
*
* Description:
*    Sets up a UDP socket to a remote server.  Getaddrinfo(3) is used to
*    perform lookup functions and can return multiple address records (i.e. a
*    list of 'struct addrinfo' records).  This function traverses the list and
*    tries to establish a connection to the remote server.  The function ends
*    when either a connection has been established or all records in the list
*    have been processed.
*
* Parameters:
*    host    - A pointer to a character string representing the hostname or IP
*              address (IPv4 or IPv6) of the remote server.
*    service - A pointer to a character string representing the service name or
*              well-known port number.
*    scopeId - For IPv6 sockets only.  This is the index corresponding to the
*              network interface on which to exchange datagrams.  This
*              parameter is ignored for IPv4 sockets or when an IPv6 "scoped
*              address" is specified in 'host' (i.e. where the colon-hex
*              network address is augmented with the scope ID).
*
* Return Value:
*    Returns the socket descriptor for the connection, or INVALID_DESC if all
*    address records have been processed and a socket could not be initialized.
******************************************************************************/
static int openSckt( const char   *host,
                     const char   *service,
                     unsigned int  scopeId )
{
   struct addrinfo *ai;
   int              aiErr;
   struct addrinfo *aiHead;
   struct addrinfo  hints;
   sockaddr_in6_t  *pSadrIn6;
   int              sckt;
   /*
   ** Initialize the 'hints' structure for getaddrinfo(3).
   **
   ** Notice that the 'ai_family' field is set to PF_UNSPEC, indicating to
   ** return both IPv4 and IPv6 address records for the host/service.  Most of
   ** the time, the user isn't going to care whether an IPv4 connection or an
   ** IPv6 connection is established; the user simply wants to exchange data
   ** with the remote host and doesn't care how it's done.  Sometimes, however,
   ** the user might want to explicitly specify the type of underlying socket.
   ** It is left as an exercise for the motivated reader to add a command line
   ** option allowing the user to specify the IP protocol, and then process the
   ** list of addresses accordingly (it's not that difficult).
   */
   memset( &hints, 0, sizeof( hints ) );
   hints.ai_family   = PF_UNSPEC;     /* IPv4 or IPv6 records (don't care). */
   hints.ai_socktype = SOCK_DGRAM;    /* Connectionless communication.      */
   hints.ai_protocol = IPPROTO_UDP;   /* UDP transport layer protocol only. */
   /*
   ** Look up the host/service information.
   */
   if ( ( aiErr = getaddrinfo( host,
                               service,
                               &hints,
                               &aiHead ) ) != 0 )
   {
      fprintf( stderr,
               "%s (line %d): ERROR - %s.\n",
               pgmName,
               __LINE__,
               gai_strerror( aiErr ) );
      return INVALID_DESC;
   }
   /*
   ** Go through the list and try to open a connection.  Continue until either
   ** a connection is established or the entire list is exhausted.
   */
   for ( ai = aiHead,   sckt = INVALID_DESC;
         ( ai != NULL ) && ( sckt == INVALID_DESC );
         ai = ai->ai_next )
   {
      /*
      ** IPv6 kluge.  Make sure the scope ID is set.
      */
      if ( ai->ai_family == PF_INET6 )
      {
         pSadrIn6 = (sockaddr_in6_t*) ai->ai_addr;
         if ( pSadrIn6->sin6_scope_id == 0 )
         {
            pSadrIn6->sin6_scope_id = scopeId;
         }  /* End IF the scope ID wasn't set. */
      }  /* End IPv6 kluge. */
      /*
      ** Display the address info for the remote host.
      */
      if ( verbose )
      {
         /*
         ** Temporary character string buffers for host & service.
         */
         char hostBfr[ NI_MAXHOST ];
         char servBfr[ NI_MAXSERV ];
         /*
         ** Display the address information just fetched.  Start with the
         ** common (protocol-independent) stuff first.
         */
         fprintf( stderr,
                  "Address info:\n"
                  "   ai_flags     = 0x%02X\n"
                  "   ai_family    = %d (PF_INET = %d, PF_INET6 = %d)\n"
                  "   ai_socktype  = %d (SOCK_STREAM = %d, SOCK_DGRAM = %d)\n"
                  "   ai_protocol  = %d (IPPROTO_TCP = %d, IPPROTO_UDP = %d)\n"
                  "   ai_addrlen   = %d (sockaddr_in = %d, "
                  "sockaddr_in6 = %d)\n",
                  ai->ai_flags,
                  ai->ai_family,
                  PF_INET,
                  PF_INET6,
                  ai->ai_socktype,
                  SOCK_STREAM,
                  SOCK_DGRAM,
                  ai->ai_protocol,
                  IPPROTO_TCP,
                  IPPROTO_UDP,
                  ai->ai_addrlen,
                  sizeof( struct sockaddr_in ),
                  sizeof( struct sockaddr_in6 ) );
         /*
         ** Display the protocol-specific formatted address.
         */
         getnameinfo( ai->ai_addr,
                      ai->ai_addrlen,
                      hostBfr,
                      sizeof( hostBfr ),
                      servBfr,
                      sizeof( servBfr ),
                      NI_NUMERICHOST | NI_NUMERICSERV );
         switch ( ai->ai_family )
         {
            case PF_INET:   /* IPv4 address record. */
            {
               sockaddr_in_t *pSadrIn = (sockaddr_in_t*) ai->ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin_family: %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin_addr:   %s\n"
                        "                  sin_port:   %s\n",
                        pSadrIn->sin_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr );
               break;
            }  /* End CASE of IPv4 record. */
            case PF_INET6:   /* IPv6 address record. */
            {
               pSadrIn6 = (sockaddr_in6_t*) ai->ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin6_family:   %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin6_addr:     %s\n"
                        "                  sin6_port:     %s\n"
                        "                  sin6_flowinfo: %d\n"
                        "                  sin6_scope_id: %d\n",
                        pSadrIn6->sin6_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr,
                        pSadrIn6->sin6_flowinfo,
                        pSadrIn6->sin6_scope_id );
               break;
            }  /* End CASE of IPv6 record. */
            default:   /* Can never get here, but just for completeness. */
            {
               fprintf( stderr,
                        "%s (line %d): ERROR - Unknown protocol family (%d).\n",
                        pgmName,
                        __LINE__,
                        ai->ai_family );
               break;
            }  /* End DEFAULT case (unknown protocol family). */
         }  /* End SWITCH on protocol family. */
      }  /* End IF verbose mode. */
      /*
      ** Create a socket.
      */
      if ( !SYSCALL( "socket",
                     __LINE__,
                     sckt = socket( ai->ai_family,
                                    ai->ai_socktype,
                                    ai->ai_protocol ) ) )
      {
         sckt = INVALID_DESC;
         continue;   /* Try the next address record in the list. */
      }
      /*
      ** Set the target destination for the remote host on this socket.  That
      ** is, this socket only communicates with the specified host.
      */
      if ( !SYSCALL( "connect",
                     __LINE__,
                     connect( sckt,
                              ai->ai_addr,
                              ai->ai_addrlen ) ) )
      {
         (void) close( sckt );   /* Could use SYSCALL() again here, but why? */
         sckt = INVALID_DESC;
         continue;   /* Try the next address record in the list. */
      }
   }  /* End FOR each address record returned by getaddrinfo(3). */
   /*
   ** Clean up & return.
   */
   freeaddrinfo( aiHead );
   return sckt;
}  /* End openSckt() */
/******************************************************************************
* Function: tod
*
* Description:
*    Receive the time-of-day from the remote server and write it to stdout.
*
* Parameters:
*    sckt - The socket descriptor for the connection.
*
* Return Value: None.
******************************************************************************/
static void tod( int sckt )
{
   char bfr[ MAXBFRSIZE+1 ];
   int  inBytes;
   /*
   ** Send a datagram to the server to wake it up.  The content isn't
   ** important, but something must be sent to let it know we want the TOD.
   */
   if ( !SYSCALL( "write",
                  __LINE__,
                  write( sckt, "Are you there?", 14 ) ) )
   {
      return;
   }
   /*
   ** Read the time-of-day from the remote host.
   */
   if ( !SYSCALL( "read",
                  __LINE__,
                  inBytes = read( sckt,
                                  bfr,
                                  MAXBFRSIZE ) ) )
   {
      return;
   }
   bfr[ inBytes ] = '\0';   /* Null-terminate the received string. */
   fputs( bfr, stdout );    /* Null string if EOF (inBytes == 0).  */
   fflush( stdout );
}  /* End tod() */
]]></screen></sect3></sect2></sect1><sect1>
<title>Other programming languages</title>
<sect2>
<title>JAVA</title>
<para>Sun Java versions since 1.4 are IPv6 enabled, see e.g. <ulink url="http://java.sun.com/j2se/1.5.0/docs/api/java/net/Inet6Address.html">Inet6Address (1.5/5.0)</ulink> class. Hints are available in the <emphasis>Networking IPv6 User Guide for JDK/JRE</emphasis> <ulink url="http://java.sun.com/j2se/1.4.2/docs/guide/net/ipv6_guide/index.html">1.4</ulink> and <ulink url="http://java.sun.com/j2se/1.5.0/docs/guide/net/ipv6_guide/index.html">1.5 (5.0)</ulink>.</para></sect2><sect2>
<title>Perl</title>
<para>As of May 2007 it's not known that the Perl core itself already supports IPv6. It can be added by using following modules:</para><itemizedlist>
<listitem><para><ulink url="http://search.cpan.org/~umemoto/Socket6/">Socket6</ulink></para></listitem></itemizedlist><para>Anyway, some other modules exist for/with IPv6 support (e.g. Net::IP), search for &rdquo;IPv6&rdquo; on <ulink url="http://search.cpan.org/">http://search.cpan.org/</ulink>.</para></sect2></sect1></chapter><chapter id='chapter-interoperability' >
<title><!-- anchor id="chapter-interoperability" -->Interoperability</title>
<para>The <ulink url="http://www.tahi.org/">TAHI Project</ulink> checks the interoperability of different operating systems regarding the implementation of IPv6 features. Linux kernel already got the <ulink url="http://www.linux-ipv6.org/v6ready/">IPv6 Ready Logo Phase 1</ulink>. </para></chapter><chapter id='chapter-information' >
<title><!-- anchor id="chapter-information" -->Further information and URLs</title>
<sect1 id='information-books' >
<title><!-- anchor id="information-books" -->Paper printed books, articles, online reviews (mixed)</title>
<sect2>
<title>Printed Books (English)</title>
<sect3>
<title>Cisco</title>
<itemizedlist>
<listitem><para>Cisco Self-Study: Implementing IPv6 Networks (IPV6) by Regis Desmeules. Cisco Press; ISBN 1587050862; 500 pages; 1st edition (April 11, 2003).
Note: This item will be published on April 11, 2003.</para></listitem><listitem><para>Configuring IPv6 with Cisco IOS by Sam Brown, Sam Browne, Neal Chen, Robbie Harrell, Edgar, Jr. Parenti (Editor), Eric Knipp (Editor), Paul Fong (Editor)362 pages; Syngress Media Inc; ISBN 1928994849; (July 12, 2002).</para></listitem></itemizedlist></sect3><sect3>
<title>General</title>
<itemizedlist>
<listitem><para><ulink url="http://www.benedikt-stockebrand.de/books_e.html#ipv6-in-practice">IPv6 in Practice: A Unixer's Guide to the Next Generation Internet</ulink> von Benedikt Stockebrand, November 2006; ISBN 3-540-24524-3</para></listitem><listitem><para><ulink url="http://www.sunny.ch/publications/f_ipv6.htm">IPv6 Essentials</ulink> by Silvia Hagen, 2nd Edition, May 2006; ISBN 0-5961-0058-2
<ulink url="http://www.oreilly.com/catalog/ipv6ess/">ToC, Index, Sample Chapter etc.</ulink>; <ulink url="http://press.oreilly.com/ipv6ess.html">O'Reilly Pressrelease</ulink></para></listitem><listitem><para>IPv6: The New Internet Protocol. By Christian Huitema; Published by Prentice-Hall; ISBN 0138505055. 
Description: This book, written by Christian Huitema - a member of the InternetArchitecture Board, gives an excellent description of IPv6, how it differs from IPv4, and the hows and whys of it's development. 
Source: <ulink url="http://www.cs.uu.nl/wais/html/na-dir/internet/tcp-ip/resource-list.html">http://www.cs.uu.nl/wais/html/na-dir/internet/tcp-ip/resource-list.html</ulink></para></listitem><listitem><para><ulink url="http://www.epinions.com/book_mu-3402412/display_~full_specs">IPv6 Networks</ulink> by Niles, Kitty; (ISBN 0070248079); 550 pages; Date Published 05/01/1998.</para></listitem><listitem><para>Implementing IPV6. Supporting the Next Generation Internet Protocols by P. E. Miller, Mark A. Miller; Publisher: John Wiley &amp; Sons; ISBN 0764545892; 2nd edition (March 15, 2000); 402 pages.</para></listitem><listitem><para>Big Book of Ipv6 Addressing Rfcs by Peter H. Salus (Compiler), Morgan Kaufmann Publishers, April 2000, 450 pages ISBN 0126167702. </para></listitem><listitem><para><ulink url="http://www.epinions.com/book_mu-3922588/display_~full_specs">Understanding IPV6</ulink> by Davies, Joseph; ISBN 0735612455; Date Published 05/01/2001; Number of Pages: 350.</para></listitem><listitem><para>Migrating to IPv6 - IPv6 in Practice by Marc Blanchet Publisher: John Wiley &amp; Sons; ISBN 0471498920; 1st edition (November 2002); 368 pages.</para></listitem><listitem><para>Ipv6 Network Programming by Jun-ichiro Hagino; ISBN 1555583180</para></listitem><listitem><para><ulink url="http://www.nwfusion.com/news/2000/1023ipv6.html">Wireless boosting IPv6</ulink> by Carolyn Duffy Marsan, 10/23/2000.</para></listitem><listitem><para><ulink url="http://www.oreillynet.com/search/index.ncsp?sp-q=IPv6">O'reilly Network search for keyword IPv6</ulink> results in 29 hits (28. January 2002)</para></listitem></itemizedlist></sect3></sect2><sect2>
<title>Articles, eBooks, Online Reviews (mixed)</title>
<itemizedlist>
<listitem><para><ulink url="http://www.onlamp.com/pub/a/onlamp/2001/06/01/ipv6_tutorial.html">Getting Connected with 6to4</ulink> by Huber Feyrer, 06/01/2001</para></listitem><listitem><para>Transient Addressing for Related Processes: Improved Firewalling by Using IPv6 and Multiple Addresses per Host; written by Peter M. Gleiz, Steven M. Bellovin (<ulink url="http://www.securiteinfo.com/ebooks/pdf/tarp.pdf">PC-PDF-Version</ulink>; <ulink url="http://www.securiteinfo.com/ebooks/palm/tarp.pdf">Palm-PDF-Version</ulink>; <ulink url="http://www.securiteinfo.com/ebooks/pdb/tarp.pdb">PDB-Version</ulink>)</para></listitem><listitem><para><ulink url="http://www.ip6.com/index.html">Internetworking IPv6 with Cisco Routers</ulink> by Silvano Gai, McGrawHill Italia, 1997. The 13 chapters and appendix A-D are downloadable as PDF-documents.</para></listitem><listitem><para><ulink url="http://www.csc.fi/~psavola/residential.html">Migration and Co-existence of IPv4 and IPv6 in Residential Networks</ulink> by Pekka Savola, CSC/FUNET, 2002</para></listitem></itemizedlist></sect2><sect2 id='information-sciencepublication' >
<title><!-- anchor id="information-sciencepublication" -->Science Publications (abstracts, bibliographies, online resources)</title>
<para>See also: <ulink url="http://liinwww.ira.uka.de/mpsbib?query=ipv6&amp;maxnum=200">liinwww.ira.uka.de/ipv6</ulink> or <ulink url="http://www.google.com/scholar?q=ipv6">Google / Scholar / IPv6</ulink></para><itemizedlist>
<listitem><para><ulink url="http://www.ipv6.ac.uk/gtpv6/workplan.html">GEANT IPv6 Workplan</ulink></para></listitem><listitem><para><ulink url="http://www.ipv6.ac.uk/bermuda2/">IPv6 Trials on UK Academic Networks: Bermuda Project Aug.2002</ulink>: Participants - Getting connected - Project deliverables - Network topology - Address assignments - Wireless IPv6 access - IPv6 migration - Project presentations - Internet 2 - Other IPv6 projects - IPv6 fora and standards Bermuda 2...</para></listitem><listitem><para><ulink url="http://www.ipv6.ac.uk/">http://www.ipv6.ac.uk/</ulink></para></listitem><listitem><para><ulink url="http://www.ipv6.ecs.soton.ac.uk/">IPv6 at the University of Southampton</ulink></para></listitem><listitem><para>Microsoft Research IPv6 Implementation (MSRIPv6): <ulink url="http://www.research.microsoft.com/msripv6/">MSRIPv6 Configuring 6to4 - Connectivity with MSR IPv6 - Our 6Bone Node... </ulink></para></listitem></itemizedlist></sect2><sect2>
<title>Others</title>
<para>See following URL for more: <ulink url="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6 Pilot / References</ulink></para></sect2></sect1><sect1 id='information-conferences' >
<title><!-- anchor id="information-conferences" -->Conferences, Meetings, Summits</title>
<para>Something missing? Suggestions are welcome!</para><sect2>
<title>2004</title>
<itemizedlist>
<listitem><para>1st Global IPv6 Summit in Sao Paul, Brazil</para></listitem></itemizedlist></sect2></sect1><sect1 id='information-onlineinformation' >
<title><!-- anchor id="information-onlineinformation" -->Online information</title>
<sect2 id='information-joinipv6.' >
<title><!-- anchor id="information-joinipv6." -->Join the IPv6 backbone</title>
<para>More to be filled later...suggestions are welcome!</para><sect3 id='information-globalregistries' >
<title><!-- anchor id="information-globalregistries" -->Global registries</title>
<para>See regional registries.</para></sect3><sect3 id='information-majorregionregistries' >
<title><!-- anchor id="information-majorregionregistries" -->Major regional registries</title>
<itemizedlist>
<listitem><para>America: <ulink url="http://www.arin.net/">ARIN</ulink>, <ulink url="http://www.arin.net/registration/ipv6/index.html">ARIN / registration page</ulink>, <ulink url="http://www.arin.net/registration/ipv6/index.html">ARIN / IPv6 guidelines</ulink></para></listitem><listitem><para>EMEA: <ulink url="http://www.ripe.net/">Ripe NCC</ulink>, <ulink url="http://www.ripe.net/ripencc/mem-services/registration/">Ripe NCC / registration page</ulink>, <ulink url="http://www.ripe.net/ripencc/mem-services/registration/ipv6/">Ripe NCC / IPv6 registration</ulink></para></listitem><listitem><para>Asia/Pacific: <ulink url="http://www.apnic.net/">APNIC</ulink>, <ulink url="http://www.apnic.net/services/ipv6_guide.html">APNIC / IPv6 ressource guide</ulink></para></listitem><listitem><para>Latin America and Caribbea: <ulink url="http://lacnic.org/">LACNIC</ulink>, <ulink url="http://lacnic.net/en/bt-IPv6.html">IPv6 Registration Services</ulink>, <ulink url="http://lacnic.net/en/chapter-4-en.pdf">IPv6 Allocation Policy</ulink></para></listitem><listitem><para>Africa: <ulink url="http://www.afrinic.org/">AfriNIC</ulink></para></listitem></itemizedlist><para>Also a list of major (prefix length 32) allocations per local registry is available here: <ulink url="http://www.ripe.net/ripencc/mem-services/registration/ipv6/ipv6allocs.html">Ripe NCC / IPv6 allocations</ulink>.</para></sect3><sect3 id='information-joinipv6-tunnelbrokers' >
<title><!-- anchor id="information-joinipv6-tunnelbrokers" -->Tunnel brokers</title>
<para>Note: A list of available Tunnel broker can be found in the section <link linkend="information-Tunnelbroker">Tunnel broker</link> below. </para><itemizedlist>
<listitem><para>Former IPng. Tunnelbroker and IPv6 resources, now migrated to the <ulink url="http://www.sixxs.net/main/">SixXs System</ulink>.</para></listitem><listitem><para>Eckes' <ulink url="http://sites.inka.de/lina/linux/ipv6.html">IPv6-with-Linux</ulink> Page.</para></listitem><listitem><para>tunnelc - a perl based tunnel client script:
freshmeat.net: <ulink url="http://freshmeat.net/projects/tunnelc">Project details for tunnel client</ulink>
SourceForge: <ulink url="http://sourceforge.net/projects/tunnelc">Project Info - tunnelc</ulink> (also <ulink url="http://tunnelc.sourceforge.net/">here</ulink>)</para></listitem><listitem><para>Linux Advanced Routing &amp; Traffic Control HOWTO, <ulink url="http://howtos.linuxbroker.com/howtoreader.shtml?file=Adv-Routing-HOWTO.html#LARTC.TUNNEL-IPV6.ADDRESSING">Chapter 6: IPv6 tunneling with Cisco and/or 6bone</ulink>.</para></listitem></itemizedlist></sect3><sect3 id='information-joinipv6-6to4-tunneling' >
<title><!-- anchor id="information-joinipv6-6to4-tunneling" -->6to4</title>
<itemizedlist>
<listitem><para><ulink url="http://www.kfu.com/~nsayer/6to4/">NSayer's 6to4 information</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc3068.html">RFC 3068 / An Anycast Prefix for 6to4 Relay Routers</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-joinipv6-isatap-tunneling' >
<title><!-- anchor id="information-joinipv6-isatap-tunneling" -->ISATAP</title>
<itemizedlist>
<listitem><para><ulink url="http://www.join.uni-muenster.de/Dokumente/Howtos/Howto_ISATAP.php?lang=en">ISATAP (Intra-Site Automatic Tunnel Access Protocol) Information</ulink> by <ulink url="http://www.join.uni-muenster.de/">JOIN</ulink></para></listitem></itemizedlist></sect3></sect2><sect2>
<title>Latest news and URLs to other documents</title>
<itemizedlist>
<listitem><para><ulink url="http://www.estoile.com/links/ipv6">Lot of URLs to others documents</ulink> by Anil Edathara</para></listitem><listitem><para><ulink url="http://www.go6.net/">go6 - The IPv6 Portal</ulink>: an IPv6 online portal with a wiki-based IPv6 knowledge center, an IPv6 discussion forum, an up-to-date collection of IPv6 Events and News, free IPv6 access and services, IPv6 software applications, and much more</para></listitem></itemizedlist></sect2><sect2>
<title>Protocol references</title>
<sect3>
<title>IPv6-related Request For Comments (RFCs)</title>
<para>Publishing the list of IPv6-related RFCs is beyond the scope of this document, but given URLs will lead you to such lists:</para><itemizedlist>
<listitem><para>List sorted by <ulink url="http://playground.sun.com/pub/ipng/html/specs/standards.html">IPng Standardization Status</ulink> or <ulink url="http://playground.sun.com/pub/ipng/html/specs/specifications.html">IPng Current Specifications</ulink> by Robert Hinden</para></listitem><listitem><para><ulink url="http://www.ipv6.org/specs.html">IPv6 Related Specifications</ulink> on IPv6.org</para></listitem></itemizedlist></sect3><sect3>
<title>Current drafts of working groups</title>
<para>Current (also) IPv6-related drafts can be found here:</para><itemizedlist>
<listitem><para><ulink url="http://www.ietf.org/ids.by.wg/ipv6.html">IP Version 6 (ipv6)</ulink></para></listitem><listitem><para><ulink url="http://www.ietf.org/ids.by.wg/ngtrans.html">Next Generation Transition (ngtrans)</ulink></para></listitem><listitem><para><ulink url="http://www.ietf.org/ids.by.wg/dhc.html">Dynamic Host Configuration (dhc)</ulink></para></listitem><listitem><para><ulink url="http://www.ietf.org/ids.by.wg/dnsext.html">Domain Name System Extension (dnsext)</ulink></para></listitem><listitem><para><ulink url="http://www.ietf.org/ids.by.wg/v6ops.html">IPv6 Operations (v6ops)</ulink></para></listitem><listitem><para><ulink url="http://www.ietf.org/ids.by.wg/mobileip.html">Mobile IP (mobileip)</ulink></para></listitem><listitem><para><ulink url="http://playground.sun.com/pub/ipng/html/ipng-main.html">Get any information about IPv6, from overviews, through RFCs &amp; drafts, to implementations</ulink> (including availability of stacks on various platforms &amp; source code for IPv6 stacks) </para></listitem></itemizedlist></sect3><sect3>
<title>Others</title>
<itemizedlist>
<listitem><para><ulink url="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6 Pilot / References</ulink>, big list of IPv6 references maintained by Simon Leinen</para></listitem></itemizedlist></sect3></sect2><sect2>
<title>More information</title>
<para><ulink url="http://www.deepspace6.net/sections/links.html">DeepSpace6 / more interesting links</ulink></para><sect3>
<title>Linux related</title>
<itemizedlist>
<listitem><para><ulink url="http://www.deepspace6.net/">DeepSpace6 / (Not only) Linux IPv6 Portal</ulink> - Italy (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/">Mirror</ulink>)</para></listitem><listitem><para><ulink url="http://www.bieringer.de/linux/IPv6/">IPv6-HowTo for Linux by Peter Bieringer</ulink> - Germany, and his <ulink url="ftp://ftp.bieringer.de/pub/linux/IPv6/">Bieringer / IPv6 - software archive</ulink></para></listitem><listitem><para><ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status.html">Linux+IPv6 status by Peter Bieringer</ulink> - Germany (going obsolete)</para></listitem><listitem><para><ulink url="http://www.deepspace6.net/docs/ipv6_status_page_apps.html">DeepSpace6 / IPv6 Status Page</ulink> - Italy (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/docs/ipv6_status_page_apps.html">Mirror</ulink>) (will superseed upper one)</para></listitem><listitem><para><ulink url="http://www.linux-ipv6.org/">USAGI project</ulink> - Japan, and their <ulink url="ftp://ftp.linux-ipv6.org/pub/">USAGI project - software archive</ulink></para></listitem><listitem><para><ulink url="http://www.tldp.org/HOWTO/OLSR-IPv6-HOWTO/">Linux Optimized Link State Routing Protocol (OLSR) IPv6 HOWTO</ulink></para></listitem><listitem><para><ulink url="http://inl.info.ucl.ac.be/LinShim6/">LinShim6</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>Linux related per distribution</title>
<variablelist>
<varlistentry><term>PLD</term><listitem><para><ulink url="http://www.pld-linux.org/">PLD Linux Distribution</ulink> (&rdquo;market leader&rdquo; in containing IPv6 enabled packages)</para></listitem></varlistentry><varlistentry><term>Red&nbsp;Hat</term><listitem><para><ulink url="http://www.redhat.com/">Red Hat Enterprise Linux</ulink>, <ulink url="http://www.netcore.fi/pekkas/linux/ipv6/"> Pekka Savola's IPv6 packages (Historic)</ulink></para></listitem></varlistentry><varlistentry><term>Fedora</term><listitem><para><ulink url="https://fedoraproject.org/">Fedora (Project) Linux</ulink></para></listitem></varlistentry><varlistentry><term>Debian</term><listitem><para><ulink url="http://www.debian.org/">Debian Linux</ulink>, <ulink url="http://ipv6.debian.net/">IPv6 with Debian Linux</ulink></para></listitem></varlistentry><varlistentry><term>SuSE</term><listitem><para><ulink url="https://www.suse.com/">SuSE Linux</ulink></para></listitem></varlistentry><varlistentry><term>Mandriva</term><listitem><para><ulink url="http://wiht.link/mandrivalinux">Mandriva (Historic)</ulink></para></listitem></varlistentry></variablelist><para>For more see the <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html">IPv6+Linux Status Distributions</ulink> page.</para></sect3><sect3>
<title>General</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ipv6.org/">IPv6.org</ulink></para></listitem><listitem><para><ulink url="http://www.6bone.net/">6bone</ulink></para></listitem><listitem><para><ulink url="http://www.v6.wide.ad.jp/">WIDE project</ulink> - Japan</para></listitem><listitem><para><ulink url="http://www.switch.ch/lan/ipv6/">SWITCH IPv6 Pilot</ulink> - Switzerland</para></listitem><listitem><para><ulink url="http://www.feyrer.de/IPv6/">IPv6 Corner of Hubert Feyrer</ulink> - Germany</para></listitem><listitem><para><ulink url="http://www.ipv6forum.com/">IPv6 Forum</ulink> - a world-wide consortium of leading Internet vendors, Research &amp; Education Networks...</para></listitem><listitem><para><ulink url="http://playground.sun.com/pub/ipng/html/ipng-main.html">Playground.sun.com / IPv6 Info Page</ulink> - maintained by Robert Hinden, Nokia. Get any information about IPv6, from overviews, through RFCs &amp; drafts, to implementations (including availability of stacks on various platforms &amp; source code for IPv6 stacks).</para></listitem><listitem><para><ulink url="http://www.6init.com/">6INIT</ulink> - IPv6 Internet Initiative - an EU Fifth Framework Project under the IST Programme.</para></listitem><listitem><para><ulink url="http://www.ipv6-taskforce.org/">IPv6 Task Force (European Union)</ulink></para></listitem><listitem><para><ulink url="http://www.6init.org/">6init</ulink> - IPv6 INternet IniTiative </para></listitem><listitem><para><ulink url="http://www.usenix.org/publications/library/proceedings/ana97/summaries/deering.html">IPv6: The New Version of the Internet Protocol</ulink>, by Steve Deering.</para></listitem><listitem><para><ulink url="http://www.garykessler.net/library/ipv6_exp.html">IPv6: The Next Generation Internet Protocol</ulink>, by Gary C. Kessler. </para></listitem><listitem><para><ulink url="http://www.3com.com/nsc/ipv6.html">IPv6: Next Generation Internet Protocol</ulink> - 3Com</para></listitem><listitem><para><ulink url="http://www.internet2.org/">internet || site</ulink> and <ulink url="http://ipv6.internet2.edu/">internet2 Working Group</ulink></para></listitem><listitem><para>NetworkWorldFusion: Search / Doc Finder: <ulink url="http://search.nwfusion.com/query.html?qt=IPv6&amp;qp=&amp;ch=cn&amp;">searched for IPv6</ulink> (102 documents found 22.12.2002)</para></listitem><listitem><para><ulink url="http://www.theregister.co.uk/">The Register</ulink> (Search for IPv6 will result in 30 documents, 22.12.2002)</para></listitem><listitem><para><ulink url="http://zdnet.search.com/search?cat=279&amp;q=IPv6">ZDNet Search for IPv6</ulink></para></listitem><listitem><para><ulink url="http://whatis.techtarget.com/wsearchResults/1,290214,sid9,00.html?query=IPv6">TechTarget Search for IPv6</ulink></para></listitem><listitem><para><ulink url="http://www.faqs.org/faqs/internet/tcp-ip/resource-list/index.html">IPv6 &amp; TCP Resources List</ulink></para></listitem></itemizedlist><para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-marketresearch' >
<title><!-- anchor id="information-marketresearch" -->Market Research</title>
<itemizedlist>
<listitem><para><ulink url="http://www.statista.com/search/internet+america/">statista - The Statistics Portal</ulink></para></listitem><listitem><para><ulink url="http://www.marketresearch.com/">Market Research</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-patents' >
<title><!-- anchor id="information-patents" -->Patents</title>
<itemizedlist>
<listitem><para>Delphion Research: <ulink url="http://www.delphion.com/research/">Patent Search Page</ulink>. Basic (free) registration needed. Examples found 21.12.2002 searching for IPv6:
<ulink url="http://www.delphion.com/details?pn=US06118784__">Communicating method between IPv4 terminal and IPv6 terminal and IPv4-IPv6 converting apparatus</ulink>
<ulink url="http://www.delphion.com/details?pn=US06038233__">Translator for IP networks, network system using the translator, and IP network coupling method therefor</ulink></para></listitem></itemizedlist></sect3></sect2><sect2>
<title>By countries</title>
<sect3>
<title>Europe</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ist-ipv6.org/">www.ist-ipv6.org</ulink>: IST IPv6 Cluster, European IPv6 Research and Development Projects</para></listitem><listitem><para><ulink url="http://www.euro6ix.org/">Euro6IX</ulink>: European IPv6 Internet Exchanges Backbone</para></listitem></itemizedlist></sect3><sect3>
<title>Austria</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ikn.tuwien.ac.at/~ipv6/">IPv6@IKNnet and MIPv6 Research Group</ulink>: TU Vienna, Austria (IPv6: project, publications, diploma / doctor thesis, Conference Proceedings etc.)</para></listitem></itemizedlist></sect3><sect3>
<title>Australia</title>
<itemizedlist>
<listitem><para><ulink url="http://oversteer.bl.echidna.id.au/IPv6/">Carl's Australian IPv6 Pages</ulink> (old content)</para></listitem></itemizedlist></sect3><sect3>
<title>Belgium</title>
<para>Suggestions are welcome!</para></sect3><sect3>
<title>Brasil</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ipv6dobrasil.com.br/">IPv6 do Brasil</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>China</title>
<para>Suggestions are welcome!</para></sect3><sect3>
<title>Czech</title>
<para>Suggestions are welcome!</para></sect3><sect3>
<title>Germany</title>
<itemizedlist>
<listitem><para><ulink url="https://www.xing.com/net/ipv6/">Xing / IPv6</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>France</title>
<itemizedlist>
<listitem><para><ulink url="http://www.renater.fr/Projets/IPv6/index.htm">Renater</ulink>: Renater IPv6 Project Page</para></listitem><listitem><para><ulink url="http://www.inria.fr/recherche/equipes/ipv6.fr.html">IPv6 - RSVP - ATM at INRIA</ulink></para></listitem><listitem><para><ulink url="http://www.netbsd.org/fr/Documentation/network/ipv6/">NetBSD IPv6 Documentation</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>Italy</title>
<itemizedlist>
<listitem><para><ulink url="http://project6.ferrara.linux.it/">Project6</ulink>: IPv6 networking with Linux</para></listitem></itemizedlist></sect3><sect3>
<title>Japan</title>
<itemizedlist>
<listitem><para><ulink url="http://www.rtpro.yamaha.co.jp/RT/ipv6/">Yamaha IPv6</ulink> (sorry, all in japanese native ...)</para></listitem></itemizedlist></sect3><sect3>
<title>Korea</title>
<itemizedlist>
<listitem><para><ulink url="http://www.krv6.net/">ETRI</ulink>: Electronics and Telecommunications Research Institut</para></listitem><listitem><para><ulink url="http://www.ipv6.or.kr/english/index.new.htm">IPv6 Forum Korea</ulink>: Korean IPv6 Deployment Project</para></listitem></itemizedlist></sect3><sect3>
<title>Mexico</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ipv6.unam.mx/">IPv6 Mexico</ulink> (spain &amp; english version): IPv6 Project Hompeage of The National Autonomous University of Mexico (UNAM)</para></listitem></itemizedlist></sect3><sect3>
<title>Netherland</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ipv6.surfnet.nl/">SURFnet</ulink>: SURFnet IPv6 Backbone</para></listitem><listitem><para><ulink url="http://www.stack.nl/">STACK</ulink>, <ulink url="http://www.stack.nl/ipv6/">STACK (IPv6)</ulink>: Students' computer association of the Eindhoven University of Technology, Netherland</para></listitem><listitem><para><ulink url="http://www.ipng.nl/">IPng.nl</ulink>: collaboration between WiseGuys and Intouch</para></listitem></itemizedlist></sect3><sect3>
<title>Portugal </title>
<para>Suggestions are welcome!</para></sect3><sect3>
<title>Russia</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ipv6.ru/">IPv6 Forum for Russia</ulink>: Yaroslavl State University Internet Center</para></listitem></itemizedlist></sect3><sect3>
<title>Switzerland</title>
<para>Suggestions are welcome!</para></sect3><sect3>
<title>United Kingdom</title>
<itemizedlist>
<listitem><para><ulink url="http://www.bt.com/ipv6/">British Telecom IPv6 Home</ulink>: BT's ISP IPv6 Trial, UK's first IPv6 Internet Exchange etc.</para></listitem></itemizedlist></sect3></sect2><sect2>
<title>By operating systems</title>
<sect3>
<title>*BSD</title>
<itemizedlist>
<listitem><para><ulink url="http://www.kame.net/">KAME project</ulink> (*BSD)</para></listitem><listitem><para><ulink url="http://www.netbsd.org/Documentation/network/ipv6/">NetBSD's IPv6 Networking FAQ</ulink></para></listitem><listitem><para><ulink url="http://www.freebsd.org/ports/ipv6.html">FreeBSD Ports: Ipv6</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>Cisco IOS</title>
<itemizedlist>
<listitem><para><ulink url="http://www.cisco.com/warp/public/732/Tech/ipv6/">Cisco IOS IPv6 Entry Page</ulink></para></listitem><listitem><para><ulink url="http://www.cisco.com/univercd/cc/td/doc/product/software/ios122/122newft/122t/122t2/ipv6/ftipv6c.htm">IPv6 for Cisco IOS Software</ulink>, File 2 of 3: Aug 2002 -- Table of Contents: IPv6 for Cisco IOS Software; Configuring Documentation Specifics; Enabling IPv6 Routing and Configuring; IPv6 Addressing; Enabling IPv6 Processing Globally.</para></listitem><listitem><para>Cisco Internet Networking Handbook, <ulink url="http://www.cisco.com/univercd/cc/td/doc/cisintwk/ito_doc/ipv6.htm">Chapter IPv6</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>HPUX</title>
<itemizedlist>
<listitem><para><ulink url="http://www.faqs.org/faqs/hp/hpux-faq/index.html">comp.sys.hp.hpux FAQ</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>IBM</title>
<itemizedlist>
<listitem><para>Now that IBM's announced the availability of z/OS V1.4, <ulink url="http://search390.techtarget.com/ateQuestionNResponse/0,289625,sid10_cid486367_tax292523,00.html">what's new in this release?</ulink> This question was posed on 15 August 2002</para></listitem></itemizedlist></sect3><sect3>
<title>Microsoft</title>
<itemizedlist>
<listitem><para><ulink url="http://www.microsoft.com/windows2000/technologies/communications/ipv6/default.asp">Microsoft Windows 2000 IPv6</ulink> </para></listitem><listitem><para><ulink url="http://www.research.microsoft.com/msripv6">MSRIPv6</ulink> - Microsoft Research Network - IPv6 Homepage </para></listitem><listitem><para><ulink url="http://support.microsoft.com/default.aspx?scid=kb;en-us;306203">Internet Connection Firewall Does Not Block Internet Protocol Version 6 Traffic</ulink> (6.11.2001)</para></listitem><listitem><para><ulink url="http://support.microsoft.com/default.aspx?scid=kb;en-us;289892">Internet Protocol Numbers</ulink> (8.10.2002)</para></listitem><listitem><para><ulink url="http://support.microsoft.com/default.aspx?scid=kb;en-us;273826">IPv6 Technology Preview Refresh</ulink> (16.10.2002)</para></listitem><listitem><para><ulink url="http://support.microsoft.com/default.aspx?scid=kb;en-us;325449">HOW TO: Install and Configure IP Version 6 in Windows .NET Enterprise Server</ulink> (26.10.2002)</para></listitem><listitem><para><ulink url="http://support.microsoft.com/default.aspx?scid=kb;en-us;329984">Windows .NET Server 6to4 Router Service Quits When You Advertise a 2002 Address on the Public Interface</ulink> (28.10.2002)</para></listitem><listitem><para><ulink url="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wcetcpip/htm/cmconIPv6exe.asp">msdn - Microsoft Windows CE .NET - IPv6 commands</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>Solaris</title>
<itemizedlist>
<listitem><para><ulink url="http://www.sun.com/software/solaris/">Sun Microsystems Solaris</ulink></para></listitem><listitem><para><ulink url="http://www.cs.uu.nl/wais/html/na-dir/Solaris2/FAQ.html">Solaris 2 Frequently Asked Questions (FAQ) 1.73</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>Sumitoma </title>
<itemizedlist>
<listitem><para><ulink url="http://playground.sun.com/pub/ipng/html/ipng-implementations.html#Sumitomo">Sumitomo Electric has implemented IPv6 on Suminet 3700 family routers</ulink></para></listitem></itemizedlist></sect3><sect3>
<title>ZebOS</title>
<itemizedlist>
<listitem><para>IpInfusion's <ulink url="http://www.ipinfusion.com/products/server/products_server.html">ZebOS Server Routing Software</ulink></para></listitem></itemizedlist></sect3></sect2><sect2 id='information-ipv6andsecurity' >
<title><!-- anchor id="information-ipv6andsecurity" -->IPv6 Security</title>
<itemizedlist>
<listitem><para><ulink url="http://csrc.nist.gov/ipsec/">NIST IPsec Project</ulink> ( National Institute of Standards and Technology, NIST)</para></listitem><listitem><para><ulink url="http://www.infosecuritymag.com/index.shtml">Information Security</ulink></para></listitem><listitem><para><ulink url="http://neworder.box.sk/search.php3?srch=IPv6">NewOrder.box.sk (search for IPv6)</ulink> (Articles, exploits, files database etc.) </para></listitem></itemizedlist></sect2><sect2>
<title>Application lists</title>
<itemizedlist>
<listitem><para><ulink url="http://www.deepspace6.net/docs/ipv6_status_page_apps.html">DeepSpace6 / IPv6 Status Page</ulink> (<ulink url="http://mirrors.bieringer.de/www.deepspace6.net/docs/ipv6_status_page_apps.html">Mirror</ulink>)</para></listitem><listitem><para><ulink url="http://www.ipv6.org/v6-apps.html">IPv6.org / IPv6 enabled applications</ulink></para></listitem><listitem><para><ulink url="http://freshmeat.net/search/?q=IPv6">Freshmeat / IPv6 search</ulink>, currently (14 Dec 2002) 62 projects</para></listitem><listitem><para><ulink url="http://www.ipv6forum.com/modules.php?op=modload&amp;name=Web_Links&amp;file=index">IPv6 Forum / Web Links</ulink></para></listitem></itemizedlist><sect3>
<title>Analyzer tools</title>
<itemizedlist>
<listitem><para><ulink url="http://www.wireshark.org/">Wireshark</ulink> (former known as <emphasis>Ethereal</emphasis>) is a free network protocol analyzer for Unix and Windows</para></listitem><listitem><para><ulink url="http://www.ip6.com/us/analyzer.htm">Radcom RC100-WL</ulink> - Download Radcom RC100-WL protocol analyzer version 3.20</para></listitem></itemizedlist></sect3><sect3>
<title>IPv6 Products</title>
<itemizedlist>
<listitem><para><ulink url="http://www.6wind.com/">6wind</ulink> - solutions for IPv4/IPv6 Router, QoS, Multicast, Mobility, Security/VPN/Firewall. </para></listitem><listitem><para><ulink url="http://www.fefe.de/dns/">Fefe's patches for IPv6 with djbdns</ulink>Aug 2002 -- What is djbdns and why does it need IPv6? djbdns is a full blown DNS server which outperforms BIND in nearly all respects.</para></listitem><listitem><para><ulink url="http://www.ipinfusion.com/products/server/products_server.html">ZebOS Server Routing Suite </ulink></para></listitem><listitem><para><ulink url="http://download.cnet.com/Inframail-Advantage-Server-Edition/3000-10248_4-8202652.html">Inframail (Advantage Server Edition)</ulink></para></listitem><listitem><para><ulink url="http://download.cnet.com/HTTrack-Website-Copier/3000-2377_4-10149393.html">HTTrack Website Copier</ulink></para></listitem><listitem><para><ulink url="http://download.cnet.com/CommView/3000-2085_4-10132748.html">CommView</ulink></para></listitem><listitem><para><ulink url="http://download.cnet.com/Posadis/3000-2155_4-10149750.html">Posadis</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-snmp' >
<title><!-- anchor id="information-snmp" -->SNMP</title>
<itemizedlist>
<listitem><para><ulink url="http://www.cs.uu.nl/wais/html/na-dir/snmp-faq/part1.html">comp.protocpols.snmp SNMP FAQ Part 1 of 2</ulink></para></listitem></itemizedlist></sect3></sect2></sect1><sect1>
<title>IPv6 Infrastructure</title>
<sect2>
<title>Statistics</title>
<itemizedlist>
<listitem><para><ulink url="http://www.space.net/~gert/RIPE/">IPv6 routing table history</ulink> created by Gert Döring, <ulink url="http://www.space.net/">Space.Net</ulink></para></listitem><listitem><para><ulink url="http://6bone.informatik.uni-leipzig.de/ipv6/stats/stats.php3">Official 6bone Webserver list Statisic</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>Internet Exchanges</title>
<para>Another list of IPv6 Internet Exchanges can be found here: <ulink url="http://www.euro-ix.net/isp/choosing/search/matrix.php">IPv6 status of IXPs in Europe</ulink></para><sect3 id='information-ipv6exchanges-estonia' >
<title><!-- anchor id="information-ipv6exchanges-estonia" -->Estonia</title>
<itemizedlist>
<listitem><para><ulink url="http://tix.estpak.ee/">TIX</ulink> (tallinn interneti exchange with ipv6 support)</para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-europe' >
<title><!-- anchor id="information-ipv6exchanges-europe" -->Europe</title>
<itemizedlist>
<listitem><para><ulink url="http://www.euro6ix.net/">Euro6IX</ulink>, European IPv6 Internet Exchange Backbone</para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-france' >
<title><!-- anchor id="information-ipv6exchanges-france" -->France</title>
<itemizedlist>
<listitem><para><ulink url="http://www.fnix6.net/">French National Internet  Exchange IPv6</ulink> (since 1.11.2002 active). 
FNIX6 provides a free and reliable high speed FastEthernet interconnection between ISP located in TeleCity Paris.</para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-germany' >
<title><!-- anchor id="information-ipv6exchanges-germany" -->Germany</title>
<itemizedlist>
<listitem><para><ulink url="http://www.inxs.de/">INXS</ulink>: (Cable &amp; Wireless) Munich and Hamburg</para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-japan' >
<title><!-- anchor id="information-ipv6exchanges-japan" -->Japan</title>
<itemizedlist>
<listitem><para><ulink url="http://www.wide.ad.jp/nspixp6/">NSPIXP-6</ulink>: IPv6-based Internet Exchange in Tokyo</para></listitem><listitem><para><ulink url="http://www.jpix.co.jp/">JPIX</ulink>, Tokyo</para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-korea' >
<title><!-- anchor id="information-ipv6exchanges-korea" -->Korea</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ngix.ne.kr/">6NGIX</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-netherlands' >
<title><!-- anchor id="information-ipv6exchanges-netherlands" -->Netherlands</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ams-ix.net/">AMS-IX</ulink>: Amsterdam Internet Exchange</para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-uk' >
<title><!-- anchor id="information-ipv6exchanges-uk" -->UK</title>
<itemizedlist>
<listitem><para><ulink url="http://www.uk6x.com/">UK6X</ulink>: London</para></listitem><listitem><para><ulink url="http://www.xchangepoint.net/">XchangePoint</ulink>: London</para></listitem></itemizedlist></sect3><sect3 id='information-ipv6exchanges-usa' >
<title><!-- anchor id="information-ipv6exchanges-usa" -->USA</title>
<itemizedlist>
<listitem><para><ulink url="http://www.6tap.net/">6TAP</ulink>: Chicago. Supports peerings around the globe.</para></listitem><listitem><para><ulink url="http://www.paix.net/">PAIX</ulink>: Palo Alto</para></listitem></itemizedlist></sect3></sect2><sect2 id='information-Tunnelbroker' >
<title><!-- anchor id="information-Tunnelbroker" -->Tunnel broker</title>
<para>See also: <ulink url="http://www.deepspace6.net/docs/tunnelbrokers.html">http://www.deepspace6.net/docs/tunnelbrokers.html</ulink></para><sect3 id='information-tunnelbroker-belgium' >
<title><!-- anchor id="information-tunnelbroker-belgium" -->Belgium</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-tunnelbroker-canada' >
<title><!-- anchor id="information-tunnelbroker-canada" -->Canada</title>
<itemizedlist>
<listitem><para><ulink url="http://www.freenet6.net/">Freenet6</ulink> - /48 Delegation, Canada
<ulink url="http://www.linuxjournal.com/article.php?sid=5963&amp;mode=thread&amp;order=0">Getting IPv6 Using Freenet6 on Debian</ulink>
<ulink url="http://www.viagenie.qc.ca/en/index.shtml">Freenet6 creater</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-china' >
<title><!-- anchor id="information-tunnelbroker-china" -->China</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-tunnelbroker-estonia' >
<title><!-- anchor id="information-tunnelbroker-estonia" -->Estonia</title>
<itemizedlist>
<listitem><para><ulink url="http://tunnelbroker.ipv6.estpak.ee/?tunnel&amp;PHPSESSID=aa2184190cc2cc6d3a6f6ddd01ae3635">Estpak</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-germany' >
<title><!-- anchor id="information-tunnelbroker-germany" -->Germany</title>
<itemizedlist>
<listitem><para><ulink url="http://6bone.informatik.uni-leipzig.de/">6bone Knoten Leipzig</ulink>
<ulink url="http://www.mail-archive.com/ipv6@uni-muenster.de/msg00056.html">Info bez. Hackangriff (2001)</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-italy' >
<title><!-- anchor id="information-tunnelbroker-italy" -->Italy</title>
<itemizedlist>
<listitem><para><ulink url="http://www.comv6.com/">Comv6</ulink></para></listitem><listitem><para><ulink url="http://www.bersafe.it/">Bersafe</ulink> (Italian language)</para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-japan' >
<title><!-- anchor id="information-tunnelbroker-japan" -->Japan</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-tunnelbroker-malaysia' >
<title><!-- anchor id="information-tunnelbroker-malaysia" -->Malaysia</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-tunnelbroker-netherlands' >
<title><!-- anchor id="information-tunnelbroker-netherlands" -->Netherlands</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ipng.nl/">IPng Netherland</ulink> - Intouch, SurfNet, AMS-IX, UUNet, Cistron, RIPE NCC and AT&amp;T are connected at the AMS-IX. It is possible (there are requirements...) to get an static tunnel.</para></listitem><listitem><para><ulink url="http://www.ipv6.surfnet.nl/">SURFnet Customers</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-norway' >
<title><!-- anchor id="information-tunnelbroker-norway" -->Norway</title>
<itemizedlist>
<listitem><para><ulink url="http://www.uninett.no/testnett/index.en.html">UNINETT</ulink> - Pilot IPv6 Service (for Customers): tunnelbroker &amp; address allocation 
<ulink url="http://www.guruz.de/Uninett-Autoupdate-HOWTO">Uninett-Autoupdate-HOWTO</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-spain' >
<title><!-- anchor id="information-tunnelbroker-spain" -->Spain</title>
<itemizedlist>
<listitem><para><ulink url="http://tb.consulintel.euro6ix.org/">Consulintel</ulink></para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-switzerland' >
<title><!-- anchor id="information-tunnelbroker-switzerland" -->Switzerland</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-tunnelbroker-uk' >
<title><!-- anchor id="information-tunnelbroker-uk" -->UK</title>
<itemizedlist>
<listitem><para><ulink url="http://www.nttv6.net/">NTT</ulink>, United Kingdom - IPv6 Trial. IPv4 Tunnel and native IPv6 leased Line connections. POPs are located in London, UK Dusseldorf, Germany New Jersey, USA (East Coast) Cupertino, USA (West Coast) Tokyo, Japan</para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-usa' >
<title><!-- anchor id="information-tunnelbroker-usa" -->USA</title>
<itemizedlist>
<listitem><para><ulink url="http://www.es.net/hypertext/welcome/pr/ipv6.html">ESnet</ulink>, USA - Energy Sciences Network: Tunnel Registry &amp; Address Delegation for directly connected ESnet sites and ESnet collaborators.</para></listitem><listitem><para><ulink url="http://ipv6tb.he.net/">Hurricane Electric</ulink>, US backbone; 
<ulink url="http://tunnelbroker.net/">Hurrican Electric Tunnelbroker</ulink> (also available under <ulink url="http://tunnelbroker.com/">http://tunnelbroker.com/</ulink>)
Press Release: <ulink url="http://www.he.net/releases/release6.html">Hurricane Electric Upgrades IPv6 Tunnel Broker</ulink>
<ulink url="http://ipv6.he.net/tunnelbroker-update.php">Tunnel Broker Endpoint Autoupdate</ulink>, Perl Script</para></listitem></itemizedlist></sect3><sect3 id='information-tunnelbroker-singapore' >
<title><!-- anchor id="information-tunnelbroker-singapore" -->Singapore</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-tunnelbroker-more' >
<title><!-- anchor id="information-tunnelbroker-more" -->More Tunnel brokers...</title>
<itemizedlist>
<listitem><para><ulink url="http://www.kfu.com/~nsayer/6to4/">Public 6to4 relay routers</ulink> (MS IIE boycott!)</para></listitem></itemizedlist></sect3></sect2><sect2 id='information-infrastructure-nativeipv6service' >
<title><!-- anchor id="information-infrastructure-nativeipv6service" -->Native IPv6 Services</title>
<para>Note: These services are mostly only available with a valid IPv6 connection!</para><sect3 id='information-nativeipv6nntp' >
<title><!-- anchor id="information-nativeipv6nntp" -->Net News (NNTP)</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-nativeipv6gameserver' >
<title><!-- anchor id="information-nativeipv6gameserver" -->Game Server</title>
<itemizedlist>
<listitem><para><ulink url="http://www.viagenie.qc.ca/en/ipv6/quake2/ipv6-quake2.shtml">Quake2</ulink> over IPv6</para></listitem></itemizedlist></sect3><sect3 id='information-nativeipv6ircserver' >
<title><!-- anchor id="information-nativeipv6ircserver" -->IRC Server</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3>
<title>Radio Stations, Music Streams</title>
<para>Something missing? Suggestions are welcome!</para></sect3><sect3 id='information-nativeipv6webserver' >
<title><!-- anchor id="information-nativeipv6webserver" -->Webserver</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ipv6.bieringer.de/">Peter Bieringer's Home of Linux IPv6 HOWTO </ulink></para></listitem></itemizedlist><para>Something missing? Suggestions are welcome!</para></sect3></sect2></sect1><sect1 id='information-maillists' >
<title><!-- anchor id="information-maillists" -->Maillists</title>
<para>Lists of maillists are available at:</para><itemizedlist>
<listitem><para><ulink url="http://www.deepspace6.net/sections/lists.html">DeepSpace6 / Mailling Lists</ulink></para></listitem></itemizedlist><para>Major Mailinglists are listed in following table:</para>
<informaltable><tgroup cols="6" colsep="1" rowsep="1">
<colspec colname="col0" align="center">
<colspec colname="col1" align="center">
<colspec colname="col2" align="center">
<colspec colname="col3" align="center">
<colspec colname="col4" align="center">
<colspec colname="col5" align="center">
<tbody>
<row>
<entry align="center" valign="top">Focus</entry>
<entry align="center" valign="top">Request e-mail address</entry>
<entry align="center" valign="top">What to subscribe</entry>
<entry align="center" valign="top">Maillist e-mail address</entry>
<entry align="center" valign="top">Language</entry>
<entry align="center" valign="top">Access through WWW</entry>
</row>
<row>
<entry align="center" valign="top">Linux kernel networking including IPv6</entry>
<entry align="center" valign="top">majordomo (at) vger.kernel.org</entry>
<entry align="center" valign="top">netdev</entry>
<entry align="center" valign="top">netdev (at) vger.kernel.org</entry>
<entry align="center" valign="top">English</entry>
<entry align="center" valign="top"><ulink url="http://vger.kernel.org/vger-lists.html#netdev">Info</ulink>, <ulink url="http://www.spinics.net/lists/netdev/">Archive</ulink></entry>
</row>
<row>
<entry align="center" valign="top">Mobile IP(v6) for Linux</entry>
<entry align="center" valign="top">Web-based, see URL</entry>
<entry align="center" valign="top">mipl</entry>
<entry align="center" valign="top">mipl (at) mobile-ipv6.org</entry>
<entry align="center" valign="top">English</entry>
<entry align="center" valign="top"><ulink url="http://www.mobile-ipv6.org/cgi-bin/mailman/listinfo">Info</ulink>, <ulink url="http://www.mobile-ipv6.org/pipermail/mipl/">Archive</ulink></entry>
</row>
<row>
<entry align="center" valign="top">Linux IPv6 users using USAGI extension</entry>
<entry align="center" valign="top">usagi-users-ctl (at) linux-ipv6.org</entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top">usagi-users (at) linux-ipv6.org</entry>
<entry align="center" valign="top">English</entry>
<entry align="center" valign="top"><ulink url="http://www.linux-ipv6.org/ml/index.html#usagi-users">Info / Search</ulink>, <ulink url="http://www.linux-ipv6.org/ml/usagi-users/">Archive</ulink></entry>
</row>
<row>
<entry align="center" valign="top">IPv6 on Debian Linux</entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top">debian-ipv6 (at) lists.debian.org</entry>
<entry align="center" valign="top">English</entry>
<entry align="center" valign="top"><ulink url="http://lists.debian.org/debian-ipv6/">Info/Subscription/Archive</ulink></entry>
</row>
<row>
<entry align="center" valign="top">6bone</entry>
<entry align="center" valign="top">majordomo (at) isi.edu</entry>
<entry align="center" valign="top">6bone</entry>
<entry align="center" valign="top">6bone (at) isi.edu</entry>
<entry align="center" valign="top">English</entry>
<entry align="center" valign="top"><ulink url="http://www.6bone.net/6bone_email.html">Info</ulink>, <ulink url="http://mailman.isi.edu/pipermail/6bone/">Archive</ulink></entry>
</row>
<row>
<entry align="center" valign="top">IPv6 users in general</entry>
<entry align="center" valign="top">majordomo (at) ipv6.org</entry>
<entry align="center" valign="top">users</entry>
<entry align="center" valign="top">users (at) ipv6.org</entry>
<entry align="center" valign="top">English</entry>
<entry align="center" valign="top"><ulink url="http://www.ipv6.org/mailing-lists.html">Info</ulink>, <ulink url="http://www.mail-archive.com/users@ipv6.org/">Archive</ulink></entry>
</row>
<row>
<entry align="center" valign="top">Bugtracking of Internet applications (1)</entry>
<entry align="center" valign="top">bugtraq-subscribe (at) securityfocus.com</entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top">bugtraq (at) securityfocus.com (2)</entry>
<entry align="center" valign="top">English</entry>
<entry align="center" valign="top"><ulink url="http://online.securityfocus.com/popups/forums/bugtraq/intro.shtml">Info</ulink>, <ulink url="http://online.securityfocus.com/archive/1">Archive</ulink></entry>
</row>
</tbody>
</tgroup></informaltable>
<para>(1) very recommended if you provide server applications.</para>
<para>(2) list is moderated.
</para>
<para>Something missing? Suggestions are welcome!
</para>
<para>Following other maillinglists &amp; newsgroups are available via web:</para><itemizedlist>
<listitem><para><ulink url="http://groups.yahoo.com/group/student-ipv6">student-ipv6 (India)</ulink>
Description: This is the group for the Student Awareness group of IPv6 in India</para></listitem><listitem><para><ulink url="http://groups.yahoo.com/group/sun-ipv6-users">sun-ipv6-users</ulink>
Description: Please report problems/suggestions regarding SUN Microsystems IPng implementation</para></listitem><listitem><para><ulink url="http://groups.yahoo.com/group/IPv6-BITS">IPv6-BITS</ulink>
Description: This List will co-ordinate the working of Project Vertebrae.</para></listitem><listitem><para><ulink url="http://groups.yahoo.com/group/linux-bangalore-ipv6">linux-bangalore-ipv6</ulink>
Description: The IPv6 deployment list of the Bangalore Linux User Group</para></listitem><listitem><para><ulink url="http://groups.yahoo.com/group/packet-switching">packet-switching</ulink>
Description: This mailing list provides a forum for discussion of packet switching theory, technology, implementation and application in any relevant aspect including without limitation LAPB, X.25, SDLC, P802.1d, LLC, IP, IPv6, IPX, DECNET, APPLETALK, FR, PPP, IP Telephony, LAN PBX systems, management protocols like SNMP, e-mail, network transparent window systems, protocol implementation, protocol verification, conformance testing and tools used in maintaining or developing packet switching systems.</para></listitem><listitem><para>de.comm.protocols.tcp-ip
Description: Umstellung auf IPv6
Source: <ulink url="http://www.faqs.org/faqs/de-newsgroups/chartas/index.html">Chartas der Newsgruppen in de.*</ulink></para></listitem><listitem><para>Google Group: <ulink url="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=comp.protocols.tcp-ip">comp.protocols.tcp-ip</ulink></para></listitem><listitem><para>Google Group: <ulink url="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=linux.debian.maint.ipv6">linux.debian.maint.ipv6</ulink></para></listitem><listitem><para>Google Group: <ulink url="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=microsoft.public.platformsdk.networking.ipv6">microsoft.public.platformsdk.networking.ipv6</ulink></para></listitem><listitem><para>Google Group: <ulink url="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=fa.openbsd.ipv6">fa.openbsd.ipv6</ulink></para></listitem></itemizedlist></sect1><sect1 id='information-onlinetesttools' >
<title><!-- anchor id="information-onlinetesttools" -->Online tools</title>
<sect2>
<title>Testing tools</title>
<itemizedlist>
<listitem><para>ping, traceroute, tracepath, 6bone registry, DNS: <ulink url="http://www.join.uni-muenster.de/lab/testtools.html">JOIN / Testtools</ulink> (German language only, but should be no problem for non German speakers)</para></listitem><listitem><para>traceroute6, whois: <ulink url="http://www.ipng.nl/">IPng.nl</ulink></para></listitem><listitem><para>AAAA Lookup Checker <ulink url="http://www.cnri.dit.ie/cgi-bin/check_aaaa.pl">http://www.cnri.dit.ie/cgi-bin/check_aaaa.pl</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>Information retrievement</title>
<itemizedlist>
<listitem><para><ulink url="http://www.ripe.net/ripencc/mem-services/registration/ipv6/ipv6allocs.html">List of worldwide all IPv6-aggregated IP-Blocks</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>IPv6 Looking Glasses</title>
<itemizedlist>
<listitem><para><ulink url="http://www.v6.dren.net/lg/">DRENv6 Looking Glass</ulink></para></listitem></itemizedlist></sect2><sect2>
<title>Helper applications</title>
<itemizedlist>
<listitem><para><ulink url="http://www.tdoi.org/prefcalc.php">IPv6 Prefix Calculator</ulink> by <ulink url="http://www.tdoi.org/">TDOI</ulink></para></listitem><listitem><para><ulink url="http://www.maths.tcd.ie/cgi-bin/check_dns.pl">DNS record checker</ulink></para></listitem></itemizedlist></sect2></sect1><sect1 id='information-trainingsandseminars' >
<title><!-- anchor id="information-trainingsandseminars" -->Trainings, Seminars</title>
<itemizedlist>
<listitem><para><ulink url="http://www.e-trainonline.com/html/ciw_internetworking_profession.html#IPv6">CIW Internetworking Professional Training CBT CD</ulink></para></listitem><listitem><para><ulink url="http://www.trainingpages.com/x/category,kw-1628,.html">Training Pages</ulink>, U.K. - Search for IPv6 (13 Courses, 2006-08-21)</para></listitem><listitem><para><ulink url="http://www.erion.co.uk/ipv6.html">Erion IPv6 Training</ulink>, UK</para></listitem></itemizedlist><para>Something missing? Suggestions are welcome!</para></sect1><sect1 id='information-onlinediscovery' >
<title><!-- anchor id="information-onlinediscovery" -->'The Online Discovery' ...</title>
<para>IPv6: Addressing The Needs Of the Future by Yankee Group (Author) 
List Price:   $595.00
Edition: e-book (Acrobat Reader)
Pages: 3 (three)
Publisher: MarketResearch.com; ISBN B00006334Y; (November 1, 2001) 
</para>
<para>;-) The number of copies would be interesting...
</para></sect1></chapter><chapter>
<title>Revision history / Credits / The End</title>
<sect1 id='revision-history' >
<title><!-- anchor id="revision-history" -->Revision history</title>
<para>Versions x.y are published on the Internet.</para>
<para>Versions x.y.z are work-in-progress and published as LyX and SGML file on CVS. Because Deep Space 6 mirrors these SGML files and generate independend from TLDP public versions, this versions will show up there and also on its mirrors.</para><sect2>
<title>Releases 0.x</title>
<variablelist>
<varlistentry><term>0.67wip</term><listitem><para>2015-08-18/PB: fix some broken URLs, 20151016/bie: remove broken URL to Spanish transation, 20161215/bie: update some URLs, 20170114/: update some URLs</para></listitem></varlistentry><varlistentry><term>0.66</term><listitem><para>2010-04-20/PB: extend QoS section with examples, 20130513/PB: add IPv6 NAT hints, 20130521/PB: review dhcpd, 20131019/bie: general review, 20140502/bie: add hints for nftables, 20140513/bie: extend section regarding address resolution and add source/destination address selection information, 20140515/bie: add hints for activation of privacy extension</para></listitem></varlistentry><varlistentry><term>0.65</term><listitem><para>2009-12-13/PB: minor fixes</para></listitem></varlistentry><varlistentry><term>0.64</term><listitem><para>2009-06-11/PB: extend DHCP server examples (ISC DHCP, Dibbler)</para></listitem></varlistentry><varlistentry><term>0.63</term><listitem><para>2009-02-14/PB: Fix FSF address, major update on 4in6 tunnels, add new section for address resolving, add some URLs, remove broken URLs</para></listitem></varlistentry><varlistentry><term>0.62</term><listitem><para>2008-11-09/PB: Adjust URL to Turkish howto, add some HIP related URLs, remove broken URLs</para></listitem></varlistentry><varlistentry><term>0.61.1</term><listitem><para>2007-11-11/PB: fix broken description of shortcut BIND</para></listitem></varlistentry><varlistentry><term>0.61</term><listitem><para>2007-10-06/PB: fix broken URLs to TLDP-CVS, minor URL update.</para></listitem></varlistentry><varlistentry><term>0.60.2</term><listitem><para>2007-10-03/PB: fix description of sysctl/autoconf (credits to Francois-Xavier Le Bail)</para></listitem></varlistentry><varlistentry><term>0.60.1</term><listitem><para>2007-06-16/PB: speling fixes (credits to Larry W. Burton)</para></listitem></varlistentry><varlistentry><term>0.60</term><listitem><para>2007-05-29/PB: import major contribution to Programming using C-API written by John Wenker, minor fixes</para></listitem></varlistentry><varlistentry><term>0.52</term><listitem><para>2007-05-23/PB: update firewalling chapter, improve document for proper SGML validation, minor bugfixes</para></listitem></varlistentry><varlistentry><term>0.51</term><listitem><para>2006-11-08/PB: remove broken URLs, add a new book (credits to Bryan Vukich)</para></listitem></varlistentry><varlistentry><term>0.50.2</term><listitem><para>2006-10-25/PB: fix typo in dhcp6 section (credits to Michele Ferritto)</para></listitem></varlistentry><varlistentry><term>0.50.1</term><listitem><para>2006-09-23/PB: add some URLs</para></listitem></varlistentry><varlistentry><term>0.50</term><listitem><para>2006-08-24/PB: check RFC URLs, fix URL to Chinese translation, finalize for publishing</para></listitem></varlistentry><varlistentry><term>0.49.5</term><listitem><para>2006-08-23/PB: fix/remove broken URLs</para></listitem></varlistentry><varlistentry><term>0.49.4</term><listitem><para>2006-08-21/PB: some review, update and enhancement of the content, replace old 6bone example addresses with the current defined ones.</para></listitem></varlistentry><varlistentry><term>0.49.3</term><listitem><para>2006-08-20/PB: fix bug in maillist entries, 'mobility' is now a separate chapter</para></listitem></varlistentry><varlistentry><term>0.49.2</term><listitem><para>2006-08-20/PB: update and cleanup of maillist entries</para></listitem></varlistentry><varlistentry><term>0.49.1</term><listitem><para>2006-06-13/PB: major update of mobility section (contributed by Benjamin Thery)</para></listitem></varlistentry><varlistentry><term>0.49</term><listitem><para>2005-10-03/PB: add configuration hints for DHCPv6, major broken URL cleanup (credits to Necdet Yucel)</para></listitem></varlistentry><varlistentry><term>0.48.1</term><listitem><para>2005-01-15/PB: minor fixes</para></listitem></varlistentry><varlistentry><term>0.48</term><listitem><para>2005-01-11/PB: grammar check and minor review of IPv6 IPsec section</para></listitem></varlistentry><varlistentry><term>0.47.1</term><listitem><para>2005-01-01/PB: add information and examples about IPv6 IPsec, add some URLs</para></listitem></varlistentry><varlistentry><term>0.47</term><listitem><para>2004-08-30/PB: add some notes about proftpd, vsftpd and other daemons, add some URLs, minor fixes, update status of Spanish translation</para></listitem></varlistentry><varlistentry><term>0.46.4</term><listitem><para>2004-07-19/PB: minor fixes</para></listitem></varlistentry><varlistentry><term>0.46.3</term><listitem><para>2004-06-23/PB: add note about started Greek translation, replace Taiwanese with Chinese for related translation</para></listitem></varlistentry><varlistentry><term>0.46.2</term><listitem><para>2004-05-22/PB: minor fixes</para></listitem></varlistentry><varlistentry><term>0.46.1</term><listitem><para>2004-04-18/PB: minor fixes</para></listitem></varlistentry><varlistentry><term>0.46</term><listitem><para>2004-03-04/PB: announce Italian translation, add information about DHCPv6, minor updates</para></listitem></varlistentry><varlistentry><term>0.45.1</term><listitem><para>2004-01-12/PB: add note about the official example address space</para></listitem></varlistentry><varlistentry><term>0.45</term><listitem><para>2004-01-11/PB: minor fixes, add/fix some URLs, some extensions</para></listitem></varlistentry><varlistentry><term>0.44.2</term><listitem><para>2003-10-30/PB: fix some copy&amp;paste text bugs</para></listitem></varlistentry><varlistentry><term>0.44.1</term><listitem><para>2003-10-19/PB: add note about start of Italian translation</para></listitem></varlistentry><varlistentry><term>0.44</term><listitem><para>2003-08-15/PB: fix URLs, add hint on tcp_wrappers (about broken notation in some versions) and Apache2</para></listitem></varlistentry><varlistentry><term>0.43.4</term><listitem><para>2003-07-26/PB: fix URL, add archive URL for maillist users at ipv6.org, add some ds6 URLs</para></listitem></varlistentry><varlistentry><term>0.43.3</term><listitem><para>2003-06-19/PB: fix typos</para></listitem></varlistentry><varlistentry><term>0.43.2</term><listitem><para>2003-06-11/PB: fix URL</para></listitem></varlistentry><varlistentry><term>0.43.1</term><listitem><para>2003-06-07/PB: fix some URLs, fix credits, add some notes at IPsec</para></listitem></varlistentry><varlistentry><term>0.43</term><listitem><para>2003-06-05/PB: add some notes about configuration in SuSE Linux, add URL of French translation</para></listitem></varlistentry><varlistentry><term>0.42</term><listitem><para>2003-05-09/PB: minor fixes, announce French translation</para></listitem></varlistentry><varlistentry><term>0.41.4</term><listitem><para>2003-05-02/PB: Remove a broken URL, update some others.</para></listitem></varlistentry><varlistentry><term>0.41.3</term><listitem><para>2003-04-23/PB: Minor fixes, remove a broken URL, fix URL to Taiwanese translation</para></listitem></varlistentry><varlistentry><term>0.41.2</term><listitem><para>2003-04-13/PB: Fix some typos, add a note about a French translation is in progress</para></listitem></varlistentry><varlistentry><term>0.41.1</term><listitem><para>2003-03-31/PB: Remove a broken URL, fix another</para></listitem></varlistentry><varlistentry><term>0.41</term><listitem><para>2003-03-22/PB: Add URL of German translation</para></listitem></varlistentry><varlistentry><term>0.40.2</term><listitem><para>2003-02-27/PB: Fix a misaddressed URL</para></listitem></varlistentry><varlistentry><term>0.40.1</term><listitem><para>2003-02-12/PB: Add Debian-Linux-Configuration, add a minor note on translations</para></listitem></varlistentry><varlistentry><term>0.40</term><listitem><para>2003-02-10/PB: Announcing available German version</para></listitem></varlistentry><varlistentry><term>0.39.2</term><listitem><para>2003-02-10/GK: Minor syntax and spelling fixes</para></listitem></varlistentry><varlistentry><term>0.39.1</term><listitem><para>2003-01-09/PB: fix an URL (draft adopted to an RFC)</para></listitem></varlistentry><varlistentry><term>0.39</term><listitem><para>2003-01-13/PB: fix a bug (forgotten 'link&rdquo; on &rdquo;ip link set&rdquo; (credits to Yaniv Kaul)</para></listitem></varlistentry><varlistentry><term>0.38.1</term><listitem><para>2003-01-09/PB: a minor fix</para></listitem></varlistentry><varlistentry><term>0.38</term><listitem><para>2003-01-06/PB: minor fixes</para></listitem></varlistentry><varlistentry><term>0.37.1</term><listitem><para>2003-01-05/PB: minor updates</para></listitem></varlistentry><varlistentry><term>0.37</term><listitem><para>2002-12-31/GK: 270 new links added (searched in 1232 SearchEngines) in existing and 53 new (sub)sections</para></listitem></varlistentry><varlistentry><term>0.36.1</term><listitem><para>2002-12-20/PB: Minor fixes</para></listitem></varlistentry><varlistentry><term>0.36</term><listitem><para>2002-12-16/PB: Check of and fix broken links (credits to Georg Käfer), some spelling fixes</para></listitem></varlistentry><varlistentry><term>0.35</term><listitem><para>2002-12-11/PB: Some fixes and extensions</para></listitem></varlistentry><varlistentry><term>0.34.1</term><listitem><para>2002-11-25/PB: Some fixes (e.g. broken linuxdoc URLs)</para></listitem></varlistentry><varlistentry><term>0.34</term><listitem><para>2002-11-19/PB: Add information about German translation (work in progress), some fixes, create a small shortcut explanation list, extend &rdquo;used terms&rdquo; and add two German books</para></listitem></varlistentry><varlistentry><term>0.33</term><listitem><para>2002-11-18/PB: Fix broken RFC-URLs, add parameter ttl on 6to4 tunnel setup example</para></listitem></varlistentry><varlistentry><term>0.32</term><listitem><para>2002-11-03/PB: Add information about Taiwanese translation</para></listitem></varlistentry><varlistentry><term>0.31.1</term><listitem><para>2002-10-06/PB: Add another maillist</para></listitem></varlistentry><varlistentry><term>0.31</term><listitem><para>2002-09-29/PB: Extend information in proc-filesystem entries</para></listitem></varlistentry><varlistentry><term>0.30</term><listitem><para>2002-09-27/PB: Add some maillists</para></listitem></varlistentry><varlistentry><term>0.29</term><listitem><para>2002-09-18/PB: Update statement about nmap (triggered by Fyodor)</para></listitem></varlistentry><varlistentry><term>0.28.1</term><listitem><para>2002-09-16/PB: Add note about ping6 to multicast addresses, add some labels</para></listitem></varlistentry><varlistentry><term>0.28</term><listitem><para>2002-08-17/PB: Fix broken LDP/CVS links, add info about Polish translation, add URL of the IPv6 Address Oracle</para></listitem></varlistentry><varlistentry><term>0.27</term><listitem><para>2002-08-10/PB: Some minor updates</para></listitem></varlistentry><varlistentry><term>0.26.2</term><listitem><para>2002-07-15/PB: Add information neighbor discovery, split of firewalling (got some updates) and security into extra chapters</para></listitem></varlistentry><varlistentry><term>0.26.1</term><listitem><para>2002-07-13/PB: Update nmap/IPv6 information</para></listitem></varlistentry><varlistentry><term>0.26</term><listitem><para>2002-07-13/PB: Fill /proc-filesystem chapter, update DNS information about depricated A6/DNAME, change P-t-P tunnel setup to use of &rdquo;ip&rdquo; only</para></listitem></varlistentry><varlistentry><term>0.25.2</term><listitem><para>2002-07-11/PB: Minor spelling fixes</para></listitem></varlistentry><varlistentry><term>0.25.1</term><listitem><para>2002-06-23/PB: Minor spelling and other fixes</para></listitem></varlistentry><varlistentry><term>0.25</term><listitem><para>2002-05-16/PB: Cosmetic fix for 2^128, thanks to José Abílio Oliveira Matos for help with LyX</para></listitem></varlistentry><varlistentry><term>0.24</term><listitem><para>2002-05-02/PB: Add entries in URL list, minor spelling fixes</para></listitem></varlistentry><varlistentry><term>0.23</term><listitem><para>2002-03-27/PB: Add entries in URL list and at maillists, add a label and minor information about IPv6 on RHL</para></listitem></varlistentry><varlistentry><term>0.22</term><listitem><para>2002-03-04/PB: Add info about 6to4 support in kernel series 2.2.x and add an entry in URL list and at maillists</para></listitem></varlistentry><varlistentry><term>0.21</term><listitem><para>2002-02-26/PB: Migrate next grammar checks submitted by John Ronan </para></listitem></varlistentry><varlistentry><term>0.20.4</term><listitem><para>2002-02-21/PB: Migrate more grammar checks submitted by John Ronan, add some additional hints at DNS section </para></listitem></varlistentry><varlistentry><term>0.20.3</term><listitem><para>2002-02-12/PB: Migrate a minor grammar check patch submitted by John Ronan</para></listitem></varlistentry><varlistentry><term>0.20.2</term><listitem><para>2002-02-05/PB: Add mipl to maillist table</para></listitem></varlistentry><varlistentry><term>0.20.1</term><listitem><para>2002-01-31/PB: Add a hint how to generate 6to4 addresses</para></listitem></varlistentry><varlistentry><term>0.20</term><listitem><para>2002-01-30/PB: Add a hint about default route problem, some minor updates</para></listitem></varlistentry><varlistentry><term>0.19.2</term><listitem><para>2002-01-29/PB: Add many new URLs</para></listitem></varlistentry><varlistentry><term>0.19.1</term><listitem><para>2002-01-27/PB: Add some forgotten URLs</para></listitem></varlistentry><varlistentry><term>0.19</term><listitem><para>2002-01-25/PB: Add two German books, fix quote entinities in exported SGML code</para></listitem></varlistentry><varlistentry><term>0.18.2</term><listitem><para>2002-01-23/PB: Add a FAQ on the program chapter</para></listitem></varlistentry><varlistentry><term>0.18.1</term><listitem><para>2002-01-23/PB: Move &rdquo;the end&rdquo; to the end, add USAGI to maillists</para></listitem></varlistentry><varlistentry><term>0.18</term><listitem><para>2002-01-22/PB: Fix bugs in explanation of multicast address types</para></listitem></varlistentry><varlistentry><term>0.17.2</term><listitem><para>2002-01-22/PB: Cosmetic fix double existing text in history (at 0.16), move all credits to the end of the document</para></listitem></varlistentry><varlistentry><term>0.17.1</term><listitem><para>2002-01-20/PB: Add a reference, fix URL text in online-test-tools</para></listitem></varlistentry><varlistentry><term>0.17</term><listitem><para>2002-01-19/PB: Add some forgotten information and URLs about global IPv6 addresses</para></listitem></varlistentry><varlistentry><term>0.16</term><listitem><para>2002-01-19/PB: Minor fixes, remove &rdquo;bold&rdquo; and &rdquo;emphasize&rdquo; formats on code lines, fix &rdquo;too long unwrapped code lines&rdquo; using selfmade utility, extend list of URLs.</para></listitem></varlistentry><varlistentry><term>0.15</term><listitem><para>2002-01-15/PB: Fix bug in addresstype/anycast, move content related credits to end of document</para></listitem></varlistentry><varlistentry><term>0.14</term><listitem><para>2002-01-14/PB: Minor review at all, new chapter &rdquo;debugging&rdquo;, review &rdquo;addresses&rdquo;, spell checking, grammar checking (from beginning to 3.4.1) by Martin Krafft, add tcpdump examples, copy firewalling/netfilter6 from IPv6+Linux-HowTo, minor enhancements</para></listitem></varlistentry><varlistentry><term>0.13</term><listitem><para>2002-01-05/PB: Add example BIND9/host, move revision history to end of document, minor extensions</para></listitem></varlistentry><varlistentry><term>0.12</term><listitem><para>2002-01-03/PB: Merge review of David Ranch</para></listitem></varlistentry><varlistentry><term>0.11</term><listitem><para>2002-01-02/PB: Spell checking and merge review of Pekka Savola</para></listitem></varlistentry><varlistentry><term>0.10</term><listitem><para>2002-01-02/PB: First public release of chapter 1</para></listitem></varlistentry></variablelist></sect2></sect1><sect1 id='credits' >
<title><!-- anchor id="credits" -->Credits</title>
<para>The quickest way to be added to this nice list is to send bug fixes, corrections, and/or updates to me ;-).</para>
<para>If you want to do a major review, you can use the native LyX file (see <link linkend="general-original-source">original source</link>) and send diffs against it, because diffs against SGML don't help too much.</para><sect2 id='major-credits' >
<title><!-- anchor id="major-credits" -->Major credits</title>
<itemizedlist>
<listitem><para>David Ranch &lt;dranch at trinnet dot net&gt;: For encouraging me to write this HOWTO, his editorial comments on the first few revisions, and his contributions to various IPv6 testing results on my IPv6 web site. Also for his major reviews and suggestions.</para></listitem><listitem><para>Pekka Savola &lt;pekkas at netcore dot fi&gt;: For major reviews, input and suggestions.</para></listitem><listitem><para>Martin F. Krafft &lt;madduck at madduck dot net&gt;: For grammar checks and general reviewing of the document.</para></listitem><listitem><para>John Ronan &lt;j0n at tssg dot wit dot ie&gt;: For grammar checks.</para></listitem><listitem><para>Georg Käfer &lt;gkaefer at gmx dot at&gt;: For detection of no proper PDF creation (fixed now by LDP maintainer Greg Ferguson), input for German books, big list of URLs, checking all URLs, many more suggestions, corrections and contributions, and the German translation</para></listitem><listitem><para>Michel Boucey &lt;mboucey at free dot fr&gt;: Finding typos and some broken URLs, contribute some suggestions and URLs, and the French translation</para></listitem><listitem><para>Michele Ferritto &lt;m dot ferritto at virgilio dot it&gt;: Finding bugs and the Italian translation</para></listitem><listitem><para>Daniel Roesen &lt;dr at cluenet dot de&gt;: For grammar checks</para></listitem><listitem><para>Benjamin Thery &lt;benjamin dot thery at bull dot net&gt;: For contribution of updated mobility section</para></listitem><listitem><para>John Wenker &lt;jjw at pt dot com&gt;: major contribution to Programming using C-API</para></listitem><listitem><para>Srivats P. &lt;Srivats dot P at conexant dot com&gt;: major contribution for 4in6 tunnels</para></listitem></itemizedlist></sect2><sect2>
<title>Other credits</title>
<sect3>
<title>Document technique related</title>
<para>Writing a LDP HOWTO as a newbie (in LyX and exporting this to DocBook to conform to SGML) isn't as easy as some people say. There are some strange pitfalls... Nevertheless, thanks to:</para><itemizedlist>
<listitem><para>Authors of the <ulink url="http://www.tldp.org/LDP/LDP-Author-Guide/">LDP Author Guide</ulink></para></listitem><listitem><para>B. Guillon: For his <ulink url="http://perso.libertysurf.fr/bgu/doc/db4lyx/">DocBook with LyX HOWTO</ulink></para></listitem></itemizedlist></sect3><sect3 id='content-related-credits' >
<title><!-- anchor id="content-related-credits" -->Content related credits</title>
<para>Credits for fixes and hints are listed here, will grow sure in the future</para><itemizedlist>
<listitem><para>S .P. Meenakshi &lt;meena at cs dot iitm dot ernet dot in&gt;: For a hint using a &rdquo;send mail&rdquo; shell program on tcp_wrapper/hosts.deny</para></listitem><listitem><para>Frank Dinies &lt;FrankDinies at web dot de&gt;: For a bugfix on IPv6 address explanation</para></listitem><listitem><para>John Freed &lt;jfreed at linux-mag dot com&gt;: For finding a bug in IPv6 multicast address explanation</para></listitem><listitem><para>Craig Rodrigues &lt;crodrigu at bbn dot com&gt;: For suggestion about RHL IPv6 setup</para></listitem><listitem><para>Fyodor &lt;fyodor at insecure dot org&gt;: Note me about outdated nmap information</para></listitem><listitem><para>Mauro Tortonesi &lt;mauro at deepspace6 dot net&gt;: For some suggestions</para></listitem><listitem><para>Tom Goodale &lt;goodale at aei-potsdam dot mpg dot de&gt;: For some suggestions</para></listitem><listitem><para>Martin Luemkemann &lt;mluemkem at techfak dot uni-bielefeld dot de&gt;: For a suggestion</para></listitem><listitem><para>Jean-Marc V. Liotier &lt;jim at jipo dot com&gt;: Finding a bug</para></listitem><listitem><para>Yaniv Kaul &lt;ykaul at checkpoint dot com&gt;: Finding a bug</para></listitem><listitem><para>Arnout Engelen &lt;arnouten at bzzt dot net&gt;: For sending note about a draft was adopted to RFC now</para></listitem><listitem><para>Stephane Bortzmeyer &lt;bortzmeyer at nic dot fr&gt;: Contributing persistent configuration on Debian</para></listitem><listitem><para>lithis von saturnsys &lt;lithis at saturnsys dot com&gt;: Reporting a misaddressed URL</para></listitem><listitem><para>Guy Hulbert &lt;gwhulbert at rogers dot com&gt;: Send a note that RFC1924 is probably an April fool's joke</para></listitem><listitem><para>Tero Pelander &lt;tpeland at tkukoulu dot fi&gt;: Reporting a broken URL</para></listitem><listitem><para>Walter Jontofsohn &lt;wjontof at gmx dot de&gt;: Hints for SuSE Linux 8.0/8.1</para></listitem><listitem><para>Benjamin Hofstetter &lt;benjamin dot hofstetter at netlabs dot org&gt;: Reporting a mispointing URL</para></listitem><listitem><para>J.P. Larocque &lt;piranha at ely dot ath dot cx&gt;: Reporting archive URL for maillist users at ipv6 dot org</para></listitem><listitem><para>Jorrit Kronjee &lt;jorrit at wafel dot org&gt;: Reporting broken URLs</para></listitem><listitem><para>Colm MacCarthaigh &lt;colm dot maccarthaigh at heanet dot ie&gt;: Hint for sendfile issue on Apache2</para></listitem><listitem><para>Tiago Camilo &lt;tandre at ipg dot pt&gt;: Contribute some URLs about Mobile IPv6</para></listitem><listitem><para>Harald Geiger: Reporting a bug in how described the bit counting of the universal/global bit</para></listitem><listitem><para>Bjoern Jacke &lt;bjoern at j3e dot de&gt;: Triggered me to fix some outdated information on xinetd</para></listitem><listitem><para>Christoph Egger &lt;cegger at chrrr dot com&gt;: Sending note about &rdquo;ip&rdquo; has problems with IPv4-compatible addresses on SuSE Linux 9.0 and trigger to add a hint on 6to4-radvd example</para></listitem><listitem><para>David Lee Haw Ling &lt;hawling at singnet dot com dot sg&gt;: Sending information about a tunnel broker</para></listitem><listitem><para>Michael H. Warfield &lt;mhw at iss dot net&gt;: Sending note about suffix for 6to4 routers</para></listitem><listitem><para>Tomasz Mrugalski &lt;thomson at klub dot com dot pl&gt;: Sending updates for DHCPv6 section</para></listitem><listitem><para>Jan Minar &lt;jjminar at fastmail dot fm&gt;: Reporting minor bugs</para></listitem><listitem><para>Kalin KOZHUHAROV &lt;kalin at tar dot bz&gt;: Fixing a not so well explanation</para></listitem><listitem><para>Roel van Dijk &lt;rdvdijk at planet dot nl&gt;: Reporting broken URLs</para></listitem><listitem><para>Catalin Muresan &lt;catalin dot muresan at astral dot ro&gt;: Reporting minor bugs</para></listitem><listitem><para>Dennis van Dok &lt;dvandok at quicknet dot nl&gt;: Reporting minor bugs</para></listitem><listitem><para>Necdet Yucel &lt;nyucel at comu dot edu dot tr&gt;: Reporting broken URLs</para></listitem><listitem><para>Bryan Vukich: Reporting a broken URL</para></listitem><listitem><para>Daniele Masini: reporting a broken iptables example</para></listitem><listitem><para>Yao Zhao: reporting a bug in IPv6 route remove description</para></listitem><listitem><para>Aaron Kunde: reporting a broken URL and a content related bug</para></listitem><listitem><para>Larry W. Burton: speling fixes</para></listitem><listitem><para>Justin Pryzby: reporting broken shortcut description of BIND</para></listitem></itemizedlist></sect3></sect2></sect1><sect1>
<title>The End</title>
<para>Thanks for reading. Hope it helps!</para>
<para>If you have any questions, subscribe to proper <link linkend="information-maillists">maillist</link> and describe your problem providing as much as information as possible.</para></sect1></chapter></book>